using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BlazorWebAPI.Models
{
    public partial class BasakContext : DbContext
    {
        public BasakContext()
        {
        }

        public BasakContext(DbContextOptions<BasakContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CrmLead> CrmLeads { get; set; } = null!;
        public virtual DbSet<CrmLeadAttachment> CrmLeadAttachments { get; set; } = null!;
        public virtual DbSet<CrmLeadContact> CrmLeadContacts { get; set; } = null!;
        public virtual DbSet<CrmMarketingActivity> CrmMarketingActivities { get; set; } = null!;
        public virtual DbSet<CrmMarketingActivityAttachment> CrmMarketingActivityAttachments { get; set; } = null!;
        public virtual DbSet<CrmMarketingActivityProduct> CrmMarketingActivityProducts { get; set; } = null!;
        public virtual DbSet<CrmMarketingActivityResource> CrmMarketingActivityResources { get; set; } = null!;
        public virtual DbSet<CrmMarketingType> CrmMarketingTypes { get; set; } = null!;
        public virtual DbSet<CrmStatus> CrmStatuses { get; set; } = null!;
        public virtual DbSet<CrmTerritory> CrmTerritories { get; set; } = null!;
        public virtual DbSet<CrmTransactionFlow> CrmTransactionFlows { get; set; } = null!;
        public virtual DbSet<CrmTransactionFlowItem> CrmTransactionFlowItems { get; set; } = null!;
        public virtual DbSet<CrmTransactionFlowResource> CrmTransactionFlowResources { get; set; } = null!;
        public virtual DbSet<CrmTransactionFlowResult> CrmTransactionFlowResults { get; set; } = null!;
        public virtual DbSet<CrmTransactionType> CrmTransactionTypes { get; set; } = null!;
        public virtual DbSet<CrmTransactionTypeResourceAttribute> CrmTransactionTypeResourceAttributes { get; set; } = null!;
        public virtual DbSet<CrmTransactionTypeResult> CrmTransactionTypeResults { get; set; } = null!;
        public virtual DbSet<CrmWorkFlowState> CrmWorkFlowStates { get; set; } = null!;
        public virtual DbSet<ErpAccessCode> ErpAccessCodes { get; set; } = null!;
        public virtual DbSet<ErpActualCost> ErpActualCosts { get; set; } = null!;
        public virtual DbSet<ErpAddress> ErpAddresses { get; set; } = null!;
        public virtual DbSet<ErpAddressTelephoneFax> ErpAddressTelephoneFaxes { get; set; } = null!;
        public virtual DbSet<ErpApprovedTransaction> ErpApprovedTransactions { get; set; } = null!;
        public virtual DbSet<ErpAsserviceCurrentAccountDetail> ErpAsserviceCurrentAccountDetails { get; set; } = null!;
        public virtual DbSet<ErpAsserviceFaulty> ErpAsserviceFaulties { get; set; } = null!;
        public virtual DbSet<ErpAsserviceFaultyItem> ErpAsserviceFaultyItems { get; set; } = null!;
        public virtual DbSet<ErpBank> ErpBanks { get; set; } = null!;
        public virtual DbSet<ErpBankAccount> ErpBankAccounts { get; set; } = null!;
        public virtual DbSet<ErpBankAccountIa> ErpBankAccountIas { get; set; } = null!;
        public virtual DbSet<ErpBankAccountTotal> ErpBankAccountTotals { get; set; } = null!;
        public virtual DbSet<ErpBankAccountWorkplace> ErpBankAccountWorkplaces { get; set; } = null!;
        public virtual DbSet<ErpBankCredit> ErpBankCredits { get; set; } = null!;
        public virtual DbSet<ErpBankCreditAttachment> ErpBankCreditAttachments { get; set; } = null!;
        public virtual DbSet<ErpBankCreditExpoClosing> ErpBankCreditExpoClosings { get; set; } = null!;
        public virtual DbSet<ErpBankCreditItem> ErpBankCreditItems { get; set; } = null!;
        public virtual DbSet<ErpBankPo> ErpBankPos { get; set; } = null!;
        public virtual DbSet<ErpBankPosTransaction> ErpBankPosTransactions { get; set; } = null!;
        public virtual DbSet<ErpBankReceipt> ErpBankReceipts { get; set; } = null!;
        public virtual DbSet<ErpBankReceiptAttachment> ErpBankReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpBankReceiptItem> ErpBankReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpBankWorkplace> ErpBankWorkplaces { get; set; } = null!;
        public virtual DbSet<ErpBox> ErpBoxes { get; set; } = null!;
        public virtual DbSet<ErpBoxItem> ErpBoxItems { get; set; } = null!;
        public virtual DbSet<ErpBoxItemVariant> ErpBoxItemVariants { get; set; } = null!;
        public virtual DbSet<ErpBoxTotal> ErpBoxTotals { get; set; } = null!;
        public virtual DbSet<ErpBudget> ErpBudgets { get; set; } = null!;
        public virtual DbSet<ErpBudgetItem> ErpBudgetItems { get; set; } = null!;
        public virtual DbSet<ErpCalendar> ErpCalendars { get; set; } = null!;
        public virtual DbSet<ErpCalendarItem> ErpCalendarItems { get; set; } = null!;
        public virtual DbSet<ErpCallerIdLog> ErpCallerIdLogs { get; set; } = null!;
        public virtual DbSet<ErpCash> ErpCashes { get; set; } = null!;
        public virtual DbSet<ErpCashIa> ErpCashIas { get; set; } = null!;
        public virtual DbSet<ErpCashTotal> ErpCashTotals { get; set; } = null!;
        public virtual DbSet<ErpCashTotalItem> ErpCashTotalItems { get; set; } = null!;
        public virtual DbSet<ErpCategory> ErpCategories { get; set; } = null!;
        public virtual DbSet<ErpCertification> ErpCertifications { get; set; } = null!;
        public virtual DbSet<ErpCheque> ErpCheques { get; set; } = null!;
        public virtual DbSet<ErpChequeReceipt> ErpChequeReceipts { get; set; } = null!;
        public virtual DbSet<ErpChequeReceiptAttachment> ErpChequeReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpChequeReceiptItem> ErpChequeReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpChequeTransaction> ErpChequeTransactions { get; set; } = null!;
        public virtual DbSet<ErpCompany> ErpCompanies { get; set; } = null!;
        public virtual DbSet<ErpCompanyBank> ErpCompanyBanks { get; set; } = null!;
        public virtual DbSet<ErpCompanyCurrentAccount> ErpCompanyCurrentAccounts { get; set; } = null!;
        public virtual DbSet<ErpCompanyIa> ErpCompanyIas { get; set; } = null!;
        public virtual DbSet<ErpCompetency> ErpCompetencies { get; set; } = null!;
        public virtual DbSet<ErpCompetitor> ErpCompetitors { get; set; } = null!;
        public virtual DbSet<ErpCompetitorProduct> ErpCompetitorProducts { get; set; } = null!;
        public virtual DbSet<ErpContract> ErpContracts { get; set; } = null!;
        public virtual DbSet<ErpContractAttachment> ErpContractAttachments { get; set; } = null!;
        public virtual DbSet<ErpContractItem> ErpContractItems { get; set; } = null!;
        public virtual DbSet<ErpContractItemVariant> ErpContractItemVariants { get; set; } = null!;
        public virtual DbSet<ErpCostCenter> ErpCostCenters { get; set; } = null!;
        public virtual DbSet<ErpCostCenterDistribution> ErpCostCenterDistributions { get; set; } = null!;
        public virtual DbSet<ErpCostCenterTotal> ErpCostCenterTotals { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccount> ErpCurrentAccounts { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountAttachment> ErpCurrentAccountAttachments { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountBank> ErpCurrentAccountBanks { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountCategory> ErpCurrentAccountCategories { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountContact> ErpCurrentAccountContacts { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountExplanation> ErpCurrentAccountExplanations { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountGroup> ErpCurrentAccountGroups { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountInventoryAttribute> ErpCurrentAccountInventoryAttributes { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountMailing> ErpCurrentAccountMailings { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountReceipt> ErpCurrentAccountReceipts { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountReceiptAttachment> ErpCurrentAccountReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountReceiptItem> ErpCurrentAccountReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountReference> ErpCurrentAccountReferences { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountRiskControl> ErpCurrentAccountRiskControls { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountRiskTotal> ErpCurrentAccountRiskTotals { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountTotal> ErpCurrentAccountTotals { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountTransaction> ErpCurrentAccountTransactions { get; set; } = null!;
        public virtual DbSet<ErpCurrentAccountWorkplace> ErpCurrentAccountWorkplaces { get; set; } = null!;
        public virtual DbSet<ErpCustomerTransaction> ErpCustomerTransactions { get; set; } = null!;
        public virtual DbSet<ErpCustomerTransactionActivity> ErpCustomerTransactionActivities { get; set; } = null!;
        public virtual DbSet<ErpCustomerTransactionAttachment> ErpCustomerTransactionAttachments { get; set; } = null!;
        public virtual DbSet<ErpCustomerTransactionResource> ErpCustomerTransactionResources { get; set; } = null!;
        public virtual DbSet<ErpDeclaration> ErpDeclarations { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp1> ErpDeclarationApp1s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp2> ErpDeclarationApp2s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp3> ErpDeclarationApp3s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp4> ErpDeclarationApp4s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp5> ErpDeclarationApp5s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp6> ErpDeclarationApp6s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationApp7> ErpDeclarationApp7s { get; set; } = null!;
        public virtual DbSet<ErpDeclarationItem> ErpDeclarationItems { get; set; } = null!;
        public virtual DbSet<ErpDemandReceipt> ErpDemandReceipts { get; set; } = null!;
        public virtual DbSet<ErpDemandReceiptAttachment> ErpDemandReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpDemandReceiptItem> ErpDemandReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpDemandReceiptItemVariant> ErpDemandReceiptItemVariants { get; set; } = null!;
        public virtual DbSet<ErpDepartment> ErpDepartments { get; set; } = null!;
        public virtual DbSet<ErpDepartmentCapacity> ErpDepartmentCapacities { get; set; } = null!;
        public virtual DbSet<ErpDepartmentCash> ErpDepartmentCashes { get; set; } = null!;
        public virtual DbSet<ErpDepartmentDelivery> ErpDepartmentDeliveries { get; set; } = null!;
        public virtual DbSet<ErpDepartmentGroup> ErpDepartmentGroups { get; set; } = null!;
        public virtual DbSet<ErpDepartmentService> ErpDepartmentServices { get; set; } = null!;
        public virtual DbSet<ErpDepartmentWarehouse> ErpDepartmentWarehouses { get; set; } = null!;
        public virtual DbSet<ErpDespatchContact> ErpDespatchContacts { get; set; } = null!;
        public virtual DbSet<ErpDiscount> ErpDiscounts { get; set; } = null!;
        public virtual DbSet<ErpDocument> ErpDocuments { get; set; } = null!;
        public virtual DbSet<ErpDocumentAttachment> ErpDocumentAttachments { get; set; } = null!;
        public virtual DbSet<ErpEducation> ErpEducations { get; set; } = null!;
        public virtual DbSet<ErpEducationAttachment> ErpEducationAttachments { get; set; } = null!;
        public virtual DbSet<ErpEducationStudent> ErpEducationStudents { get; set; } = null!;
        public virtual DbSet<ErpEinvoice> ErpEinvoices { get; set; } = null!;
        public virtual DbSet<ErpEmployee> ErpEmployees { get; set; } = null!;
        public virtual DbSet<ErpEmployeeAddPayment> ErpEmployeeAddPayments { get; set; } = null!;
        public virtual DbSet<ErpEmployeeAttachment> ErpEmployeeAttachments { get; set; } = null!;
        public virtual DbSet<ErpEmployeeCompetency> ErpEmployeeCompetencies { get; set; } = null!;
        public virtual DbSet<ErpEmployeeHistory> ErpEmployeeHistories { get; set; } = null!;
        public virtual DbSet<ErpEmployeeIa> ErpEmployeeIas { get; set; } = null!;
        public virtual DbSet<ErpEmployeePremium> ErpEmployeePremia { get; set; } = null!;
        public virtual DbSet<ErpEmployeeRelation> ErpEmployeeRelations { get; set; } = null!;
        public virtual DbSet<ErpEmployeeTimeAttandance> ErpEmployeeTimeAttandances { get; set; } = null!;
        public virtual DbSet<ErpExpense> ErpExpenses { get; set; } = null!;
        public virtual DbSet<ErpExpenseReport> ErpExpenseReports { get; set; } = null!;
        public virtual DbSet<ErpExpo> ErpExpos { get; set; } = null!;
        public virtual DbSet<ErpExpoAttachment> ErpExpoAttachments { get; set; } = null!;
        public virtual DbSet<ErpExpoImportClosing> ErpExpoImportClosings { get; set; } = null!;
        public virtual DbSet<ErpExpoItem> ErpExpoItems { get; set; } = null!;
        public virtual DbSet<ErpExpoItemDetail> ErpExpoItemDetails { get; set; } = null!;
        public virtual DbSet<ErpExpoItemVariant> ErpExpoItemVariants { get; set; } = null!;
        public virtual DbSet<ErpFaultyCard> ErpFaultyCards { get; set; } = null!;
        public virtual DbSet<ErpFinancialTable> ErpFinancialTables { get; set; } = null!;
        public virtual DbSet<ErpFinancialTableItem> ErpFinancialTableItems { get; set; } = null!;
        public virtual DbSet<ErpFixedAssetDebit> ErpFixedAssetDebits { get; set; } = null!;
        public virtual DbSet<ErpFixedAssetDepreciation> ErpFixedAssetDepreciations { get; set; } = null!;
        public virtual DbSet<ErpFixedAssetExpense> ErpFixedAssetExpenses { get; set; } = null!;
        public virtual DbSet<ErpFixedAssetUsefulServiceLife> ErpFixedAssetUsefulServiceLives { get; set; } = null!;
        public virtual DbSet<ErpGiftVoucher> ErpGiftVouchers { get; set; } = null!;
        public virtual DbSet<ErpGiftVoucherDept> ErpGiftVoucherDepts { get; set; } = null!;
        public virtual DbSet<ErpGiftVoucherType> ErpGiftVoucherTypes { get; set; } = null!;
        public virtual DbSet<ErpGiftVoucherTypeDept> ErpGiftVoucherTypeDepts { get; set; } = null!;
        public virtual DbSet<ErpGlaccount> ErpGlaccounts { get; set; } = null!;
        public virtual DbSet<ErpGlaccountTotal> ErpGlaccountTotals { get; set; } = null!;
        public virtual DbSet<ErpGleledger> ErpGleledgers { get; set; } = null!;
        public virtual DbSet<ErpGlintegration> ErpGlintegrations { get; set; } = null!;
        public virtual DbSet<ErpGlreceipt> ErpGlreceipts { get; set; } = null!;
        public virtual DbSet<ErpGlreceiptIntegration> ErpGlreceiptIntegrations { get; set; } = null!;
        public virtual DbSet<ErpGlreceiptItem> ErpGlreceiptItems { get; set; } = null!;
        public virtual DbSet<ErpGlreceiptItemInv> ErpGlreceiptItemInvs { get; set; } = null!;
        public virtual DbSet<ErpGlreflection> ErpGlreflections { get; set; } = null!;
        public virtual DbSet<ErpGlreflectionDefinition> ErpGlreflectionDefinitions { get; set; } = null!;
        public virtual DbSet<ErpGlregBook> ErpGlregBooks { get; set; } = null!;
        public virtual DbSet<ErpGuarantor> ErpGuarantors { get; set; } = null!;
        public virtual DbSet<ErpInitialCost> ErpInitialCosts { get; set; } = null!;
        public virtual DbSet<ErpInitialCostAttachment> ErpInitialCostAttachments { get; set; } = null!;
        public virtual DbSet<ErpInitialCostCard> ErpInitialCostCards { get; set; } = null!;
        public virtual DbSet<ErpInitialCostItem> ErpInitialCostItems { get; set; } = null!;
        public virtual DbSet<ErpInterestRate> ErpInterestRates { get; set; } = null!;
        public virtual DbSet<ErpInterestRateItem> ErpInterestRateItems { get; set; } = null!;
        public virtual DbSet<ErpInventory> ErpInventories { get; set; } = null!;
        public virtual DbSet<ErpInventoryAllocation> ErpInventoryAllocations { get; set; } = null!;
        public virtual DbSet<ErpInventoryAlternative> ErpInventoryAlternatives { get; set; } = null!;
        public virtual DbSet<ErpInventoryAssortment> ErpInventoryAssortments { get; set; } = null!;
        public virtual DbSet<ErpInventoryAssortmentItem> ErpInventoryAssortmentItems { get; set; } = null!;
        public virtual DbSet<ErpInventoryAttachment> ErpInventoryAttachments { get; set; } = null!;
        public virtual DbSet<ErpInventoryAttribute> ErpInventoryAttributes { get; set; } = null!;
        public virtual DbSet<ErpInventoryAttributeSet> ErpInventoryAttributeSets { get; set; } = null!;
        public virtual DbSet<ErpInventoryAttributeSetItem> ErpInventoryAttributeSetItems { get; set; } = null!;
        public virtual DbSet<ErpInventoryBarcode> ErpInventoryBarcodes { get; set; } = null!;
        public virtual DbSet<ErpInventoryCampaign> ErpInventoryCampaigns { get; set; } = null!;
        public virtual DbSet<ErpInventoryCampaignDepartment> ErpInventoryCampaignDepartments { get; set; } = null!;
        public virtual DbSet<ErpInventoryCampaignItem> ErpInventoryCampaignItems { get; set; } = null!;
        public virtual DbSet<ErpInventoryCampaignPromotion> ErpInventoryCampaignPromotions { get; set; } = null!;
        public virtual DbSet<ErpInventoryExplanation> ErpInventoryExplanations { get; set; } = null!;
        public virtual DbSet<ErpInventoryGroup> ErpInventoryGroups { get; set; } = null!;
        public virtual DbSet<ErpInventoryGroupIa> ErpInventoryGroupIas { get; set; } = null!;
        public virtual DbSet<ErpInventoryIa> ErpInventoryIas { get; set; } = null!;
        public virtual DbSet<ErpInventoryMargin> ErpInventoryMargins { get; set; } = null!;
        public virtual DbSet<ErpInventoryPriceList> ErpInventoryPriceLists { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceipt> ErpInventoryReceipts { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptAttachment> ErpInventoryReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptDespatchContact> ErpInventoryReceiptDespatchContacts { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptItem> ErpInventoryReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptItemAttachment> ErpInventoryReceiptItemAttachments { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptItemPayment> ErpInventoryReceiptItemPayments { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptItemVariant> ErpInventoryReceiptItemVariants { get; set; } = null!;
        public virtual DbSet<ErpInventoryReceiptShipment> ErpInventoryReceiptShipments { get; set; } = null!;
        public virtual DbSet<ErpInventorySerialAttachment> ErpInventorySerialAttachments { get; set; } = null!;
        public virtual DbSet<ErpInventorySerialCard> ErpInventorySerialCards { get; set; } = null!;
        public virtual DbSet<ErpInventorySerialCardItem> ErpInventorySerialCardItems { get; set; } = null!;
        public virtual DbSet<ErpInventorySerialCardTotal> ErpInventorySerialCardTotals { get; set; } = null!;
        public virtual DbSet<ErpInventorySerialTransaction> ErpInventorySerialTransactions { get; set; } = null!;
        public virtual DbSet<ErpInventorySet> ErpInventorySets { get; set; } = null!;
        public virtual DbSet<ErpInventorySupplier> ErpInventorySuppliers { get; set; } = null!;
        public virtual DbSet<ErpInventoryTaxUsage> ErpInventoryTaxUsages { get; set; } = null!;
        public virtual DbSet<ErpInventoryTotal> ErpInventoryTotals { get; set; } = null!;
        public virtual DbSet<ErpInventoryUnitItemSize> ErpInventoryUnitItemSizes { get; set; } = null!;
        public virtual DbSet<ErpInventoryVariant> ErpInventoryVariants { get; set; } = null!;
        public virtual DbSet<ErpInventoryWarehouse> ErpInventoryWarehouses { get; set; } = null!;
        public virtual DbSet<ErpInventoryWorkStudy> ErpInventoryWorkStudies { get; set; } = null!;
        public virtual DbSet<ErpInventoryWorkplace> ErpInventoryWorkplaces { get; set; } = null!;
        public virtual DbSet<ErpInvoice> ErpInvoices { get; set; } = null!;
        public virtual DbSet<ErpInvoiceAttachment> ErpInvoiceAttachments { get; set; } = null!;
        public virtual DbSet<ErpLabRecipe> ErpLabRecipes { get; set; } = null!;
        public virtual DbSet<ErpLabRecipeItem> ErpLabRecipeItems { get; set; } = null!;
        public virtual DbSet<ErpLabRecipeRev> ErpLabRecipeRevs { get; set; } = null!;
        public virtual DbSet<ErpLocalization> ErpLocalizations { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCard> ErpLoyalityCards { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCardDept> ErpLoyalityCardDepts { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCardService> ErpLoyalityCardServices { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCardType> ErpLoyalityCardTypes { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCardTypeDept> ErpLoyalityCardTypeDepts { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCardTypeProxy> ErpLoyalityCardTypeProxies { get; set; } = null!;
        public virtual DbSet<ErpLoyalityCardTypeService> ErpLoyalityCardTypeServices { get; set; } = null!;
        public virtual DbSet<ErpMachineOwner> ErpMachineOwners { get; set; } = null!;
        public virtual DbSet<ErpManufacturingType> ErpManufacturingTypes { get; set; } = null!;
        public virtual DbSet<ErpMark> ErpMarks { get; set; } = null!;
        public virtual DbSet<ErpMaterialRequirement> ErpMaterialRequirements { get; set; } = null!;
        public virtual DbSet<ErpMaterialRequirementDetail> ErpMaterialRequirementDetails { get; set; } = null!;
        public virtual DbSet<ErpMaterialRequirementItem> ErpMaterialRequirementItems { get; set; } = null!;
        public virtual DbSet<ErpModel> ErpModels { get; set; } = null!;
        public virtual DbSet<ErpNews> ErpNews { get; set; } = null!;
        public virtual DbSet<ErpNotification> ErpNotifications { get; set; } = null!;
        public virtual DbSet<ErpNotificationItem> ErpNotificationItems { get; set; } = null!;
        public virtual DbSet<ErpOrderReceipt> ErpOrderReceipts { get; set; } = null!;
        public virtual DbSet<ErpOrderReceiptAttachment> ErpOrderReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpOrderReceiptItem> ErpOrderReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpOrderReceiptItemAttachment> ErpOrderReceiptItemAttachments { get; set; } = null!;
        public virtual DbSet<ErpOrderReceiptItemVariant> ErpOrderReceiptItemVariants { get; set; } = null!;
        public virtual DbSet<ErpPackaging> ErpPackagings { get; set; } = null!;
        public virtual DbSet<ErpPackingList> ErpPackingLists { get; set; } = null!;
        public virtual DbSet<ErpPackingListItem> ErpPackingListItems { get; set; } = null!;
        public virtual DbSet<ErpPackingListItemVariant> ErpPackingListItemVariants { get; set; } = null!;
        public virtual DbSet<ErpParameter> ErpParameters { get; set; } = null!;
        public virtual DbSet<ErpParameterBarcode> ErpParameterBarcodes { get; set; } = null!;
        public virtual DbSet<ErpParameterBonu> ErpParameterBonus { get; set; } = null!;
        public virtual DbSet<ErpParameterDocNo> ErpParameterDocNos { get; set; } = null!;
        public virtual DbSet<ErpParameterPo> ErpParameterPos { get; set; } = null!;
        public virtual DbSet<ErpParameterPosDevice> ErpParameterPosDevices { get; set; } = null!;
        public virtual DbSet<ErpParameterPosExp> ErpParameterPosExps { get; set; } = null!;
        public virtual DbSet<ErpParameterPosPrinter> ErpParameterPosPrinters { get; set; } = null!;
        public virtual DbSet<ErpParameterRevaluation> ErpParameterRevaluations { get; set; } = null!;
        public virtual DbSet<ErpPaymentCard> ErpPaymentCards { get; set; } = null!;
        public virtual DbSet<ErpPaymentCardDept> ErpPaymentCardDepts { get; set; } = null!;
        public virtual DbSet<ErpPaymentCardItem> ErpPaymentCardItems { get; set; } = null!;
        public virtual DbSet<ErpPaymentPlan> ErpPaymentPlans { get; set; } = null!;
        public virtual DbSet<ErpPaymentPlanItem> ErpPaymentPlanItems { get; set; } = null!;
        public virtual DbSet<ErpPlanning> ErpPlannings { get; set; } = null!;
        public virtual DbSet<ErpPo> ErpPos { get; set; } = null!;
        public virtual DbSet<ErpPoll> ErpPolls { get; set; } = null!;
        public virtual DbSet<ErpPollAnswer> ErpPollAnswers { get; set; } = null!;
        public virtual DbSet<ErpPollQuestion> ErpPollQuestions { get; set; } = null!;
        public virtual DbSet<ErpPollUserAnswer> ErpPollUserAnswers { get; set; } = null!;
        public virtual DbSet<ErpPosEndOfDateRaport> ErpPosEndOfDateRaports { get; set; } = null!;
        public virtual DbSet<ErpPosTransferDetail> ErpPosTransferDetails { get; set; } = null!;
        public virtual DbSet<ErpPredecessor> ErpPredecessors { get; set; } = null!;
        public virtual DbSet<ErpProcess> ErpProcesses { get; set; } = null!;
        public virtual DbSet<ErpProcessAttachment> ErpProcessAttachments { get; set; } = null!;
        public virtual DbSet<ErpProcessResource> ErpProcessResources { get; set; } = null!;
        public virtual DbSet<ErpProductConfigurator> ErpProductConfigurators { get; set; } = null!;
        public virtual DbSet<ErpProductConfiguratorItem> ErpProductConfiguratorItems { get; set; } = null!;
        public virtual DbSet<ErpProject> ErpProjects { get; set; } = null!;
        public virtual DbSet<ErpProjectAttachment> ErpProjectAttachments { get; set; } = null!;
        public virtual DbSet<ErpPublishDocument> ErpPublishDocuments { get; set; } = null!;
        public virtual DbSet<ErpPurchaseContract> ErpPurchaseContracts { get; set; } = null!;
        public virtual DbSet<ErpQualityControl> ErpQualityControls { get; set; } = null!;
        public virtual DbSet<ErpQualityControlAttachment> ErpQualityControlAttachments { get; set; } = null!;
        public virtual DbSet<ErpQualityControlProcessDetail> ErpQualityControlProcessDetails { get; set; } = null!;
        public virtual DbSet<ErpQualityControlReceipt> ErpQualityControlReceipts { get; set; } = null!;
        public virtual DbSet<ErpQualityControlReceiptAttachment> ErpQualityControlReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpQualityControlReceiptItem> ErpQualityControlReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpQualityControlTestCard> ErpQualityControlTestCards { get; set; } = null!;
        public virtual DbSet<ErpQualityControlTestDetail> ErpQualityControlTestDetails { get; set; } = null!;
        public virtual DbSet<ErpQualityType> ErpQualityTypes { get; set; } = null!;
        public virtual DbSet<ErpQuotationReceipt> ErpQuotationReceipts { get; set; } = null!;
        public virtual DbSet<ErpQuotationReceiptAttachment> ErpQuotationReceiptAttachments { get; set; } = null!;
        public virtual DbSet<ErpQuotationReceiptItem> ErpQuotationReceiptItems { get; set; } = null!;
        public virtual DbSet<ErpQuotationReceiptItemVariant> ErpQuotationReceiptItemVariants { get; set; } = null!;
        public virtual DbSet<ErpReceiptPaymentItem> ErpReceiptPaymentItems { get; set; } = null!;
        public virtual DbSet<ErpRecipe> ErpRecipes { get; set; } = null!;
        public virtual DbSet<ErpRecipeAttachment> ErpRecipeAttachments { get; set; } = null!;
        public virtual DbSet<ErpRecipeItem> ErpRecipeItems { get; set; } = null!;
        public virtual DbSet<ErpRecipeItemWastageWarehouse> ErpRecipeItemWastageWarehouses { get; set; } = null!;
        public virtual DbSet<ErpRecipeOpr> ErpRecipeOprs { get; set; } = null!;
        public virtual DbSet<ErpRecipeProgram> ErpRecipePrograms { get; set; } = null!;
        public virtual DbSet<ErpRecipeProgramItem> ErpRecipeProgramItems { get; set; } = null!;
        public virtual DbSet<ErpRecipeProgramType> ErpRecipeProgramTypes { get; set; } = null!;
        public virtual DbSet<ErpRefundCheque> ErpRefundCheques { get; set; } = null!;
        public virtual DbSet<ErpRegimeType> ErpRegimeTypes { get; set; } = null!;
        public virtual DbSet<ErpRequirement> ErpRequirements { get; set; } = null!;
        public virtual DbSet<ErpResource> ErpResources { get; set; } = null!;
        public virtual DbSet<ErpResourceAttribute> ErpResourceAttributes { get; set; } = null!;
        public virtual DbSet<ErpResourceAttributeSet> ErpResourceAttributeSets { get; set; } = null!;
        public virtual DbSet<ErpResourceAttributeSetItem> ErpResourceAttributeSetItems { get; set; } = null!;
        public virtual DbSet<ErpResourceInventory> ErpResourceInventories { get; set; } = null!;
        public virtual DbSet<ErpResourceOutOfUse> ErpResourceOutOfUses { get; set; } = null!;
        public virtual DbSet<ErpResourceOutOfUseReason> ErpResourceOutOfUseReasons { get; set; } = null!;
        public virtual DbSet<ErpReturnType> ErpReturnTypes { get; set; } = null!;
        public virtual DbSet<ErpRoute> ErpRoutes { get; set; } = null!;
        public virtual DbSet<ErpRouteItem> ErpRouteItems { get; set; } = null!;
        public virtual DbSet<ErpRoutePrecessor> ErpRoutePrecessors { get; set; } = null!;
        public virtual DbSet<ErpSalesContract> ErpSalesContracts { get; set; } = null!;
        public virtual DbSet<ErpSeason> ErpSeasons { get; set; } = null!;
        public virtual DbSet<ErpService> ErpServices { get; set; } = null!;
        public virtual DbSet<ErpServiceAttachment> ErpServiceAttachments { get; set; } = null!;
        public virtual DbSet<ErpServiceExplanation> ErpServiceExplanations { get; set; } = null!;
        public virtual DbSet<ErpServiceGroup> ErpServiceGroups { get; set; } = null!;
        public virtual DbSet<ErpServiceIa> ErpServiceIas { get; set; } = null!;
        public virtual DbSet<ErpServicePriceList> ErpServicePriceLists { get; set; } = null!;
        public virtual DbSet<ErpServiceTotal> ErpServiceTotals { get; set; } = null!;
        public virtual DbSet<ErpServiceUnitItemSize> ErpServiceUnitItemSizes { get; set; } = null!;
        public virtual DbSet<ErpServiceWorkplace> ErpServiceWorkplaces { get; set; } = null!;
        public virtual DbSet<ErpSizeSet> ErpSizeSets { get; set; } = null!;
        public virtual DbSet<ErpSizeSetItem> ErpSizeSetItems { get; set; } = null!;
        public virtual DbSet<ErpSizeSetItemVariant> ErpSizeSetItemVariants { get; set; } = null!;
        public virtual DbSet<ErpSizeSetParameter> ErpSizeSetParameters { get; set; } = null!;
        public virtual DbSet<ErpSubscription> ErpSubscriptions { get; set; } = null!;
        public virtual DbSet<ErpTask> ErpTasks { get; set; } = null!;
        public virtual DbSet<ErpTax> ErpTaxes { get; set; } = null!;
        public virtual DbSet<ErpTaxIa> ErpTaxIas { get; set; } = null!;
        public virtual DbSet<ErpTest> ErpTests { get; set; } = null!;
        public virtual DbSet<ErpTestItem> ErpTestItems { get; set; } = null!;
        public virtual DbSet<ErpTradingGroup> ErpTradingGroups { get; set; } = null!;
        public virtual DbSet<ErpTransporter> ErpTransporters { get; set; } = null!;
        public virtual DbSet<ErpVariantCard> ErpVariantCards { get; set; } = null!;
        public virtual DbSet<ErpVariantItem> ErpVariantItems { get; set; } = null!;
        public virtual DbSet<ErpVariantType> ErpVariantTypes { get; set; } = null!;
        public virtual DbSet<ErpVehicle> ErpVehicles { get; set; } = null!;
        public virtual DbSet<ErpVehicleAttachment> ErpVehicleAttachments { get; set; } = null!;
        public virtual DbSet<ErpWarehouse> ErpWarehouses { get; set; } = null!;
        public virtual DbSet<ErpWarehouseInventoryAttribute> ErpWarehouseInventoryAttributes { get; set; } = null!;
        public virtual DbSet<ErpWarehouseLocation> ErpWarehouseLocations { get; set; } = null!;
        public virtual DbSet<ErpWarehouseLocationTotal> ErpWarehouseLocationTotals { get; set; } = null!;
        public virtual DbSet<ErpWorkFlowCard> ErpWorkFlowCards { get; set; } = null!;
        public virtual DbSet<ErpWorkFlowCardItem> ErpWorkFlowCardItems { get; set; } = null!;
        public virtual DbSet<ErpWorkFlowMsgAddress> ErpWorkFlowMsgAddresses { get; set; } = null!;
        public virtual DbSet<ErpWorkOrder> ErpWorkOrders { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderAttachment> ErpWorkOrderAttachments { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderCostDistribution> ErpWorkOrderCostDistributions { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderExplanation> ErpWorkOrderExplanations { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderItem> ErpWorkOrderItems { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderItemProcess> ErpWorkOrderItemProcesses { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderItemReceipt> ErpWorkOrderItemReceipts { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderItemRecipe> ErpWorkOrderItemRecipes { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderItemVariant> ErpWorkOrderItemVariants { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderProduction> ErpWorkOrderProductions { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderProductionAttachment> ErpWorkOrderProductionAttachments { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderProductionEmployee> ErpWorkOrderProductionEmployees { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderProductionItem> ErpWorkOrderProductionItems { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderProductionVariant> ErpWorkOrderProductionVariants { get; set; } = null!;
        public virtual DbSet<ErpWorkOrderProgress> ErpWorkOrderProgresses { get; set; } = null!;
        public virtual DbSet<ErpWorkplace> ErpWorkplaces { get; set; } = null!;
        public virtual DbSet<HrmAddPaymentDeduction> HrmAddPaymentDeductions { get; set; } = null!;
        public virtual DbSet<HrmAdvertisement> HrmAdvertisements { get; set; } = null!;
        public virtual DbSet<HrmApplication> HrmApplications { get; set; } = null!;
        public virtual DbSet<HrmChecking> HrmCheckings { get; set; } = null!;
        public virtual DbSet<HrmCheckingAdd> HrmCheckingAdds { get; set; } = null!;
        public virtual DbSet<HrmCheckingHour> HrmCheckingHours { get; set; } = null!;
        public virtual DbSet<HrmCv> HrmCvs { get; set; } = null!;
        public virtual DbSet<HrmCvability> HrmCvabilities { get; set; } = null!;
        public virtual DbSet<HrmCvattachment> HrmCvattachments { get; set; } = null!;
        public virtual DbSet<HrmCvcomputerExperience> HrmCvcomputerExperiences { get; set; } = null!;
        public virtual DbSet<HrmCvcourse> HrmCvcourses { get; set; } = null!;
        public virtual DbSet<HrmCveducation> HrmCveducations { get; set; } = null!;
        public virtual DbSet<HrmCvexperience> HrmCvexperiences { get; set; } = null!;
        public virtual DbSet<HrmCvforeignLanguage> HrmCvforeignLanguages { get; set; } = null!;
        public virtual DbSet<HrmCvinterview> HrmCvinterviews { get; set; } = null!;
        public virtual DbSet<HrmCvreference> HrmCvreferences { get; set; } = null!;
        public virtual DbSet<HrmEmployeeAccrual> HrmEmployeeAccruals { get; set; } = null!;
        public virtual DbSet<HrmEmployeeDemand> HrmEmployeeDemands { get; set; } = null!;
        public virtual DbSet<HrmEmployeeLeave> HrmEmployeeLeaves { get; set; } = null!;
        public virtual DbSet<HrmExecutionProceeding> HrmExecutionProceedings { get; set; } = null!;
        public virtual DbSet<HrmLeaveEntitlement> HrmLeaveEntitlements { get; set; } = null!;
        public virtual DbSet<HrmLeaveGroup> HrmLeaveGroups { get; set; } = null!;
        public virtual DbSet<HrmLeaveGroupItem> HrmLeaveGroupItems { get; set; } = null!;
        public virtual DbSet<HrmLeaveType> HrmLeaveTypes { get; set; } = null!;
        public virtual DbSet<HrmPlacement> HrmPlacements { get; set; } = null!;
        public virtual DbSet<HrmPlacementItem> HrmPlacementItems { get; set; } = null!;
        public virtual DbSet<HrmPosition> HrmPositions { get; set; } = null!;
        public virtual DbSet<HrmSeverancePay> HrmSeverancePays { get; set; } = null!;
        public virtual DbSet<HrmTest> HrmTests { get; set; } = null!;
        public virtual DbSet<HrmTestEmployee> HrmTestEmployees { get; set; } = null!;
        public virtual DbSet<HrmTime> HrmTimes { get; set; } = null!;
        public virtual DbSet<LicenseActivation> LicenseActivations { get; set; } = null!;
        public virtual DbSet<LicenseActiveUser> LicenseActiveUsers { get; set; } = null!;
        public virtual DbSet<LogEinvoice> LogEinvoices { get; set; } = null!;
        public virtual DbSet<LogParameter> LogParameters { get; set; } = null!;
        public virtual DbSet<LogTransaction> LogTransactions { get; set; } = null!;
        public virtual DbSet<MetaBank> MetaBanks { get; set; } = null!;
        public virtual DbSet<MetaBankBranch> MetaBankBranches { get; set; } = null!;
        public virtual DbSet<MetaBlackList> MetaBlackLists { get; set; } = null!;
        public virtual DbSet<MetaCalendar> MetaCalendars { get; set; } = null!;
        public virtual DbSet<MetaCity> MetaCities { get; set; } = null!;
        public virtual DbSet<MetaCountry> MetaCountries { get; set; } = null!;
        public virtual DbSet<MetaCreditCard> MetaCreditCards { get; set; } = null!;
        public virtual DbSet<MetaCreditCardBinCode> MetaCreditCardBinCodes { get; set; } = null!;
        public virtual DbSet<MetaCreditCardGroup> MetaCreditCardGroups { get; set; } = null!;
        public virtual DbSet<MetaCreditCardGroupItem> MetaCreditCardGroupItems { get; set; } = null!;
        public virtual DbSet<MetaCtsp> MetaCtsps { get; set; } = null!;
        public virtual DbSet<MetaDataConstraint> MetaDataConstraints { get; set; } = null!;
        public virtual DbSet<MetaDataField> MetaDataFields { get; set; } = null!;
        public virtual DbSet<MetaDataFieldClass> MetaDataFieldClasses { get; set; } = null!;
        public virtual DbSet<MetaDataFieldValue> MetaDataFieldValues { get; set; } = null!;
        public virtual DbSet<MetaDbversion> MetaDbversions { get; set; } = null!;
        public virtual DbSet<MetaDistrict> MetaDistricts { get; set; } = null!;
        public virtual DbSet<MetaExternal> MetaExternals { get; set; } = null!;
        public virtual DbSet<MetaExternalXref> MetaExternalXrefs { get; set; } = null!;
        public virtual DbSet<MetaForex> MetaForices { get; set; } = null!;
        public virtual DbSet<MetaForexPrm> MetaForexPrms { get; set; } = null!;
        public virtual DbSet<MetaForexRate> MetaForexRates { get; set; } = null!;
        public virtual DbSet<MetaHotPoint> MetaHotPoints { get; set; } = null!;
        public virtual DbSet<MetaHrmAbsence> MetaHrmAbsences { get; set; } = null!;
        public virtual DbSet<MetaHrmHazardSegment> MetaHrmHazardSegments { get; set; } = null!;
        public virtual DbSet<MetaHrmProfession> MetaHrmProfessions { get; set; } = null!;
        public virtual DbSet<MetaHrmQuit> MetaHrmQuits { get; set; } = null!;
        public virtual DbSet<MetaHrmSsiPrm> MetaHrmSsiPrms { get; set; } = null!;
        public virtual DbSet<MetaHrmTaxSegment> MetaHrmTaxSegments { get; set; } = null!;
        public virtual DbSet<MetaInventory> MetaInventories { get; set; } = null!;
        public virtual DbSet<MetaLanguageDatum> MetaLanguageData { get; set; } = null!;
        public virtual DbSet<MetaLocation> MetaLocations { get; set; } = null!;
        public virtual DbSet<MetaMessage> MetaMessages { get; set; } = null!;
        public virtual DbSet<MetaMessageProvider> MetaMessageProviders { get; set; } = null!;
        public virtual DbSet<MetaMessageTemplate> MetaMessageTemplates { get; set; } = null!;
        public virtual DbSet<MetaPo> MetaPos { get; set; } = null!;
        public virtual DbSet<MetaPreset> MetaPresets { get; set; } = null!;
        public virtual DbSet<MetaPrinter> MetaPrinters { get; set; } = null!;
        public virtual DbSet<MetaReport> MetaReports { get; set; } = null!;
        public virtual DbSet<MetaResource> MetaResources { get; set; } = null!;
        public virtual DbSet<MetaSchedule> MetaSchedules { get; set; } = null!;
        public virtual DbSet<MetaScript> MetaScripts { get; set; } = null!;
        public virtual DbSet<MetaSector> MetaSectors { get; set; } = null!;
        public virtual DbSet<MetaState> MetaStates { get; set; } = null!;
        public virtual DbSet<MetaStreet> MetaStreets { get; set; } = null!;
        public virtual DbSet<MetaSymbol> MetaSymbols { get; set; } = null!;
        public virtual DbSet<MetaTaxOffice> MetaTaxOffices { get; set; } = null!;
        public virtual DbSet<MetaTown> MetaTowns { get; set; } = null!;
        public virtual DbSet<MetaUnitSet> MetaUnitSets { get; set; } = null!;
        public virtual DbSet<MetaUnitSetItem> MetaUnitSetItems { get; set; } = null!;
        public virtual DbSet<MetaUser> MetaUsers { get; set; } = null!;
        public virtual DbSet<MetaUserAccess> MetaUserAccesses { get; set; } = null!;
        public virtual DbSet<MetaUserAttachment> MetaUserAttachments { get; set; } = null!;
        public virtual DbSet<MetaUserCompany> MetaUserCompanies { get; set; } = null!;
        public virtual DbSet<MetaUserGroup> MetaUserGroups { get; set; } = null!;
        public virtual DbSet<MetaUserGroupItem> MetaUserGroupItems { get; set; } = null!;
        public virtual DbSet<MetaUserHistory> MetaUserHistories { get; set; } = null!;
        public virtual DbSet<MetaUserRight> MetaUserRights { get; set; } = null!;
        public virtual DbSet<MetaUserRole> MetaUserRoles { get; set; } = null!;
        public virtual DbSet<MetaWindowSetting> MetaWindowSettings { get; set; } = null!;
        public virtual DbSet<PosMenu> PosMenus { get; set; } = null!;
        public virtual DbSet<PosMenuItem> PosMenuItems { get; set; } = null!;
        public virtual DbSet<PosShift> PosShifts { get; set; } = null!;
        public virtual DbSet<Replication> Replications { get; set; } = null!;
        public virtual DbSet<RplTask> RplTasks { get; set; } = null!;
        public virtual DbSet<RplTaskItem> RplTaskItems { get; set; } = null!;
        public virtual DbSet<RplTaskTarget> RplTaskTargets { get; set; } = null!;
        public virtual DbSet<RplXref> RplXrefs { get; set; } = null!;
        public virtual DbSet<VwGlaccountBalance> VwGlaccountBalances { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Server=DESKTOP-TUSNPG5\\SQL22;Database=Basak;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CrmLead>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_Lead");

                entity.HasIndex(e => new { e.CompanyId, e.LeadCode }, "Crm_Lead_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.LeadName }, "Crm_Lead_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Crm_Lead_IX10");

                entity.HasIndex(e => e.MarketingActivityId, "Crm_Lead_IX2");

                entity.HasIndex(e => e.InventoryId, "Crm_Lead_IX3");

                entity.HasIndex(e => e.ServiceId, "Crm_Lead_IX4");

                entity.HasIndex(e => e.ResourceId, "Crm_Lead_IX5");

                entity.HasIndex(e => e.SectorId, "Crm_Lead_IX6");

                entity.HasIndex(e => e.CompetitorId, "Crm_Lead_IX7");

                entity.HasIndex(e => e.CompetitorProductId, "Crm_Lead_IX8");

                entity.HasIndex(e => e.StatusId, "Crm_Lead_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Blog).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.ExpectedDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedRevenue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Facebook).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LeadCode).HasMaxLength(25);

                entity.Property(e => e.LeadName).HasMaxLength(50);

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.TotalRevenue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Twitter).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WebAddress).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_Lead_Erp_Company");

                entity.HasOne(d => d.Competitor)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.CompetitorId)
                    .HasConstraintName("FK_Crm_Lead_Erp_Competitor");

                entity.HasOne(d => d.CompetitorProduct)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.CompetitorProductId)
                    .HasConstraintName("FK_Crm_Lead_Erp_CompetitorProduct");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Crm_Lead_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Crm_Lead_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Crm_Lead_Erp_Inventory");

                entity.HasOne(d => d.MarketingActivity)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.MarketingActivityId)
                    .HasConstraintName("FK_Crm_Lead_Crm_MarketingActivity");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Crm_Lead_Erp_Resource");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Crm_Lead_Meta_Sector");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Crm_Lead_Erp_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Crm_Lead_Crm_Status");

                entity.HasOne(d => d.TaxOffice)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.TaxOfficeId)
                    .HasConstraintName("FK_Crm_Lead_Meta_TaxOffice");
            });

            modelBuilder.Entity<CrmLeadAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_LeadAttachment");

                entity.HasIndex(e => e.LeadId, "Crm_LeadAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.CrmLeadAttachments)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_Crm_LeadAttachment_Crm_Lead");
            });

            modelBuilder.Entity<CrmLeadContact>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_LeadContact");

                entity.HasIndex(e => e.LeadId, "Crm_LeadContact_IX0");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Blog).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EMailAddress");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Facebook).HasMaxLength(100);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GsmNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LinkedIn).HasMaxLength(100);

                entity.Property(e => e.MariageDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.Sentez).HasMaxLength(50);

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(15);

                entity.Property(e => e.Twitter).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.CrmLeadContacts)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_Crm_LeadContact_Crm_Lead");
            });

            modelBuilder.Entity<CrmMarketingActivity>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_MarketingActivity");

                entity.HasIndex(e => new { e.CompanyId, e.MarketingTypeId, e.ActivityCode }, "Crm_MarketingActivity_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.SectorId, "Crm_MarketingActivity_IX1");

                entity.HasIndex(e => e.TerritoryId, "Crm_MarketingActivity_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ActivityCode).HasMaxLength(25);

                entity.Property(e => e.BudgetAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.QuotedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QuotedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BudgetForex)
                    .WithMany(p => p.CrmMarketingActivityBudgetForices)
                    .HasForeignKey(d => d.BudgetForexId)
                    .HasConstraintName("FK_Crm_MarketingActivity_Meta_Forex1");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmMarketingActivities)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_MarketingActivity_Erp_Company");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.CrmMarketingActivityForices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Crm_MarketingActivity_Meta_Forex");

                entity.HasOne(d => d.MarketingType)
                    .WithMany(p => p.CrmMarketingActivities)
                    .HasForeignKey(d => d.MarketingTypeId)
                    .HasConstraintName("FK_Crm_MarketingActivity_Crm_MarketingType");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.CrmMarketingActivities)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Crm_MarketingActivity_Meta_Sector");

                entity.HasOne(d => d.Territory)
                    .WithMany(p => p.CrmMarketingActivities)
                    .HasForeignKey(d => d.TerritoryId)
                    .HasConstraintName("FK_Crm_MarketingActivity_Crm_Territory");
            });

            modelBuilder.Entity<CrmMarketingActivityAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_MarketingActivityAttachment");

                entity.HasIndex(e => e.MarketingActivityId, "Crm_MarketingActivityAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.MarketingActivity)
                    .WithMany(p => p.CrmMarketingActivityAttachments)
                    .HasForeignKey(d => d.MarketingActivityId)
                    .HasConstraintName("FK_Crm_MarketingActivityAttachment_Crm_MarketingActivity");
            });

            modelBuilder.Entity<CrmMarketingActivityProduct>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_MarketingActivityProduct");

                entity.HasIndex(e => e.MarketingActivityId, "Crm_MarketingActivityProduct_IX0");

                entity.HasIndex(e => e.InventoryId, "Crm_MarketingActivityProduct_IX1");

                entity.HasIndex(e => e.ServiceId, "Crm_MarketingActivityProduct_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.QuotedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QuotedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.CrmMarketingActivityProducts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Crm_MarketingActivityProduct_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.CrmMarketingActivityProducts)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Crm_MarketingActivityProduct_Erp_Inventory");

                entity.HasOne(d => d.MarketingActivity)
                    .WithMany(p => p.CrmMarketingActivityProducts)
                    .HasForeignKey(d => d.MarketingActivityId)
                    .HasConstraintName("FK_Crm_MarketingActivityProduct_Crm_MarketingActivity");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.CrmMarketingActivityProducts)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Crm_MarketingActivityProduct_Erp_Service");
            });

            modelBuilder.Entity<CrmMarketingActivityResource>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_MarketingActivityResource");

                entity.HasIndex(e => e.MarketingActivityId, "Crm_MarketingActivityResource_IX0");

                entity.HasIndex(e => e.ResourceId, "Crm_MarketingActivityResource_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.QuotedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QuotedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.CrmMarketingActivityResources)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Crm_MarketingActivityResource_Meta_Forex");

                entity.HasOne(d => d.MarketingActivity)
                    .WithMany(p => p.CrmMarketingActivityResources)
                    .HasForeignKey(d => d.MarketingActivityId)
                    .HasConstraintName("FK_Crm_MarketingActivityResource_Crm_MarketingActivity");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.CrmMarketingActivityResources)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Crm_MarketingActivityResource_Erp_Resource");
            });

            modelBuilder.Entity<CrmMarketingType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_MarketingType");

                entity.HasIndex(e => new { e.CompanyId, e.TypeName }, "Crm_MarketingType_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmMarketingTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_MarketingType_Erp_Company");
            });

            modelBuilder.Entity<CrmStatus>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_Status");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StatusName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmStatuses)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_Status_Erp_Company");
            });

            modelBuilder.Entity<CrmTerritory>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_Territory");

                entity.HasIndex(e => new { e.CompanyId, e.TerritoryName }, "Crm_Territory_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TerritoryName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Venue).HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.CrmTerritories)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Crm_Territory_Meta_City");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmTerritories)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_Territory_Erp_Company");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CrmTerritories)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Crm_Territory_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.CrmTerritories)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Crm_Territory_Meta_District");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.CrmTerritories)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Crm_Territory_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.CrmTerritories)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Crm_Territory_Meta_Town");
            });

            modelBuilder.Entity<CrmTransactionFlow>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionFlow");

                entity.HasIndex(e => new { e.CompanyId, e.FlowCode }, "Crm_TransactionFlow_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.DepartmentId, "Crm_TransactionFlow_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FlowCode).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmTransactionFlows)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_TransactionFlow_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.CrmTransactionFlows)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Crm_TransactionFlow_Erp_Department");
            });

            modelBuilder.Entity<CrmTransactionFlowItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionFlowItem");

                entity.HasIndex(e => e.FlowId, "Crm_TransactionFlowItem_IX0");

                entity.HasIndex(e => e.PrevTranTypeId, "Crm_TransactionFlowItem_IX1");

                entity.HasIndex(e => e.NextFlowId, "Crm_TransactionFlowItem_IX2");

                entity.HasIndex(e => e.TranTypeId, "Crm_TransactionFlowItem_IX3");

                entity.HasIndex(e => e.PrevFlowId, "Crm_TransactionFlowItem_IX4");

                entity.HasIndex(e => e.ServiceCardId, "Crm_TransactionFlowItem_IX5");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemDay).HasMaxLength(15);

                entity.Property(e => e.ItemMonth).HasMaxLength(15);

                entity.Property(e => e.ItemYear).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Flow)
                    .WithMany(p => p.CrmTransactionFlowItemFlows)
                    .HasForeignKey(d => d.FlowId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_TransactionFlow");

                entity.HasOne(d => d.NextFlow)
                    .WithMany(p => p.CrmTransactionFlowItemNextFlows)
                    .HasForeignKey(d => d.NextFlowId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_TransactionFlow1_DBOnly");

                entity.HasOne(d => d.PrevFlow)
                    .WithMany(p => p.CrmTransactionFlowItemPrevFlows)
                    .HasForeignKey(d => d.PrevFlowId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_TransactionFlow2_DBOnly");

                entity.HasOne(d => d.PrevTranType)
                    .WithMany(p => p.CrmTransactionFlowItemPrevTranTypes)
                    .HasForeignKey(d => d.PrevTranTypeId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_TransactionType");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.CrmTransactionFlowItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Erp_Service");

                entity.HasOne(d => d.StartingFlow)
                    .WithMany(p => p.CrmTransactionFlowItemStartingFlows)
                    .HasForeignKey(d => d.StartingFlowId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_TransactionFlow3_DBOnly");

                entity.HasOne(d => d.TranType)
                    .WithMany(p => p.CrmTransactionFlowItemTranTypes)
                    .HasForeignKey(d => d.TranTypeId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_TransactionType1");

                entity.HasOne(d => d.WorkFlowState)
                    .WithMany(p => p.CrmTransactionFlowItems)
                    .HasForeignKey(d => d.WorkFlowStateId)
                    .HasConstraintName("FK_Crm_TransactionFlowItem_Crm_WorkFlowState");
            });

            modelBuilder.Entity<CrmTransactionFlowResource>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionFlowResource");

                entity.HasIndex(e => e.FlowId, "Crm_TransactionFlowResource_IX0");

                entity.HasIndex(e => e.ResourceId, "Crm_TransactionFlowResource_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Flow)
                    .WithMany(p => p.CrmTransactionFlowResources)
                    .HasForeignKey(d => d.FlowId)
                    .HasConstraintName("FK_Crm_TransactionFlowResource_Crm_TransactionFlow");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.CrmTransactionFlowResources)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Crm_TransactionFlowResource_Erp_Resource");
            });

            modelBuilder.Entity<CrmTransactionFlowResult>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionFlowResult");

                entity.HasIndex(e => new { e.FlowId, e.ResultCode }, "Crm_TransactionFlowResult_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ResultCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Flow)
                    .WithMany(p => p.CrmTransactionFlowResults)
                    .HasForeignKey(d => d.FlowId)
                    .HasConstraintName("FK_Crm_TransactionFlowResult_Crm_TransactionFlow");
            });

            modelBuilder.Entity<CrmTransactionType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionType");

                entity.HasIndex(e => new { e.CompanyId, e.ActivityName }, "Crm_TransactionType_IX0");

                entity.HasIndex(e => e.ParentId, "Crm_TransactionType_IX1");

                entity.HasIndex(e => e.DepartmentId, "Crm_TransactionType_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ActivityName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmTransactionTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_TransactionType_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.CrmTransactionTypes)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Crm_TransactionType_Erp_Department");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Crm_TransactionType_Crm_TransactionType_DBOnly");
            });

            modelBuilder.Entity<CrmTransactionTypeResourceAttribute>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionTypeResourceAttribute");

                entity.HasIndex(e => e.TransactionTypeId, "Crm_TransactionTypeResourceAttribute_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.CrmTransactionTypeResourceAttributes)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Crm_TransactionTypeResourceAttribute_Erp_ResourceAttributeSet");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.CrmTransactionTypeResourceAttributes)
                    .HasForeignKey(d => d.TransactionTypeId)
                    .HasConstraintName("FK_Crm_TransactionTypeResourceAttribute_Crm_TransactionType");
            });

            modelBuilder.Entity<CrmTransactionTypeResult>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_TransactionTypeResult");

                entity.HasIndex(e => e.ResultCode, "Crm_TransactionTypeResult_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.TranTypeId, "Crm_TransactionTypeResult_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ResultCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.TranType)
                    .WithMany(p => p.CrmTransactionTypeResults)
                    .HasForeignKey(d => d.TranTypeId)
                    .HasConstraintName("FK_Crm_TransactionTypeResult_Crm_TransactionType");
            });

            modelBuilder.Entity<CrmWorkFlowState>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Crm_WorkFlowState");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StateCode).HasMaxLength(25);

                entity.Property(e => e.StateName).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.CrmWorkFlowStates)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Crm_WorkFlowState_Erp_Company");
            });

            modelBuilder.Entity<ErpAccessCode>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_AccessCode");

                entity.ToTable("Erp_AccessCode");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpAccessCodes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_AccessCode_Erp_Company");
            });

            modelBuilder.Entity<ErpActualCost>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ActualCost");

                entity.ToTable("Erp_ActualCost");

                entity.HasIndex(e => new { e.CompanyId, e.ActualCostNo }, "Erp_ActualCost_IX1")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.Year, e.Month }, "Erp_ActualCost_IX2");

                entity.HasIndex(e => e.InventoryId, "Erp_ActualCost_IX3");

                entity.HasIndex(e => e.UnitId, "Erp_ActualCost_IX4");

                entity.HasIndex(e => e.ForexId, "Erp_ActualCost_IX5");

                entity.HasIndex(e => e.WorkOrderId, "Erp_ActualCost_IX6");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_ActualCost_IX7");

                entity.HasIndex(e => e.GlreceiptId, "Erp_ActualCost_IX8");

                entity.Property(e => e.ActualCostNo).HasMaxLength(25);

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.CommissionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionForex2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostFinishDate).HasColumnType("datetime");

                entity.Property(e => e.CostStartDate).HasColumnType("datetime");

                entity.Property(e => e.CutQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CuttingQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Forex2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex2UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InitialAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InitialForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InitialForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InitialQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InitialUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LeftoverGoodsPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LostQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OverheadCostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OverheadCostForex2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OverheadCostForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OverheadCostRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ParentWorkOrderNo).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RemainingQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnForex2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnForex2UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesForex2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesForex2UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnForex2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnForex2UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SewingQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalCost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalForex2Cost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalForex2Income).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalForex2Profit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalForexCost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalForexIncome).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalForexProfit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalProfit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalUnitForex2Profit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalUnitForexProfit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalUnitProfit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VersionType).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ActualCost_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_GLReceipt");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_Inventory");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_ActualCost_DBOnly");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_ActualCost_Meta_UnitSetItem");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpActualCosts)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_ActualCost_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpAddress>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Address");

                entity.ToTable("Erp_Address");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Address_IX0");

                entity.HasIndex(e => e.GuarantorId, "Erp_Address_IX1");

                entity.HasIndex(e => e.LeadId, "Erp_Address_IX2");

                entity.HasIndex(e => e.GuestId, "Erp_Address_IX3");

                entity.HasIndex(e => e.WarehouseId, "Erp_Address_IX4");

                entity.HasIndex(e => e.UserId, "Erp_Address_IX5");

                entity.Property(e => e.AddressCode).HasMaxLength(25);

                entity.Property(e => e.Aveneu).HasMaxLength(50);

                entity.Property(e => e.Boulevard).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Direction1).HasMaxLength(50);

                entity.Property(e => e.Direction2).HasMaxLength(50);

                entity.Property(e => e.Direction3).HasMaxLength(50);

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.ExteriorDoor).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InteriorDoor).HasMaxLength(50);

                entity.Property(e => e.Line1).HasMaxLength(50);

                entity.Property(e => e.Line2).HasMaxLength(50);

                entity.Property(e => e.Line3).HasMaxLength(50);

                entity.Property(e => e.Neighborhood).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.Street).HasMaxLength(50);

                entity.Property(e => e.TimeZone).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Village).HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_Address_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Address_Meta_Country");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Address_Erp_CurrentAccount");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_Address_Meta_District");

                entity.HasOne(d => d.Guarantor)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.GuarantorId)
                    .HasConstraintName("FK_Erp_Address_Erp_Guarantor");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_Erp_Address_Crm_Lead");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.SellerId)
                    .HasConstraintName("FK_Erp_Address_Erp_Employee");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_Address_Meta_State");

                entity.HasOne(d => d.StreetNavigation)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_Address_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_Address_Meta_Town");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_Address_Meta_User");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Address_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpAddresses)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Address_Erp_Workplace");
            });

            modelBuilder.Entity<ErpAddressTelephoneFax>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_AddressTelephoneFax");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TelephoneFaxNumber).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpAddressTelephoneFaxes)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_AddressTelephoneFax_Erp_Address");
            });

            modelBuilder.Entity<ErpApprovedTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ApprovedTransaction");

                entity.HasIndex(e => new { e.Boname, e.SourceId }, "Erp_ApprovedTransaction_IX0");

                entity.HasIndex(e => new { e.UserId, e.IsApproved, e.IsDeleted }, "Erp_ApprovedTransaction_IX1");

                entity.HasIndex(e => new { e.IsApproved, e.IsDeleted }, "Erp_ApprovedTransaction_IX2");

                entity.HasIndex(e => new { e.SourceId, e.Boname, e.IsApproved }, "Erp_ApprovedTransaction_IX3");

                entity.HasIndex(e => e.Priority, "Erp_ApprovedTransaction_IX4");

                entity.Property(e => e.Boname)
                    .HasMaxLength(50)
                    .HasColumnName("BOName");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpApprovedTransactions)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_ApprovedTransaction_Meta_User");
            });

            modelBuilder.Entity<ErpAsserviceCurrentAccountDetail>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ASServiceCurrentAccountDetail");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_ASServiceCurrentAccountDetail_IX0");

                entity.HasIndex(e => e.EmployeeId, "Erp_ASServiceCurrentAccountDetail_IX1");

                entity.HasIndex(e => e.CountryId, "Erp_ASServiceCurrentAccountDetail_IX2");

                entity.HasIndex(e => e.CityId, "Erp_ASServiceCurrentAccountDetail_IX3");

                entity.HasIndex(e => e.DistrictId, "Erp_ASServiceCurrentAccountDetail_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(4000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpAsserviceCurrentAccountDetails)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_ASServiceCurrentAccountDetail_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpAsserviceCurrentAccountDetails)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_ASServiceCurrentAccountDetail_Meta_Country");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpAsserviceCurrentAccountDetails)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ASServiceCurrentAccountDetail_Erp_CurrentAccount");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpAsserviceCurrentAccountDetails)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_ASServiceCurrentAccountDetail_Meta_District");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpAsserviceCurrentAccountDetails)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_ASServiceCurrentAccountDetail_Erp_Employee");
            });

            modelBuilder.Entity<ErpAsserviceFaulty>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ASServiceFaulty");

                entity.HasIndex(e => new { e.CompanyId, e.FaultyCode }, "Erp_ASServiceFaulty_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FaultyCode).HasMaxLength(25);

                entity.Property(e => e.FaultyName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RepairTime).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpAsserviceFaulties)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ASServiceFaulty_Erp_Company");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpAsserviceFaulties)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ASServiceFaulty_Erp_Inventory");
            });

            modelBuilder.Entity<ErpAsserviceFaultyItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ASServiceFaultyItem");

                entity.HasIndex(e => e.AsserviceFaultyId, "Erp_ASServiceFaultyItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_ASServiceFaultyItem_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_ASServiceFaultyItem_IX2");

                entity.HasIndex(e => e.ForexId, "Erp_ASServiceFaultyItem_IX3");

                entity.Property(e => e.AsserviceFaultyId).HasColumnName("ASServiceFaultyId");

                entity.Property(e => e.AsserviceServiceType).HasColumnName("ASServiceServiceType");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RepairTime).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AsserviceFaulty)
                    .WithMany(p => p.ErpAsserviceFaultyItems)
                    .HasForeignKey(d => d.AsserviceFaultyId)
                    .HasConstraintName("FK_Erp_ASServiceFaultyItem_Erp_ASServiceFaulty");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpAsserviceFaultyItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ASServiceFaultyItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpAsserviceFaultyItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ASServiceFaultyItem_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpAsserviceFaultyItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ASServiceFaultyItem_Erp_Inventory");
            });

            modelBuilder.Entity<ErpBank>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Bank");

                entity.HasIndex(e => new { e.CompanyId, e.BankCode }, "Erp_Bank_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.MetaBankId, "Erp_Bank_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.BankCode).HasMaxLength(25);

                entity.Property(e => e.BankName).HasMaxLength(50);

                entity.Property(e => e.BranchCode).HasMaxLength(25);

                entity.Property(e => e.BranchName).HasMaxLength(50);

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Line1).HasMaxLength(50);

                entity.Property(e => e.Line2).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SwiftCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_Bank_Meta_City");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Bank_Erp_Company");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Bank_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_Bank_Meta_District");

                entity.HasOne(d => d.MetaBank)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.MetaBankId)
                    .HasConstraintName("FK_Erp_Bank_Meta_Bank");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_Bank_Meta_State");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_Bank_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_Bank_Meta_Town");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBanks)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Bank_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBankAccount>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankAccount");

                entity.HasIndex(e => new { e.BankId, e.AccountCode }, "Erp_BankAccount_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.BankId, "Erp_BankAccount_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AccountCode).HasMaxLength(25);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.BondCreditLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BondCreditRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.BondInterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ChequeCreditLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ChequeCreditRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ChequeInterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FundRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.IbanNo).HasMaxLength(50);

                entity.Property(e => e.InsecureCreditLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsecureInterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.LetterOfGuaranteeLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WithholdingRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.ErpBankAccounts)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_Erp_BankAccount_Erp_Bank");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankAccounts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankAccount_Meta_Forex");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBankAccounts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_BankAccount_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBankAccountIa>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankAccountIA");

                entity.HasIndex(e => e.BankAccountId, "Erp_BankAccountIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_BankAccountIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_BankAccountIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpBankAccountIas)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_BankAccountIA_Erp_BankAccount");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpBankAccountIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_BankAccountIA_Erp_CostCenter");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpBankAccountIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_BankAccountIA_Erp_GLAccount");
            });

            modelBuilder.Entity<ErpBankAccountTotal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankAccountTotal");

                entity.HasIndex(e => e.BankAccountId, "Erp_BankAccountTotal_IX0");

                entity.HasIndex(e => new { e.BankAccountId, e.TotalYear, e.TotalMonth }, "Erp_BankAccountTotal_IX1");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpBankAccountTotals)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_BankAccountTotal_Erp_BankAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankAccountTotals)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankAccountTotal_Meta_Forex");
            });

            modelBuilder.Entity<ErpBankAccountWorkplace>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_BankAccountWorkplace");

                entity.ToTable("Erp_BankAccountWorkplace");

                entity.HasIndex(e => e.BankAccountId, "Erp_BankAccountWorkplace_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpBankAccountWorkplaces)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_BankAccountWorkplace_Erp_BankAccount");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBankAccountWorkplaces)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_BankAccountWorkplace_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBankCredit>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankCredit");

                entity.HasIndex(e => new { e.CompanyId, e.CreditYear, e.CreditUpType, e.CreditType, e.CreditNo }, "Erp_BankCredit_IX0")
                    .IsUnique();

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.BankReferenceNo).HasMaxLength(25);

                entity.Property(e => e.BeneficiaryContanct).HasMaxLength(50);

                entity.Property(e => e.Bsmvtotal)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("BSMVTotal");

                entity.Property(e => e.CalculateBsmv).HasColumnName("CalculateBSMV");

                entity.Property(e => e.CommissionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommitFinishDate).HasColumnType("datetime");

                entity.Property(e => e.CommitStartDate).HasColumnType("datetime");

                entity.Property(e => e.CreditDate).HasColumnType("datetime");

                entity.Property(e => e.CreditFinishDate).HasColumnType("datetime");

                entity.Property(e => e.CreditGlaccountId).HasColumnName("CreditGLAccountId");

                entity.Property(e => e.CreditNo).HasMaxLength(25);

                entity.Property(e => e.CreditReferenceNo).HasMaxLength(25);

                entity.Property(e => e.CreditStartDate).HasColumnType("datetime");

                entity.Property(e => e.CreditTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CreditTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DebitGlaccountId).HasColumnName("DebitGLAccountId");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GlreceiptId1).HasColumnName("GLReceiptId1");

                entity.Property(e => e.GuaranteesGroup).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterestTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Interlocutor).HasMaxLength(1000);

                entity.Property(e => e.IssuingContanct).HasMaxLength(50);

                entity.Property(e => e.Kkdftotal)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("KKDFTotal");

                entity.Property(e => e.Lclocation)
                    .HasMaxLength(50)
                    .HasColumnName("LCLocation");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ManufacturingPlace).HasMaxLength(100);

                entity.Property(e => e.OperationType).HasMaxLength(50);

                entity.Property(e => e.PaymentCardId).HasMaxLength(50);

                entity.Property(e => e.TermMonth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ToleransTotal).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AdvisingBankAccount)
                    .WithMany(p => p.ErpBankCreditAdvisingBankAccounts)
                    .HasForeignKey(d => d.AdvisingBankAccountId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_BankAdvising");

                entity.HasOne(d => d.BankInterestRate)
                    .WithMany(p => p.ErpBankCreditBankInterestRates)
                    .HasForeignKey(d => d.BankInterestRateId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_InterestRate");

                entity.HasOne(d => d.BeneficiaryBank)
                    .WithMany(p => p.ErpBankCreditBeneficiaryBanks)
                    .HasForeignKey(d => d.BeneficiaryBankId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_BankAccount1");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_Company");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_Contract");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_CostCenter");

                entity.HasOne(d => d.CreditGlaccount)
                    .WithMany(p => p.ErpBankCreditCreditGlaccounts)
                    .HasForeignKey(d => d.CreditGlaccountId);

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_CurrentAccount");

                entity.HasOne(d => d.DebitGlaccount)
                    .WithMany(p => p.ErpBankCreditDebitGlaccounts)
                    .HasForeignKey(d => d.DebitGlaccountId);

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankCredit_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpBankCreditGlreceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_GLReceipt");

                entity.HasOne(d => d.GlreceiptId1Navigation)
                    .WithMany(p => p.ErpBankCreditGlreceiptId1Navigations)
                    .HasForeignKey(d => d.GlreceiptId1)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_GLReceipt1");

                entity.HasOne(d => d.IssuingBank)
                    .WithMany(p => p.ErpBankCreditIssuingBanks)
                    .HasForeignKey(d => d.IssuingBankId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_BankAccount");

                entity.HasOne(d => d.LiborInterestRate)
                    .WithMany(p => p.ErpBankCreditLiborInterestRates)
                    .HasForeignKey(d => d.LiborInterestRateId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_InterestRateLibor");

                entity.HasOne(d => d.ProformaInvoice)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.ProformaInvoiceId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_Invoice");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_Project");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBankCredits)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_BankCredit_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBankCreditAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankCreditAttachment");

                entity.HasIndex(e => e.BankCreditId, "Erp_BankCreditAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankCredit)
                    .WithMany(p => p.ErpBankCreditAttachments)
                    .HasForeignKey(d => d.BankCreditId)
                    .HasConstraintName("FK_Erp_BankCreditAttachment_Erp_BankCredit");
            });

            modelBuilder.Entity<ErpBankCreditExpoClosing>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankCreditExpoClosing");

                entity.HasIndex(e => e.BankCreditItemId, "Erp_BankCreditExpoClosing_IX0");

                entity.HasIndex(e => e.ExpoId, "Erp_BankCreditExpoClosing_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankCredit)
                    .WithMany(p => p.ErpBankCreditExpoClosings)
                    .HasForeignKey(d => d.BankCreditId)
                    .HasConstraintName("FK_Erp_BankCreditExpoClosing_Erp_BankCredit");

                entity.HasOne(d => d.BankCreditItem)
                    .WithMany(p => p.ErpBankCreditExpoClosings)
                    .HasForeignKey(d => d.BankCreditItemId)
                    .HasConstraintName("FK_Erp_BankCreditExpoClosing_Erp_BankCreditItem");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpBankCreditExpoClosings)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_BankCreditExpoClosing_Erp_Expo");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankCreditExpoClosings)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankCreditExpoClosing_Meta_Forex");
            });

            modelBuilder.Entity<ErpBankCreditItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankCreditItem");

                entity.HasIndex(e => e.ExpoId, "Erp_BankCreditItem_Expo_IX1");

                entity.HasIndex(e => e.BankCreditId, "Erp_BankCreditItem_IX0");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Bsmvamount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("BSMVAmount");

                entity.Property(e => e.Bsmvrate)
                    .HasColumnType("decimal(11, 8)")
                    .HasColumnName("BSMVRate");

                entity.Property(e => e.CommissionRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CommissionTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InstalmentDate).HasColumnType("datetime");

                entity.Property(e => e.InstalmentTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InstalmentTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InterestDate).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InterestTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InterestTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InventoryCode).HasMaxLength(25);

                entity.Property(e => e.InventoryName).HasMaxLength(50);

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Kkdfamount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("KKDFAmount");

                entity.Property(e => e.Kkdfrate)
                    .HasColumnType("decimal(11, 8)")
                    .HasColumnName("KKDFRate");

                entity.Property(e => e.LeasingVatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LeasingVatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocalCommissionTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocalInterestTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocalItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ManufacturingPlace).HasMaxLength(100);

                entity.Property(e => e.OperationDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankCredit)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.BankCreditId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_BankCredit");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_Expo");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Meta_Forex");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_OrderReceipt");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_OrderReceiptItem");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpBankCreditItems)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_BankCreditItem_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpBankPo>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_VirtualPos");

                entity.ToTable("Erp_BankPos");

                entity.HasIndex(e => e.PosCode, "Erp_BankPos_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.BankAccountId, "Erp_BankPos_IX1");

                entity.Property(e => e.ApiPassword).HasMaxLength(32);

                entity.Property(e => e.ApiUser).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PosCode).HasMaxLength(50);

                entity.Property(e => e.PosName).HasMaxLength(50);

                entity.Property(e => e.ThreeDgateUrl)
                    .HasMaxLength(100)
                    .HasColumnName("ThreeDGateUrl");

                entity.Property(e => e.ThreeDmodel)
                    .HasMaxLength(15)
                    .HasColumnName("ThreeDModel");

                entity.Property(e => e.ThreeDstoreKey)
                    .HasMaxLength(15)
                    .HasColumnName("ThreeDStoreKey");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpBankPos)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_BankPos_Erp_BankAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankPos)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankPos_Meta_Forex");
            });

            modelBuilder.Entity<ErpBankPosTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankPosTransaction");

                entity.HasIndex(e => e.ItemId, "Erp_BankPosTransaction_IX0");

                entity.HasIndex(e => e.BankPosId, "Erp_BankPosTransaction_IX1");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankPos)
                    .WithMany(p => p.ErpBankPosTransactions)
                    .HasForeignKey(d => d.BankPosId)
                    .HasConstraintName("FK_Erp_BankPosTransaction_Erp_BankPos");
            });

            modelBuilder.Entity<ErpBankReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_BankReceipt");

                entity.ToTable("Erp_BankReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_BankReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_BankReceipt_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_BankReceipt_IX2");

                entity.HasIndex(e => e.CashId, "Erp_BankReceipt_IX3");

                entity.HasIndex(e => e.GlreceiptId, "Erp_BankReceipt_IX4");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_CurrentAccountReceipt");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankReceipt_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.ReceiptPaymentItem)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.ReceiptPaymentItemId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_ReceiptPaymentItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBankReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_BankReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBankReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BankReceiptAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankReceipt)
                    .WithMany(p => p.ErpBankReceiptAttachments)
                    .HasForeignKey(d => d.BankReceiptId)
                    .HasConstraintName("FK_Erp_BankReceiptAttachment_Erp_BankReceipt");
            });

            modelBuilder.Entity<ErpBankReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_BankReceiptItem");

                entity.ToTable("Erp_BankReceiptItem");

                entity.HasIndex(e => e.ExpoId, "Erp_BankReceiptItem_Expo_IX1");

                entity.HasIndex(e => e.BankReceiptId, "Erp_BankReceiptItem_IX0");

                entity.HasIndex(e => e.BankAccountId, "Erp_BankReceiptItem_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_BankReceiptItem_IX2");

                entity.HasIndex(e => e.GlaccountId, "Erp_BankReceiptItem_IX3");

                entity.HasIndex(e => e.CostCenterId, "Erp_BankReceiptItem_IX4");

                entity.HasIndex(e => e.ProjectId, "Erp_BankReceiptItem_IX5");

                entity.HasIndex(e => e.BankTransferReceiptItemId, "Erp_BankReceiptItem_IX7");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_BankReceiptItem_IX8");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CurrentAccountAccountNo).HasMaxLength(50);

                entity.Property(e => e.CurrentAccountBank).HasMaxLength(50);

                entity.Property(e => e.CurrentAccountBankBranch).HasMaxLength(50);

                entity.Property(e => e.CurrentAccountBankIbanNo).HasMaxLength(50);

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.Expense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexExpense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TermInterestForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermInterestRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermWithholdingForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermWithholdingRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_BankAccount");

                entity.HasOne(d => d.BankCreditItem)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.BankCreditItemId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_BankCreditItem");

                entity.HasOne(d => d.BankReceipt)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.BankReceiptId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_BankReceipt");

                entity.HasOne(d => d.BankTransferReceiptItem)
                    .WithMany(p => p.InverseBankTransferReceiptItem)
                    .HasForeignKey(d => d.BankTransferReceiptItemId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_BankReceiptItem1_DBOnly");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceiptItem)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountReceiptItemId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_CurrentAccountReceiptItem_DBOnly");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_Employee");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_Expo");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Meta_Forex");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_GLAccount");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_PaymentCard");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_Project");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpBankReceiptItems)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_BankReceiptItem_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpBankWorkplace>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_BankWorkplace");

                entity.ToTable("Erp_BankWorkplace");

                entity.HasIndex(e => e.BankId, "Erp_BankWorkplace_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.ErpBankWorkplaces)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_Erp_BankWorkplace_Erp_Bank");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBankWorkplaces)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_BankWorkplace_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBox>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Box");

                entity.HasIndex(e => new { e.CompanyId, e.BoxType, e.BoxCode }, "Erp_Box_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Box_IX1");

                entity.HasIndex(e => e.InventoryReceiptShipmentId, "Erp_Box_IX2");

                entity.HasIndex(e => e.ConsumptionReceiptItemId, "Erp_Box_IX3");

                entity.HasIndex(e => e.QualityTypeId, "Erp_Box_IX4");

                entity.HasIndex(e => e.WorkOrderId, "Erp_Box_IX5");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_Box_IX6");

                entity.HasIndex(e => e.WarehouseLocationId, "Erp_Box_IX7");

                entity.HasIndex(e => e.EmployeeId, "Erp_Box_IX8");

                entity.HasIndex(e => e.OrderReceiptId, "Erp_Box_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.BoxCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PrintedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Box_Erp_Company");

                entity.HasOne(d => d.ConsumptionReceiptItem)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.ConsumptionReceiptItemId)
                    .HasConstraintName("FK_Erp_Box_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Box_Erp_CurrentAccount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Box_Erp_Employee");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_Box_Erp_InventoryReceipt");

                entity.HasOne(d => d.InventoryReceiptShipment)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.InventoryReceiptShipmentId)
                    .HasConstraintName("FK_Erp_Box_Erp_InventoryReceiptShipment");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_Box_Erp_OrderReceipt");

                entity.HasOne(d => d.QualityType)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.QualityTypeId)
                    .HasConstraintName("FK_Erp_Box_Erp_QualityType");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_Box_Erp_WarehouseLocation");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_Box_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpBoxes)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_Box_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpBoxItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BoxItem");

                entity.HasIndex(e => e.BoxId, "Erp_BoxItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_BoxItem_IX1");

                entity.HasIndex(e => e.SerialCardId, "Erp_BoxItem_IX2");

                entity.HasIndex(e => e.InventoryReceiptShipmentId, "Erp_BoxItem_IX3");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_BoxItem_IX4");

                entity.HasIndex(e => e.InBoxId, "Erp_BoxItem_IX5");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.ErpBoxItemBoxes)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_Box");

                entity.HasOne(d => d.InBox)
                    .WithMany(p => p.ErpBoxItemInBoxes)
                    .HasForeignKey(d => d.InBoxId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_Box1_DBOnly");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpBoxItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpBoxItems)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.InventoryReceiptShipment)
                    .WithMany(p => p.ErpBoxItems)
                    .HasForeignKey(d => d.InventoryReceiptShipmentId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_InventoryReceiptShipment");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpBoxItems)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_OrderReceiptItem");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpBoxItems)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_BoxItem_Erp_InventorySerialCard");
            });

            modelBuilder.Entity<ErpBoxItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BoxItemVariant");

                entity.HasIndex(e => e.BoxItemId, "Erp_BoxItemVariant_IX0");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_BoxItemVariant_IX1");

                entity.HasIndex(e => e.SerialCardId, "Erp_BoxItemVariant_IX2");

                entity.HasIndex(e => e.InventoryReceiptShipmentId, "Erp_BoxItemVariant_IX3");

                entity.HasIndex(e => e.OrderReceiptItemVariantId, "Erp_BoxItemVariant_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BoxItem)
                    .WithMany(p => p.ErpBoxItemVariants)
                    .HasForeignKey(d => d.BoxItemId)
                    .HasConstraintName("FK_Erp_BoxItemVariant_Erp_BoxItem");

                entity.HasOne(d => d.InventoryReceiptItemVariant)
                    .WithMany(p => p.ErpBoxItemVariants)
                    .HasForeignKey(d => d.InventoryReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_BoxItemVariant_Erp_InventoryReceiptItemVariant");

                entity.HasOne(d => d.InventoryReceiptShipment)
                    .WithMany(p => p.ErpBoxItemVariants)
                    .HasForeignKey(d => d.InventoryReceiptShipmentId)
                    .HasConstraintName("FK_Erp_BoxItemVariant_Erp_InventoryReceiptShipment");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpBoxItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_BoxItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.OrderReceiptItemVariant)
                    .WithMany(p => p.ErpBoxItemVariants)
                    .HasForeignKey(d => d.OrderReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_BoxItemVariant_Erp_OrderReceiptItemVariant");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpBoxItemVariants)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_BoxItemVariant_Erp_InventorySerialCard");
            });

            modelBuilder.Entity<ErpBoxTotal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_BoxTotal");

                entity.HasIndex(e => e.BoxId, "Erp_BoxTotal_IX0");

                entity.HasIndex(e => new { e.BoxId, e.WarehouseId }, "Erp_BoxTotal_IX1");

                entity.HasIndex(e => new { e.BoxId, e.WarehouseId, e.WarehouseLocationId }, "Erp_BoxTotal_IX2");

                entity.HasIndex(e => new { e.BoxId, e.WarehouseId, e.WarehouseLocationId, e.Quantity }, "Erp_BoxTotal_IX3");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.ErpBoxTotals)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Erp_BoxTotal_Erp_Box");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpBoxTotals)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_BoxTotal_Erp_Warehouse");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpBoxTotals)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_BoxTotal_Erp_WarehouseLocation");
            });

            modelBuilder.Entity<ErpBudget>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Budget");

                entity.ToTable("Erp_Budget");

                entity.HasIndex(e => new { e.CompanyId, e.BudgetType, e.BudgetNo }, "Erp_Budget_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CostCenterId, "Erp_Budget_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.BudgetNo).HasMaxLength(25);

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpBudgets)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Budget_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpBudgets)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Budget_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBudgets)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Budget_Meta_Forex");

                entity.HasOne(d => d.RevisedReceipt)
                    .WithMany(p => p.InverseRevisedReceipt)
                    .HasForeignKey(d => d.RevisedReceiptId)
                    .HasConstraintName("FK_Erp_Budget_Erp_Budget_DBOnly");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpBudgets)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Budget_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBudgets)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Budget_Erp_Workplace");
            });

            modelBuilder.Entity<ErpBudgetItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_BudgetItem");

                entity.ToTable("Erp_BudgetItem");

                entity.HasIndex(e => e.BudgetId, "Erp_BudgetItem_IX0");

                entity.HasIndex(e => e.CostCenterId, "Erp_BudgetItem_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_BudgetItem_IX2");

                entity.HasIndex(e => e.ServiceCardId, "Erp_BudgetItem_IX3");

                entity.HasIndex(e => e.InventoryId, "Erp_BudgetItem_IX4");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Cdtype).HasColumnName("CDType");

                entity.Property(e => e.CostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CurrentAccountCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Fcapacity)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("FCapacity");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Fturnover)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("FTurnover");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LastInflowAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastInflowPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_GLAccount");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Budget");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Category");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_BudgetItem_Meta_Forex");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Inventory");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_BudgetItem");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.SellerId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Employee");

                entity.HasOne(d => d.ServiceCardGroup)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.ServiceCardGroupId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_ServiceGroup");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Service");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_BudgetItem_Meta_UnitSetItem");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpBudgetItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_BudgetItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCalendar>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Calendar");

                entity.Property(e => e.CalendarCode).HasMaxLength(25);

                entity.Property(e => e.CalendarName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.TimeCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCalendars)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Calendar_Erp_Company");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Calendar_Erp_Calendar_DBOnly");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCalendars)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Calendar_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCalendarItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CalendarItem");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.TimeCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.ErpCalendarItems)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_Erp_CalendarItem_Erp_Calendar");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_CalendarItem_Erp_CalendarItem_DBOnly");
            });

            modelBuilder.Entity<ErpCallerIdLog>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CallerIdLog");

                entity.HasIndex(e => new { e.CompanyId, e.CallType, e.CallDate }, "Erp_CallerIdLog_IX0");

                entity.HasIndex(e => new { e.CompanyId, e.CallDate }, "Erp_CallerIdLog_IX1");

                entity.HasIndex(e => e.PosReceiptId, "Erp_CallerIdLog_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CallerIdLog_IX3");

                entity.Property(e => e.CallDate).HasColumnType("datetime");

                entity.Property(e => e.CallNumber).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCallerIdLogs)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CallerIdLog_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCallerIdLogs)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CallerIdLog_Erp_CurrentAccount");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpCallerIdLogs)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_CallerIdLog_Erp_Department");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpCallerIdLogs)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_CallerIdLog_Erp_Pos");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCallerIdLogs)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CallerIdLog_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCash>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Cash");

                entity.ToTable("Erp_Cash");

                entity.HasIndex(e => new { e.CompanyId, e.CashCode }, "Erp_Cash_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CostCenterId, "Erp_Cash_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CashCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCashes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Cash_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCashes)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Cash_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCashes)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Cash_Meta_Forex");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCashes)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Cash_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCashIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CashIA");

                entity.ToTable("Erp_CashIA");

                entity.HasIndex(e => e.CashId, "Erp_CashIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_CashIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_CashIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpCashIas)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_CashIA_Erp_Cash");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCashIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_CashIA_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCashIas)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CashIA_Meta_Forex");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpCashIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_CashIA_Erp_GLAccount");
            });

            modelBuilder.Entity<ErpCashTotal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CashTotal");

                entity.HasIndex(e => new { e.CashId, e.TotalType, e.TotalDate }, "Erp_CashTotal_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpCashTotals)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_CashTotal_Erp_Cash");
            });

            modelBuilder.Entity<ErpCashTotalItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CashTotalItem");

                entity.HasIndex(e => e.CashTotalId, "Erp_CashTotalItem_IX0");

                entity.HasIndex(e => e.PaymentCardId, "Erp_CashTotalItem_IX1");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CashTotal)
                    .WithMany(p => p.ErpCashTotalItems)
                    .HasForeignKey(d => d.CashTotalId)
                    .HasConstraintName("FK_Erp_CashTotalItem_Erp_CashTotal");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCashTotalItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CashTotalItem_Meta_Forex");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpCashTotalItems)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_CashTotalItem_Erp_PaymentCard");

                entity.HasOne(d => d.Shifts)
                    .WithMany(p => p.ErpCashTotalItems)
                    .HasForeignKey(d => d.ShiftsId)
                    .HasConstraintName("FK_Erp_CashTotalItem_Pos_Shifts");
            });

            modelBuilder.Entity<ErpCategory>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Category");

                entity.HasIndex(e => new { e.CompanyId, e.CategoryName }, "Erp_Category_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CategoryName).HasMaxLength(50);

                entity.Property(e => e.CategoryName2).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCategories)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Category_Erp_Company");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Category_Erp_Category_DBOnly");
            });

            modelBuilder.Entity<ErpCertification>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Certification");

                entity.HasIndex(e => new { e.CompanyId, e.CertificationName }, "Erp_Certification_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CertificationName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCertifications)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Certification_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCertifications)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Certification_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpCheque>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Cheque");

                entity.ToTable("Erp_Cheque");

                entity.HasIndex(e => new { e.CompanyId, e.ChequeType, e.ChequeCode }, "Erp_Cheque_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Cheque_IX1");

                entity.HasIndex(e => e.BankAccountId, "Erp_Cheque_IX2");

                entity.HasIndex(e => e.OutflowCurrentAccountId, "Erp_Cheque_IX3");

                entity.HasIndex(e => e.OutflowBankAccountId, "Erp_Cheque_IX4");

                entity.HasIndex(e => e.ProjectId, "Erp_Cheque_IX5");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BankBranch).HasMaxLength(50);

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.ChequeBackPicture).HasColumnType("image");

                entity.Property(e => e.ChequeCode).HasMaxLength(25);

                entity.Property(e => e.ChequeFrontPicture).HasColumnType("image");

                entity.Property(e => e.ChequeNo).HasMaxLength(50);

                entity.Property(e => e.Debtor).HasMaxLength(50);

                entity.Property(e => e.DebtorIdCardNo).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Expense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Guarantor1).HasMaxLength(50);

                entity.Property(e => e.Guarantor2).HasMaxLength(50);

                entity.Property(e => e.IbanNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.PaidAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PaymentPlace).HasMaxLength(100);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.Stamp).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccountNavigation)
                    .WithMany(p => p.ErpChequeBankAccountNavigations)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_BankAccount1");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCheques)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpChequeCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCheques)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Cheque_Meta_Forex");

                entity.HasOne(d => d.MetaBankBranch)
                    .WithMany(p => p.ErpCheques)
                    .HasForeignKey(d => d.MetaBankBranchId)
                    .HasConstraintName("FK_Erp_Cheque_Meta_BankBranch");

                entity.HasOne(d => d.MetaBank)
                    .WithMany(p => p.ErpCheques)
                    .HasForeignKey(d => d.MetaBankId)
                    .HasConstraintName("FK_Erp_Cheque_Meta_Bank");

                entity.HasOne(d => d.OutflowBankAccount)
                    .WithMany(p => p.ErpChequeOutflowBankAccounts)
                    .HasForeignKey(d => d.OutflowBankAccountId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_BankAccount");

                entity.HasOne(d => d.OutflowCurrentAccount)
                    .WithMany(p => p.ErpChequeOutflowCurrentAccounts)
                    .HasForeignKey(d => d.OutflowCurrentAccountId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_CurrentAccount1");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpCheques)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_Project");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCheques)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Cheque_Erp_Workplace");
            });

            modelBuilder.Entity<ErpChequeReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ChequeReceipt");

                entity.ToTable("Erp_ChequeReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_ChequeReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_ChequeReceipt_IX1");

                entity.HasIndex(e => e.BankAccountId, "Erp_ChequeReceipt_IX2");

                entity.HasIndex(e => e.CashId, "Erp_ChequeReceipt_IX3");

                entity.HasIndex(e => e.BankReceiptId, "Erp_ChequeReceipt_IX4");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_ChequeReceipt_IX5");

                entity.HasIndex(e => e.GlreceiptId, "Erp_ChequeReceipt_IX6");

                entity.HasIndex(e => e.CostCenterId, "Erp_ChequeReceipt_IX7");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalOutflowAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_BankAccount");

                entity.HasOne(d => d.BankCredit)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.BankCreditId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_BankCredit");

                entity.HasOne(d => d.BankReceipt)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.BankReceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_BankReceipt");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_CurrentAccountReceipt");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Meta_Forex");

                entity.HasOne(d => d.ForexRateNavigation)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.ForexRateId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_ChequeReceipt");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_Project");

                entity.HasOne(d => d.ReceiptPaymentItem)
                    .WithMany(p => p.ErpChequeReceipts)
                    .HasForeignKey(d => d.ReceiptPaymentItemId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_ReceiptPaymentItem");

                entity.HasOne(d => d.TransferWorkplace)
                    .WithMany(p => p.ErpChequeReceiptTransferWorkplaces)
                    .HasForeignKey(d => d.TransferWorkplaceId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_Workplace1");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpChequeReceiptWorkplaces)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ChequeReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpChequeReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ChequeReceiptAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ChequeReceipt)
                    .WithMany(p => p.ErpChequeReceiptAttachments)
                    .HasForeignKey(d => d.ChequeReceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceiptAttachment_Erp_ChequeReceipt");
            });

            modelBuilder.Entity<ErpChequeReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ChequeReceiptItem");

                entity.ToTable("Erp_ChequeReceiptItem");

                entity.HasIndex(e => e.ChequeReceiptId, "Erp_ChequeReceiptItem_IX0");

                entity.HasIndex(e => e.ChequeId, "Erp_ChequeReceiptItem_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_ChequeReceiptItem_IX2");

                entity.HasIndex(e => e.BankAccountId, "Erp_ChequeReceiptItem_IX3");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_ChequeReceiptItem_IX4");

                entity.HasIndex(e => e.GlreceiptId, "Erp_ChequeReceiptItem_IX5");

                entity.HasIndex(e => e.BankReceiptId, "Erp_ChequeReceiptItem_IX6");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_BankAccount");

                entity.HasOne(d => d.BankReceipt)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.BankReceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_BankReceipt");

                entity.HasOne(d => d.Cheque)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.ChequeId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_Cheque");

                entity.HasOne(d => d.ChequeReceipt)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.ChequeReceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_ChequeReceipt");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_CurrentAccountReceiptItem");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpChequeReceiptItems)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_ChequeReceiptItem_Erp_GLReceipt");
            });

            modelBuilder.Entity<ErpChequeTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ChequeTransaction");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cheque)
                    .WithMany(p => p.ErpChequeTransactions)
                    .HasForeignKey(d => d.ChequeId)
                    .HasConstraintName("FK_Erp_ChequeTransaction_Erp_Cheque");
            });

            modelBuilder.Entity<ErpCompany>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Company");

                entity.ToTable("Erp_Company");

                entity.HasIndex(e => e.CompanyCode, "Erp_Company_IX0")
                    .IsUnique();

                entity.Property(e => e.Acountant2AddressStreet2).HasMaxLength(50);

                entity.Property(e => e.Acountant2BuildingNumber).HasMaxLength(15);

                entity.Property(e => e.Acountant2ContactFaxNumber).HasMaxLength(50);

                entity.Property(e => e.Acountant2ContactPhoneNumber).HasMaxLength(50);

                entity.Property(e => e.Acountant2EmailAddress).HasMaxLength(50);

                entity.Property(e => e.Acountant2EngagementTypeDescription).HasMaxLength(100);

                entity.Property(e => e.Acountant2Name).HasMaxLength(50);

                entity.Property(e => e.Acountant2ZipOrPostalCode).HasMaxLength(15);

                entity.Property(e => e.AcountantAddressStreet2).HasMaxLength(50);

                entity.Property(e => e.AcountantBuildingNumber).HasMaxLength(15);

                entity.Property(e => e.AcountantContactFaxNumber).HasMaxLength(50);

                entity.Property(e => e.AcountantContactPhoneNumber).HasMaxLength(50);

                entity.Property(e => e.AcountantEmailAddress).HasMaxLength(50);

                entity.Property(e => e.AcountantEngagementTypeDescription).HasMaxLength(100);

                entity.Property(e => e.AcountantName).HasMaxLength(50);

                entity.Property(e => e.AcountantZipOrPostalCode).HasMaxLength(15);

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.ApartmentNo).HasMaxLength(15);

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.Avenue).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(25);

                entity.Property(e => e.CompanyLogo).HasColumnType("image");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.CompanySigner).HasColumnType("image");

                entity.Property(e => e.CompanyType).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DoorNo).HasMaxLength(15);

                entity.Property(e => e.EdespatchAlias)
                    .HasMaxLength(100)
                    .HasColumnName("EDespatchAlias");

                entity.Property(e => e.EinvoiceAlias)
                    .HasMaxLength(100)
                    .HasColumnName("EInvoiceAlias");

                entity.Property(e => e.EinvoiceScenario).HasColumnName("EInvoiceScenario");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.IdNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Internet).HasMaxLength(100);

                entity.Property(e => e.IsEarchive).HasColumnName("IsEArchive");

                entity.Property(e => e.IsEdespatch).HasColumnName("IsEDespatch");

                entity.Property(e => e.IsEexim).HasColumnName("IsEExim");

                entity.Property(e => e.IsEguestCheck).HasColumnName("IsEGuestCheck");

                entity.Property(e => e.IsEinvoice).HasColumnName("IsEInvoice");

                entity.Property(e => e.IsEledger).HasColumnName("IsELedger");

                entity.Property(e => e.IsEproducerReceipt).HasColumnName("IsEProducerReceipt");

                entity.Property(e => e.MersisNo).HasMaxLength(50);

                entity.Property(e => e.NaceCode).HasMaxLength(15);

                entity.Property(e => e.Password).HasMaxLength(32);

                entity.Property(e => e.PersonFamilyName).HasMaxLength(50);

                entity.Property(e => e.PersonFirstName).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Street).HasMaxLength(50);

                entity.Property(e => e.TaxNo).HasMaxLength(15);

                entity.Property(e => e.TradeName).HasMaxLength(100);

                entity.Property(e => e.TradeRegistrationNo).HasMaxLength(50);

                entity.Property(e => e.TurMobToken).HasMaxLength(50);

                entity.Property(e => e.TypeCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Village).HasMaxLength(50);

                entity.HasOne(d => d.Acountant2City)
                    .WithMany(p => p.ErpCompanyAcountant2Cities)
                    .HasForeignKey(d => d.Acountant2CityId)
                    .HasConstraintName("FK_Erp_Company_Meta_City1");

                entity.HasOne(d => d.Acountant2Country)
                    .WithMany(p => p.ErpCompanyAcountant2Countries)
                    .HasForeignKey(d => d.Acountant2CountryId)
                    .HasConstraintName("FK_Erp_Company_Meta_Country1");

                entity.HasOne(d => d.Acountant2Street)
                    .WithMany(p => p.ErpCompanyAcountant2Streets)
                    .HasForeignKey(d => d.Acountant2StreetId)
                    .HasConstraintName("FK_Erp_Company_Meta_Street1");

                entity.HasOne(d => d.AcountantCity)
                    .WithMany(p => p.ErpCompanyAcountantCities)
                    .HasForeignKey(d => d.AcountantCityId)
                    .HasConstraintName("FK_Erp_Company_Meta_City2");

                entity.HasOne(d => d.AcountantCountry)
                    .WithMany(p => p.ErpCompanyAcountantCountries)
                    .HasForeignKey(d => d.AcountantCountryId)
                    .HasConstraintName("FK_Erp_Company_Meta_Country2");

                entity.HasOne(d => d.AcountantStreet)
                    .WithMany(p => p.ErpCompanyAcountantStreets)
                    .HasForeignKey(d => d.AcountantStreetId)
                    .HasConstraintName("FK_Erp_Company_Meta_Street2");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpCompanyCities)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_Company_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpCompanyCountries)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Company_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpCompanies)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_Company_Meta_District");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpCompanies)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_Company_Meta_State");

                entity.HasOne(d => d.StreetNavigation)
                    .WithMany(p => p.ErpCompanyStreetNavigations)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_Company_Meta_Street");

                entity.HasOne(d => d.TaxOffice)
                    .WithMany(p => p.ErpCompanies)
                    .HasForeignKey(d => d.TaxOfficeId)
                    .HasConstraintName("FK_Erp_Company_Meta_TaxOffice");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpCompanies)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_Company_Meta_Town");
            });

            modelBuilder.Entity<ErpCompanyBank>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CompanyBank");

                entity.ToTable("Erp_CompanyBank");

                entity.HasIndex(e => e.CompanyId, "Erp_CompanyBank_IX0");

                entity.HasIndex(e => e.BankAccountId, "Erp_CompanyBank_IX1");

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.BankBranch).HasMaxLength(50);

                entity.Property(e => e.CbankKind).HasColumnName("CBankKind");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.IbanNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpCompanyBanks)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_CompanyBank_Erp_BankAccount");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCompanyBanks)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CompanyBank_Erp_Company");
            });

            modelBuilder.Entity<ErpCompanyCurrentAccount>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CompanyCurrentAccount");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.GlaccountId2).HasColumnName("GLAccountId2");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCompanyCurrentAccountCompanies)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CompanyCurrentAccount_Erp_Company");

                entity.HasOne(d => d.CompanyId2Navigation)
                    .WithMany(p => p.ErpCompanyCurrentAccountCompanyId2Navigations)
                    .HasForeignKey(d => d.CompanyId2)
                    .HasConstraintName("FK_Erp_CompanyCurrentAccount_Erp_Company2_DBOnly");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCompanyCurrentAccountCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CompanyCurrentAccount_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountId2Navigation)
                    .WithMany(p => p.ErpCompanyCurrentAccountCurrentAccountId2Navigations)
                    .HasForeignKey(d => d.CurrentAccountId2)
                    .HasConstraintName("FK_Erp_CompanyCurrentAccount_Erp_CurrentAccount2");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpCompanyCurrentAccountGlaccounts)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_CompanyCurrentAccount_Erp_GLAccount");

                entity.HasOne(d => d.GlaccountId2Navigation)
                    .WithMany(p => p.ErpCompanyCurrentAccountGlaccountId2Navigations)
                    .HasForeignKey(d => d.GlaccountId2)
                    .HasConstraintName("FK_Erp_CompanyCurrentAccount_Erp_GLAccount2");
            });

            modelBuilder.Entity<ErpCompanyIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CompanyAccount");

                entity.ToTable("Erp_CompanyIA");

                entity.HasIndex(e => e.CompanyId, "Erp_CompanyIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_CompanyIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_CompanyIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCompanyIas)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CompanyAccount_Erp_CompanyAccount");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCompanyIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_CompanyIA_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCompanyIas)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CompanyIA_Meta_Forex");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpCompanyIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_CompanyIA_Erp_GLAccount");
            });

            modelBuilder.Entity<ErpCompetency>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Competency");

                entity.HasIndex(e => new { e.CompanyId, e.CompetencyName }, "Erp_Competency_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CompetencyName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCompetencies)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Competency_Erp_Company");
            });

            modelBuilder.Entity<ErpCompetitor>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Competitor");

                entity.HasIndex(e => new { e.CompanyId, e.CompetitorCode }, "Erp_Competitor_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CompetitorCode).HasMaxLength(25);

                entity.Property(e => e.CompetitorName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCompetitors)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Competitor_Erp_Company");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ErpCompetitors)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Erp_Competitor_Meta_Sector");
            });

            modelBuilder.Entity<ErpCompetitorProduct>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CompetitorProduct");

                entity.HasIndex(e => e.CompetitorId, "Erp_CompetitorProduct_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_CompetitorProduct_IX1");

                entity.HasIndex(e => e.ServiceId, "Erp_CompetitorProduct_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ProductName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Competitor)
                    .WithMany(p => p.ErpCompetitorProducts)
                    .HasForeignKey(d => d.CompetitorId)
                    .HasConstraintName("FK_Erp_CompetitorProduct_Erp_Competitor");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpCompetitorProducts)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_CompetitorProduct_Erp_Inventory");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpCompetitorProducts)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_CompetitorProduct_Erp_Service");
            });

            modelBuilder.Entity<ErpContract>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Contract");

                entity.ToTable("Erp_Contract");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_Contract_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Contract_IX1");

                entity.HasIndex(e => e.VehicleId, "Erp_Contract_IX10");

                entity.HasIndex(e => e.DealerId, "Erp_Contract_IX2");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_Contract_IX3");

                entity.HasIndex(e => e.CostCenterId, "Erp_Contract_IX4");

                entity.HasIndex(e => e.ProjectId, "Erp_Contract_IX5");

                entity.HasIndex(e => e.EmployeeId, "Erp_Contract_IX6");

                entity.HasIndex(e => e.QuotationReceiptId, "Erp_Contract_IX7");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_Contract_IX8");

                entity.HasIndex(e => e.AddressId, "Erp_Contract_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency3).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Address");

                entity.HasOne(d => d.BankCredit)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.BankCreditId)
                    .HasConstraintName("FK_Erp_Contract_Erp_BankCredit");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Company");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_Contract_Erp_CurrentAccountContact");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Contract_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpContractCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Contract_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_Contract_Erp_CurrentAccountReceipt");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_Contract_Erp_CustomerTransaction");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpContractDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_Contract_Erp_CurrentAccount1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Contract_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_Contract_Erp_GLReceipt");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_Contract_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Project");

                entity.HasOne(d => d.QuotationReceipt)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.QuotationReceiptId)
                    .HasConstraintName("FK_Erp_Contract_Erp_QuotationReceipt");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Vehicle");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpContracts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Contract_Erp_Workplace");
            });

            modelBuilder.Entity<ErpContractAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ContractAttachment");

                entity.HasIndex(e => e.ContractReceiptId, "Erp_ContractAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ContractReceipt)
                    .WithMany(p => p.ErpContractAttachments)
                    .HasForeignKey(d => d.ContractReceiptId)
                    .HasConstraintName("FK_Erp_ContractAttachment_Erp_Contract");
            });

            modelBuilder.Entity<ErpContractItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ContractItem");

                entity.HasIndex(e => e.ReceiptId, "Erp_ContractItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_ContractItem_IX1");

                entity.HasIndex(e => e.ExpenseId, "Erp_ContractItem_IX10");

                entity.HasIndex(e => e.UnitId, "Erp_ContractItem_IX11");

                entity.HasIndex(e => e.InventoryAssortmentId, "Erp_ContractItem_IX12");

                entity.HasIndex(e => e.UsedEmployeeId, "Erp_ContractItem_IX13");

                entity.HasIndex(e => e.ServiceCardId, "Erp_ContractItem_IX2");

                entity.HasIndex(e => e.ParentItemId, "Erp_ContractItem_IX3");

                entity.HasIndex(e => e.ProjectId, "Erp_ContractItem_IX4");

                entity.HasIndex(e => e.EmployeeId, "Erp_ContractItem_IX5");

                entity.HasIndex(e => e.PackagingId, "Erp_ContractItem_IX6");

                entity.HasIndex(e => e.CostCenterId, "Erp_ContractItem_IX7");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_ContractItem_IX8");

                entity.HasIndex(e => e.DiscountId, "Erp_ContractItem_IX9");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpenseForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantityEntry).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPriceForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceivedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.VatRateAccommodation).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_CostCenter");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Discount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpContractItemEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ContractItem_Meta_Forex");

                entity.HasOne(d => d.InventoryAssortment)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.InventoryAssortmentId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_InventoryAssortment");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Inventory");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Model");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.PackagingId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Packaging");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_ContractItem");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Project");

                entity.HasOne(d => d.Receipt)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ReceiptId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Contract");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Resource");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Service");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_ContractItem_Meta_UnitSetItem");

                entity.HasOne(d => d.UsedEmployee)
                    .WithMany(p => p.ErpContractItemUsedEmployees)
                    .HasForeignKey(d => d.UsedEmployeeId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Employee1");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpContractItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ContractItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpContractItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ContractItemVariant");

                entity.HasIndex(e => e.ReceiptItemId, "Erp_ContractItemVariant_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_ContractItemVariant_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_ContractItemVariant_IX2");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceivedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpContractItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ContractItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpContractItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_ContractItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.ReceiptItem)
                    .WithMany(p => p.ErpContractItemVariants)
                    .HasForeignKey(d => d.ReceiptItemId)
                    .HasConstraintName("FK_Erp_ContractItemVariant_Erp_ContractItem");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpContractItemVariants)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_ContractItemVariant_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpCostCenter>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CostCenter");

                entity.ToTable("Erp_CostCenter");

                entity.HasIndex(e => new { e.CompanyId, e.CostCenterCode }, "Erp_CostCenter_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.ManufacturingTypeId, "Erp_CostCenter_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CostCenterCode).HasMaxLength(25);

                entity.Property(e => e.CostCenterName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCostCenters)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CostCenter_Erp_Company");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCostCenters)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CostCenter_Meta_Forex");

                entity.HasOne(d => d.ManufacturingType)
                    .WithMany(p => p.ErpCostCenters)
                    .HasForeignKey(d => d.ManufacturingTypeId)
                    .HasConstraintName("FK_Erp_CostCenter_Erp_ManufacturingType");
            });

            modelBuilder.Entity<ErpCostCenterDistribution>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CostCenterDistribution");

                entity.ToTable("Erp_CostCenterDistribution");

                entity.HasIndex(e => e.InventoryId, "Erp_CostCenterDistribution_IX0");

                entity.HasIndex(e => e.ServiceId, "Erp_CostCenterDistribution_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_CostCenterDistribution_IX2");

                entity.HasIndex(e => e.ResourceId, "Erp_CostCenterDistribution_IX3");

                entity.HasIndex(e => e.ProcessId, "Erp_CostCenterDistribution_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DistributionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GlreceiptItemId).HasColumnName("GLReceiptItemId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_GLAccount");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCostCenterDistributionCostCenters)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_CostCenter");

                entity.HasOne(d => d.DetailCostCenter)
                    .WithMany(p => p.ErpCostCenterDistributionDetailCostCenters)
                    .HasForeignKey(d => d.DetailCostCenterId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_CostCenter_DBOnly");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_GLReceipt");

                entity.HasOne(d => d.GlreceiptItem)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.GlreceiptItemId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_GLReceiptItem");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_Inventory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_Process");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_Resource");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpCostCenterDistributions)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_CostCenterDistribution_Erp_Service");
            });

            modelBuilder.Entity<ErpCostCenterTotal>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CostCenterTotal");

                entity.ToTable("Erp_CostCenterTotal");

                entity.HasIndex(e => e.CostCenterId, "Erp_CostCenterTotal_IX0");

                entity.HasIndex(e => new { e.CostCenterId, e.FiscalYear }, "Erp_CostCenterTotal_IX1");

                entity.Property(e => e.Credit01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit12).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit12).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCostCenterTotals)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_CostCenterTotal_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCostCenterTotals)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CostCenterTotal_Meta_Forex");
            });

            modelBuilder.Entity<ErpCurrentAccount>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccount");

                entity.ToTable("Erp_CurrentAccount");

                entity.HasIndex(e => new { e.CompanyId, e.CurrentAccountCode }, "Erp_CurrentAccount_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.TradingGroupId, "Erp_CurrentAccount_IX1");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_CurrentAccount_IX10");

                entity.HasIndex(e => e.CategoryId, "Erp_CurrentAccount_IX11");

                entity.HasIndex(e => e.InterestRateId, "Erp_CurrentAccount_IX12");

                entity.HasIndex(e => e.GroupId, "Erp_CurrentAccount_IX2");

                entity.HasIndex(e => e.EmployeeId, "Erp_CurrentAccount_IX3");

                entity.HasIndex(e => e.CustomerGlaccountId, "Erp_CurrentAccount_IX4");

                entity.HasIndex(e => e.SupplierGlaccountId, "Erp_CurrentAccount_IX5");

                entity.HasIndex(e => e.SalesDiscountId, "Erp_CurrentAccount_IX6");

                entity.HasIndex(e => e.PurchaseDiscountId, "Erp_CurrentAccount_IX7");

                entity.HasIndex(e => e.WarehouseId, "Erp_CurrentAccount_IX8");

                entity.HasIndex(e => e.TransporterId, "Erp_CurrentAccount_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.AsserviceServiceType).HasColumnName("ASServiceServiceType");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BirthPlace).HasMaxLength(50);

                entity.Property(e => e.Blog).HasMaxLength(100);

                entity.Property(e => e.CardNo).HasMaxLength(25);

                entity.Property(e => e.ChequeRiskFactor).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ChequeRiskLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CompanyName).HasMaxLength(50);

                entity.Property(e => e.CurrentAccountCode).HasMaxLength(25);

                entity.Property(e => e.CurrentAccountName).HasMaxLength(50);

                entity.Property(e => e.CustomerGlaccountId).HasColumnName("CustomerGLAccountId");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountGroupCode).HasMaxLength(25);

                entity.Property(e => e.EarchiveXsltName)
                    .HasMaxLength(100)
                    .HasColumnName("EArchiveXsltName");

                entity.Property(e => e.EarchivesShippingType)
                    .HasMaxLength(25)
                    .HasColumnName("EArchivesShippingType");

                entity.Property(e => e.EdespatchXsltName)
                    .HasMaxLength(100)
                    .HasColumnName("EDespatchXsltName");

                entity.Property(e => e.EguestCheckXsltName)
                    .HasMaxLength(100)
                    .HasColumnName("EGuestCheckXsltName");

                entity.Property(e => e.EinvoiceAlias)
                    .HasMaxLength(100)
                    .HasColumnName("EInvoiceAlias");

                entity.Property(e => e.EinvoiceScenario).HasColumnName("EInvoiceScenario");

                entity.Property(e => e.EinvoiceXsltName)
                    .HasMaxLength(100)
                    .HasColumnName("EInvoiceXsltName");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.EndorsmentChequeRiskLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndorsmentNoteRiskLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EproducerReceiptXsltName)
                    .HasMaxLength(100)
                    .HasColumnName("EProducerReceiptXsltName");

                entity.Property(e => e.Facebook).HasMaxLength(100);

                entity.Property(e => e.GsmPhone).HasMaxLength(50);

                entity.Property(e => e.IdCardNo).HasMaxLength(50);

                entity.Property(e => e.IdCilt).HasMaxLength(50);

                entity.Property(e => e.IdCity).HasMaxLength(50);

                entity.Property(e => e.IdDistrict).HasMaxLength(50);

                entity.Property(e => e.IdFathersName).HasMaxLength(50);

                entity.Property(e => e.IdIssuedDate).HasColumnType("datetime");

                entity.Property(e => e.IdIssuedPlace).HasMaxLength(50);

                entity.Property(e => e.IdKoy).HasMaxLength(50);

                entity.Property(e => e.IdKutuk).HasMaxLength(50);

                entity.Property(e => e.IdMahalle).HasMaxLength(50);

                entity.Property(e => e.IdMothersName).HasMaxLength(50);

                entity.Property(e => e.IdNo).HasMaxLength(50);

                entity.Property(e => e.IdSayfa).HasMaxLength(50);

                entity.Property(e => e.IdType).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.IsEagreement).HasColumnName("IsEAgreement");

                entity.Property(e => e.IsEdespatch).HasColumnName("IsEDespatch");

                entity.Property(e => e.IsEinvoice).HasColumnName("IsEInvoice");

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.MariageDate).HasColumnType("datetime");

                entity.Property(e => e.MersisNo).HasMaxLength(50);

                entity.Property(e => e.MinShipmentRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.NaceCode).HasMaxLength(50);

                entity.Property(e => e.NoteRiskFactor).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.NoteRiskLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PassportIssueDate).HasColumnType("datetime");

                entity.Property(e => e.PassportNo).HasMaxLength(50);

                entity.Property(e => e.PaymentPlanDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PriceGroupCode).HasMaxLength(25);

                entity.Property(e => e.Profession).HasMaxLength(50);

                entity.Property(e => e.RiskLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SocialSecurityNo).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SpouseBirthDate).HasColumnType("datetime");

                entity.Property(e => e.SpouseCompany).HasMaxLength(50);

                entity.Property(e => e.SpouseJobTitle).HasMaxLength(50);

                entity.Property(e => e.SpouseName).HasMaxLength(50);

                entity.Property(e => e.SpouseProfession).HasMaxLength(50);

                entity.Property(e => e.SupplierGlaccountId).HasColumnName("SupplierGLAccountId");

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.TradeName).HasMaxLength(1000);

                entity.Property(e => e.TradeRegistrationNo).HasMaxLength(50);

                entity.Property(e => e.Twitter).HasMaxLength(100);

                entity.Property(e => e.UdOtomatik).HasColumnName("UD_Otomatik");

                entity.Property(e => e.UdSecondName)
                    .HasMaxLength(50)
                    .HasColumnName("UD_SecondName");

                entity.Property(e => e.UdSvcariAltKod)
                    .HasMaxLength(25)
                    .HasColumnName("UD_SVCariAltKod");

                entity.Property(e => e.UdSvcariKod)
                    .HasMaxLength(25)
                    .HasColumnName("UD_SVCariKod");

                entity.Property(e => e.UdSvhesapTipi)
                    .HasMaxLength(50)
                    .HasColumnName("UD_SVHesapTipi");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.ValuationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WebAddress).HasMaxLength(50);

                entity.Property(e => e.WebContent).HasMaxLength(100);

                entity.HasOne(d => d.Broker)
                    .WithMany(p => p.InverseBroker)
                    .HasForeignKey(d => d.BrokerId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_CurrentAccount_DBOnly");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_CurrentAccountCategory");

                entity.HasOne(d => d.CustomerGlaccount)
                    .WithMany(p => p.ErpCurrentAccountCustomerGlaccounts)
                    .HasForeignKey(d => d.CustomerGlaccountId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_GLAccount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpCurrentAccountEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCurrentAccountForices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Meta_Forex");

                entity.HasOne(d => d.ForexRate)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.ForexRateId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_CurrentAccount");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_CurrentAccountGroup");

                entity.HasOne(d => d.InterestRateNavigation)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.InterestRateId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_InterestRate");

                entity.HasOne(d => d.Nationality)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Meta_Country1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_CurrentAccount1_DBOnly");

                entity.HasOne(d => d.PaymentPlanDebitForex)
                    .WithMany(p => p.ErpCurrentAccountPaymentPlanDebitForices)
                    .HasForeignKey(d => d.PaymentPlanDebitForexId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Meta_Forex1");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_PaymentPlan");

                entity.HasOne(d => d.PurchaseDiscount)
                    .WithMany(p => p.ErpCurrentAccountPurchaseDiscounts)
                    .HasForeignKey(d => d.PurchaseDiscountId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Discount1");

                entity.HasOne(d => d.SalesDiscount)
                    .WithMany(p => p.ErpCurrentAccountSalesDiscounts)
                    .HasForeignKey(d => d.SalesDiscountId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Discount");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Meta_Sector");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.ErpCurrentAccountSellers)
                    .HasForeignKey(d => d.SellerId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Employee1");

                entity.HasOne(d => d.SupplierGlaccount)
                    .WithMany(p => p.ErpCurrentAccountSupplierGlaccounts)
                    .HasForeignKey(d => d.SupplierGlaccountId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_GLAccount1");

                entity.HasOne(d => d.Symbol)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.SymbolId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Meta_Symbol");

                entity.HasOne(d => d.TaxOffice)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.TaxOfficeId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Meta_TaxOffice");

                entity.HasOne(d => d.TradingGroup)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.TradingGroupId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_TradingGroup");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Transporter");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCurrentAccounts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CurrentAccount_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCurrentAccountAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountAttachment");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountAttachments)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountAttachment_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountTransaction)
                    .WithMany(p => p.ErpCurrentAccountAttachments)
                    .HasForeignKey(d => d.CurrentAccountTransactionId)
                    .HasConstraintName("FK_Erp_CurrentAccountAttachment_Erp_CurrentAccountTransaction_DBOnly");
            });

            modelBuilder.Entity<ErpCurrentAccountBank>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccountBank");

                entity.ToTable("Erp_CurrentAccountBank");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountBank_IX0");

                entity.HasIndex(e => e.BankAccountId, "Erp_CurrentAccountBank_IX1");

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.BankBranch).HasMaxLength(50);

                entity.Property(e => e.CabankKind).HasColumnName("CABankKind");

                entity.Property(e => e.Dbslimit)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DBSLimit");

                entity.Property(e => e.DbsriskOver).HasColumnName("DBSRiskOver");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.IbanNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsDbsaccount).HasColumnName("IsDBSAccount");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpCurrentAccountBanks)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountBank_Erp_BankAccount");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountBanks)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountBank_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCurrentAccountBanks)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CurrentAccountBank_Meta_Forex");
            });

            modelBuilder.Entity<ErpCurrentAccountCategory>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountCategory");

                entity.HasIndex(e => new { e.CompanyId, e.CategoryName }, "Erp_CurrentAccountCategory_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CategoryName).HasMaxLength(50);

                entity.Property(e => e.CategoryName2).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCurrentAccountCategories)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CurrentAccountCategory_Erp_Company");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_CurrentAccountCategory_Erp_CurrentAccountCategory_DBOnly");
            });

            modelBuilder.Entity<ErpCurrentAccountContact>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountContact");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountContact_IX0");

                entity.HasIndex(e => e.B2buserName, "Erp_CurrentAccountContact_IX1");

                entity.HasIndex(e => e.B2bpassword, "Erp_CurrentAccountContact_IX2");

                entity.Property(e => e.B2bpassword)
                    .HasMaxLength(32)
                    .HasColumnName("B2BPassword");

                entity.Property(e => e.B2buserName)
                    .HasMaxLength(50)
                    .HasColumnName("B2BUserName");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.Blog).HasMaxLength(100);

                entity.Property(e => e.Capital).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EinvoiceAlias)
                    .HasMaxLength(100)
                    .HasColumnName("EInvoiceAlias");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EMailAddress");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Facebook).HasMaxLength(100);

                entity.Property(e => e.FathersName).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GsmNo).HasMaxLength(50);

                entity.Property(e => e.IdCardNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LinkedIn).HasMaxLength(100);

                entity.Property(e => e.MariageDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(15);

                entity.Property(e => e.Twitter).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpCurrentAccountContacts)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_CurrentAccountContact_Erp_Address");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountContacts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountContact_Erp_CurrentAccount");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpCurrentAccountContacts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_CurrentAccountContact_Meta_User");
            });

            modelBuilder.Entity<ErpCurrentAccountExplanation>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccountExplanation");

                entity.ToTable("Erp_CurrentAccountExplanation");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountExplanation_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountExplanations)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountExplanation_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpCurrentAccountGroup>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccountGroup");

                entity.ToTable("Erp_CurrentAccountGroup");

                entity.HasIndex(e => new { e.CompanyId, e.GroupCode }, "Erp_CurrentAccountGroup_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCurrentAccountGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CurrentAccountGroup_Erp_Company");
            });

            modelBuilder.Entity<ErpCurrentAccountInventoryAttribute>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountInventoryAttribute");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountInventoryAttribute_IX0");

                entity.HasIndex(e => e.AttributeSetId, "Erp_CurrentAccountInventoryAttribute_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.ErpCurrentAccountInventoryAttributes)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Erp_CurrentAccountInventoryAttribute_Erp_InventoryAttributeSet");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountInventoryAttributes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountInventoryAttribute_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpCurrentAccountMailing>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CustomerMailing");

                entity.ToTable("Erp_CurrentAccountMailing");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountMailing_IX0");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MailCode).HasMaxLength(50);

                entity.Property(e => e.MailDate).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountMailings)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountMailing_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpCurrentAccountReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccountReceipt");

                entity.ToTable("Erp_CurrentAccountReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_CurrentAccountReceipt_IX0");

                entity.HasIndex(e => e.CashId, "Erp_CurrentAccountReceipt_IX1");

                entity.HasIndex(e => e.GlreceiptId, "Erp_CurrentAccountReceipt_IX2");

                entity.HasIndex(e => new { e.SourceModule, e.SourceId }, "Erp_CurrentAccountReceipt_IX3");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.Ietype).HasColumnName("IEType");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankReceipt)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.BankReceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Erp_BankReceipt");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCurrentAccountReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCurrentAccountReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountReceiptAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpCurrentAccountReceiptAttachments)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptAttachment_Erp_CurrentAccountReceipt");
            });

            modelBuilder.Entity<ErpCurrentAccountReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccountReceiptItem");

                entity.ToTable("Erp_CurrentAccountReceiptItem");

                entity.HasIndex(e => e.ExpoId, "Erp_CurrentAccountReceiptItem_Expo_IX1");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_CurrentAccountReceiptItem_IX0");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountReceiptItem_IX1");

                entity.HasIndex(e => e.RefundChequeId, "Erp_CurrentAccountReceiptItem_IX10");

                entity.HasIndex(e => e.GiftVoucherId, "Erp_CurrentAccountReceiptItem_IX11");

                entity.HasIndex(e => e.PosReceiptId, "Erp_CurrentAccountReceiptItem_IX12");

                entity.HasIndex(e => e.GlreceiptId, "Erp_CurrentAccountReceiptItem_IX13");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_CurrentAccountReceiptItem_IX14");

                entity.HasIndex(e => new { e.ReceiptType, e.LoyalityCardId, e.PosReceiptId, e.PaymentCardId, e.Credit }, "Erp_CurrentAccountReceiptItem_IX15");

                entity.HasIndex(e => e.CashierId, "Erp_CurrentAccountReceiptItem_IX16");

                entity.HasIndex(e => e.CourierId, "Erp_CurrentAccountReceiptItem_IX17");

                entity.HasIndex(e => e.PosEndOfDateRaportId, "Erp_CurrentAccountReceiptItem_IX18");

                entity.HasIndex(e => new { e.SourceModule, e.SourceType, e.SourceId }, "Erp_CurrentAccountReceiptItem_IX19");

                entity.HasIndex(e => e.CashId, "Erp_CurrentAccountReceiptItem_IX2");

                entity.HasIndex(e => e.ServiceCardId, "Erp_CurrentAccountReceiptItem_IX20");

                entity.HasIndex(e => e.CostCenterId, "Erp_CurrentAccountReceiptItem_IX3");

                entity.HasIndex(e => e.DealerId, "Erp_CurrentAccountReceiptItem_IX4");

                entity.HasIndex(e => e.ProjectId, "Erp_CurrentAccountReceiptItem_IX5");

                entity.HasIndex(e => e.LoyalityCardId, "Erp_CurrentAccountReceiptItem_IX6");

                entity.HasIndex(e => e.PaymentCardId, "Erp_CurrentAccountReceiptItem_IX7");

                entity.HasIndex(e => e.ExpenseId, "Erp_CurrentAccountReceiptItem_IX8");

                entity.HasIndex(e => e.GlaccountId, "Erp_CurrentAccountReceiptItem_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerInterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ExpenseContent).HasMaxLength(4000);

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InstalmentEndDate).HasColumnType("datetime");

                entity.Property(e => e.InstalmentStartDate).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.PaymentCardNo).HasMaxLength(25);

                entity.Property(e => e.PlaceToTravel).HasMaxLength(50);

                entity.Property(e => e.PosMacAddress).HasMaxLength(50);

                entity.Property(e => e.RealPayment).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RealPaymentForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SupplierName).HasMaxLength(50);

                entity.Property(e => e.SupplierTaxNo).HasMaxLength(25);

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransactionForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransactionForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_BankAccount");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Cash");

                entity.HasOne(d => d.Cashier)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemCashiers)
                    .HasForeignKey(d => d.CashierId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Employee2");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemCouriers)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Employee3");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_CurrentAccountReceipt");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_CustomerTransaction");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_CurrentAccount1");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Expense");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Expo");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemForices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Meta_Forex");

                entity.HasOne(d => d.GiftVoucher)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.GiftVoucherId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_GiftVoucher");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_GLAccount");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_GLReceipt");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Invoice");

                entity.HasOne(d => d.LoyalityCard)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.LoyalityCardId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_LoyalityCard");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_OrderReceipt");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_PaymentCard");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_PaymentPlan");

                entity.HasOne(d => d.PosEndOfDateRaport)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.PosEndOfDateRaportId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_PosEndOfDateRaports");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Pos");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Project");

                entity.HasOne(d => d.ReceiptPaymentItem)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.ReceiptPaymentItemId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_ReceiptPaymentItem");

                entity.HasOne(d => d.RefundCheque)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.RefundChequeId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_RefundCheque");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Service");

                entity.HasOne(d => d.Shifts)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.ShiftsId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Pos_Shifts");

                entity.HasOne(d => d.TransactionForex)
                    .WithMany(p => p.ErpCurrentAccountReceiptItemTransactionForices)
                    .HasForeignKey(d => d.TransactionForexId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Meta_Forex1");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCurrentAccountReceiptItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CurrentAccountReceiptItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCurrentAccountReference>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountReference");

                entity.HasIndex(e => e.CurrentAccountId, "CurrentAccountReference_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EMailAddress");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GsmNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountReferences)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountReference_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpCurrentAccountRiskControl>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountRiskControl");

                entity.Property(e => e.Capital).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ControlDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountRiskControls)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountRiskControl_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpCurrentAccountRiskTotal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountRiskTotal");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountRiskTotal_IX0");

                entity.HasIndex(e => new { e.CurrentAccountId, e.FiscalYear }, "Erp_CurrentAccountRiskTotal_IX1");

                entity.Property(e => e.AgingRange01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AgingRange12).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Balance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BouncedChequeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ChequeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexBalance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexBouncedChequeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.OrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RiskChequeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnapprovedOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountRiskTotals)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountRiskTotal_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCurrentAccountRiskTotals)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CurrentAccountRiskTotal_Meta_Forex");
            });

            modelBuilder.Entity<ErpCurrentAccountTotal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountTotal");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountTotal_IX0");

                entity.HasIndex(e => new { e.CurrentAccountId, e.FiscalYear }, "Erp_CurrentAccountTotal_IX1");

                entity.Property(e => e.Credit01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit12).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit12).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountTotals)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountTotal_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCurrentAccountTotals)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CurrentAccountTotal_Meta_Forex");
            });

            modelBuilder.Entity<ErpCurrentAccountTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CurrentAccountTransaction");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RiskLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountTransactions)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountTransaction_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountRiskControl)
                    .WithMany(p => p.ErpCurrentAccountTransactions)
                    .HasForeignKey(d => d.CurrentAccountRiskControlId)
                    .HasConstraintName("FK_Erp_CurrentAccountTransaction_Erp_CurrentAccountRiskControl");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpCurrentAccountTransactions)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_CurrentAccountTransaction_Erp_Department");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.ErpCurrentAccountTransactions)
                    .HasForeignKey(d => d.SellerId)
                    .HasConstraintName("FK_Erp_CurrentAccountTransaction_Erp_Employee");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpCurrentAccountTransactions)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_CurrentAccountTransaction_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCurrentAccountTransactions)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CurrentAccountTransaction_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCurrentAccountWorkplace>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CurrentAccountWorkplace");

                entity.ToTable("Erp_CurrentAccountWorkplace");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CurrentAccountWorkplace_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCurrentAccountWorkplaces)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CurrentAccountWorkplace_Erp_CurrentAccount");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCurrentAccountWorkplaces)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CurrentAccountWorkplace_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCustomerTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CustomerTransaction");

                entity.HasIndex(e => e.SerialCardId, "Erp_CustomerTransactionSerialCard_Index");

                entity.HasIndex(e => new { e.CompanyId, e.DocumentNo }, "Erp_CustomerTransaction_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_CustomerTransaction_IX1");

                entity.HasIndex(e => e.ProjectId, "Erp_CustomerTransaction_IX10");

                entity.HasIndex(e => e.FlowItemId, "Erp_CustomerTransaction_IX11");

                entity.HasIndex(e => e.FlowResultId, "Erp_CustomerTransaction_IX12");

                entity.HasIndex(e => e.PrevTransactionId, "Erp_CustomerTransaction_IX13");

                entity.HasIndex(e => new { e.CompanyId, e.TicketNo }, "Erp_CustomerTransaction_IX14");

                entity.HasIndex(e => e.LeadId, "Erp_CustomerTransaction_IX2");

                entity.HasIndex(e => e.MarketingActivityId, "Erp_CustomerTransaction_IX3");

                entity.HasIndex(e => e.AddressId, "Erp_CustomerTransaction_IX4");

                entity.HasIndex(e => e.TranTypeId, "Erp_CustomerTransaction_IX5");

                entity.HasIndex(e => e.TranSubTypeId, "Erp_CustomerTransaction_IX6");

                entity.HasIndex(e => e.DepartmentId, "Erp_CustomerTransaction_IX7");

                entity.HasIndex(e => e.ServiceId, "Erp_CustomerTransaction_IX8");

                entity.HasIndex(e => e.TranResultId, "Erp_CustomerTransaction_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ActualDate).HasColumnType("datetime");

                entity.Property(e => e.ActualTime).HasColumnType("datetime");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.AsserviceCaller).HasColumnName("ASServiceCaller");

                entity.Property(e => e.AsservicePhone).HasColumnName("ASServicePhone");

                entity.Property(e => e.CaaddressId).HasColumnName("CAAddressId");

                entity.Property(e => e.CacontactId).HasColumnName("CAContactId");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ForexPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InCargoReceiptNo).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.OutCargoReceiptNo).HasMaxLength(25);

                entity.Property(e => e.PlannedDate).HasColumnType("datetime");

                entity.Property(e => e.PlannedTime).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ResultApprovedBy).HasMaxLength(50);

                entity.Property(e => e.SourceDocumentNo).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TicketNo).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpCustomerTransactionAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Address");

                entity.HasOne(d => d.Caaddress)
                    .WithMany(p => p.ErpCustomerTransactionCaaddresses)
                    .HasForeignKey(d => d.CaaddressId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Address1");

                entity.HasOne(d => d.Cacontact)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.CacontactId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_CurrentAccountContact");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_CurrentAccount");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Department");

                entity.HasOne(d => d.FlowItem)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.FlowItemId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_TransactionFlowItem");

                entity.HasOne(d => d.FlowResult)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.FlowResultId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_TransactionFlowResult");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Inventory");

                entity.HasOne(d => d.LeadContact)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.LeadContactId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_LeadContact");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_Lead");

                entity.HasOne(d => d.MarketingActivity)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.MarketingActivityId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_MarketingActivity");

                entity.HasOne(d => d.PrevTransaction)
                    .WithMany(p => p.ErpCustomerTransactionPrevTransactions)
                    .HasForeignKey(d => d.PrevTransactionId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_TransactionType2");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Project");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_InventorySerialCard");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Service");

                entity.HasOne(d => d.TranResult)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.TranResultId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_TransactionTypeResult");

                entity.HasOne(d => d.TranSubType)
                    .WithMany(p => p.ErpCustomerTransactionTranSubTypes)
                    .HasForeignKey(d => d.TranSubTypeId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_TransactionType1");

                entity.HasOne(d => d.TranType)
                    .WithMany(p => p.ErpCustomerTransactionTranTypes)
                    .HasForeignKey(d => d.TranTypeId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Crm_TransactionType");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpCustomerTransactions)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_CustomerTransaction_Erp_Workplace");
            });

            modelBuilder.Entity<ErpCustomerTransactionActivity>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CustomerTransactionActivity");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_CustomerTransactionActivity_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpCustomerTransactionActivities)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_CustomerTransactionActivity_Erp_CustomerTransaction");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpCustomerTransactionActivities)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_CustomerTransactionActivity_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpCustomerTransactionActivities)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_CustomerTransactionActivity_Meta_Forex");

                entity.HasOne(d => d.TranType)
                    .WithMany(p => p.ErpCustomerTransactionActivities)
                    .HasForeignKey(d => d.TranTypeId)
                    .HasConstraintName("FK_Erp_CustomerTransactionActivity_Crm_TransactionType");
            });

            modelBuilder.Entity<ErpCustomerTransactionAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CustomerTransactionAttachment");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_CustomerTransactionAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpCustomerTransactionAttachments)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_CustomerTransactionAttachment_Erp_CustomerTransaction");
            });

            modelBuilder.Entity<ErpCustomerTransactionResource>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_CustomerTransactionResource");

                entity.HasIndex(e => e.TransactionId, "Erp_CustomerTransactionResource_IX0");

                entity.HasIndex(e => e.ResourceId, "Erp_CustomerTransactionResource_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpCustomerTransactionResources)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_CustomerTransactionResource_Erp_Resource");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.ErpCustomerTransactionResources)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("FK_Erp_CustomerTransactionResource_Erp_CustomerTransaction");
            });

            modelBuilder.Entity<ErpDeclaration>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Declaration");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDeclarations)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Declaration_Erp_Company");
            });

            modelBuilder.Entity<ErpDeclarationApp1>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp1");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InvDate).HasColumnType("datetime");

                entity.Property(e => e.InvNo).HasMaxLength(25);

                entity.Property(e => e.ReceiverTaxNo).HasMaxLength(25);

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp1s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp1_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationApp2>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp2");

                entity.Property(e => e.ClosingInventory).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Expenses).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Loss).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OpeningInventory).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Proceeds).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Profit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceivingInventory).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Revenue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp2s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp2_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationApp3>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp3");

                entity.Property(e => e.Btype)
                    .HasMaxLength(1000)
                    .HasColumnName("BType");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Expenses).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncomeTax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Loss).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Profit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Revenue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp3s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp3_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationApp4>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp4");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CountryCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Inventory).HasMaxLength(1000);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.Registration).HasMaxLength(50);

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.Title1).HasMaxLength(1000);

                entity.Property(e => e.Title2).HasMaxLength(1000);

                entity.Property(e => e.TridNo)
                    .HasMaxLength(25)
                    .HasColumnName("TRIdNo");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp4s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp4_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationApp5>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp5");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Share).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.Title1).HasMaxLength(1000);

                entity.Property(e => e.Title2).HasMaxLength(50);

                entity.Property(e => e.TridNo)
                    .HasMaxLength(25)
                    .HasColumnName("TRIdNo");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp5s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp5_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationApp6>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp6");

                entity.Property(e => e.AccountCode).HasMaxLength(25);

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CreditBalance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DebitBalance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp6s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp6_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationApp7>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationApp7");

                entity.Property(e => e.CountryCode).HasMaxLength(25);

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.TridNo)
                    .HasMaxLength(25)
                    .HasColumnName("TRIdNo");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationApp7s)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationApp7_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDeclarationItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DeclarationItem");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DecRec)
                    .WithMany(p => p.ErpDeclarationItems)
                    .HasForeignKey(d => d.DecRecId)
                    .HasConstraintName("FK_Erp_DeclarationItem_Erp_Declaration");
            });

            modelBuilder.Entity<ErpDemandReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DemandReceipt");

                entity.ToTable("Erp_DemandReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_DemandReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_DemandReceipt_IX1");

                entity.HasIndex(e => e.WorkOrderReceiptId, "Erp_DemandReceipt_IX10");

                entity.HasIndex(e => e.GlreceiptId, "Erp_DemandReceipt_IX11");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_DemandReceipt_IX12");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_DemandReceipt_IX13");

                entity.HasIndex(e => e.VehicleId, "Erp_DemandReceipt_IX14");

                entity.HasIndex(e => e.AddressId, "Erp_DemandReceipt_IX2");

                entity.HasIndex(e => e.ShippingAddressId, "Erp_DemandReceipt_IX3");

                entity.HasIndex(e => e.WarehouseId, "Erp_DemandReceipt_IX4");

                entity.HasIndex(e => e.CostCenterId, "Erp_DemandReceipt_IX5");

                entity.HasIndex(e => e.DealerId, "Erp_DemandReceipt_IX6");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_DemandReceipt_IX7");

                entity.HasIndex(e => e.EmployeeId, "Erp_DemandReceipt_IX8");

                entity.HasIndex(e => e.TransporterId, "Erp_DemandReceipt_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency3).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpDemandReceiptAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Address");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpDemandReceiptCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_CurrentAccountReceipt");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_CustomerTransaction");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpDemandReceiptDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_CurrentAccount1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Crm_Lead");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpDemandReceiptOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Warehouse2");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Project");

                entity.HasOne(d => d.ShippingAddress)
                    .WithMany(p => p.ErpDemandReceiptShippingAddresses)
                    .HasForeignKey(d => d.ShippingAddressId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Address1");

                entity.HasOne(d => d.SourceDemandReceipt)
                    .WithMany(p => p.InverseSourceDemandReceipt)
                    .HasForeignKey(d => d.SourceDemandReceiptId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_DemandReceipt2_DBOnly");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Transporter");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Vehicle");

                entity.HasOne(d => d.WarehouseDemandReceipt)
                    .WithMany(p => p.InverseWarehouseDemandReceipt)
                    .HasForeignKey(d => d.WarehouseDemandReceiptId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_DemandReceipt_DBOnly");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpDemandReceiptWarehouses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Warehouse");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_WarehouseLocation");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpDemandReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_DemandReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpDemandReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DemandReceiptAttachment");

                entity.HasIndex(e => e.DemandReceiptId, "Erp_DemandReceiptAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DemandReceipt)
                    .WithMany(p => p.ErpDemandReceiptAttachments)
                    .HasForeignKey(d => d.DemandReceiptId)
                    .HasConstraintName("FK_Erp_DemandReceiptAttachment_Erp_DemandReceipt");
            });

            modelBuilder.Entity<ErpDemandReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DemandReceiptItem");

                entity.ToTable("Erp_DemandReceiptItem");

                entity.HasIndex(e => e.DemandReceiptId, "Erp_DemandReceiptItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_DemandReceiptItem_IX1");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_DemandReceiptItem_IX10");

                entity.HasIndex(e => e.DiscountId, "Erp_DemandReceiptItem_IX11");

                entity.HasIndex(e => e.ExpenseId, "Erp_DemandReceiptItem_IX12");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_DemandReceiptItem_IX13");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_DemandReceiptItem_IX14");

                entity.HasIndex(e => e.UsedEmployeeId, "Erp_DemandReceiptItem_IX15");

                entity.HasIndex(e => e.ServiceCardId, "Erp_DemandReceiptItem_IX2");

                entity.HasIndex(e => e.ParentItemId, "Erp_DemandReceiptItem_IX3");

                entity.HasIndex(e => e.WarehouseId, "Erp_DemandReceiptItem_IX4");

                entity.HasIndex(e => e.UnitId, "Erp_DemandReceiptItem_IX5");

                entity.HasIndex(e => e.ProjectId, "Erp_DemandReceiptItem_IX6");

                entity.HasIndex(e => e.EmployeeId, "Erp_DemandReceiptItem_IX7");

                entity.HasIndex(e => e.PackagingId, "Erp_DemandReceiptItem_IX8");

                entity.HasIndex(e => e.CostCenterId, "Erp_DemandReceiptItem_IX9");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpenseForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantityEntry).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPriceForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OrderedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PartyNo).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.VatRateAccommodation).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_CurrentAccount");

                entity.HasOne(d => d.DemandReceipt)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.DemandReceiptId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_DemandReceipt");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Discount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpDemandReceiptItemEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Inventory");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Model");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpDemandReceiptItemOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Warehouse2");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.PackagingId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Packaging");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_DemandReceiptItem");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Project");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Resource");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Service");

                entity.HasOne(d => d.SourceDemandReceiptItem)
                    .WithMany(p => p.InverseSourceDemandReceiptItem)
                    .HasForeignKey(d => d.SourceDemandReceiptItemId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_DemandReceiptItem2_DBOnly");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Meta_UnitSetItem");

                entity.HasOne(d => d.UsedEmployee)
                    .WithMany(p => p.ErpDemandReceiptItemUsedEmployees)
                    .HasForeignKey(d => d.UsedEmployeeId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Employee1");

                entity.HasOne(d => d.WarehouseDemandReceiptItem)
                    .WithMany(p => p.InverseWarehouseDemandReceiptItem)
                    .HasForeignKey(d => d.WarehouseDemandReceiptItemId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_DemandReceiptItem_DBOnly");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpDemandReceiptItemWarehouses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Warehouse");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_WarehouseLocation");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.WorkOrderId);

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpDemandReceiptItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_DemandReceiptItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpDemandReceiptItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DemandReceiptItemVariant");

                entity.ToTable("Erp_DemandReceiptItemVariant");

                entity.HasIndex(e => e.DemandReceiptItemId, "Erp_DemandReceiptItemVariant_IX0");

                entity.HasIndex(e => e.WarehouseId, "Erp_DemandReceiptItemVariant_IX1");

                entity.HasIndex(e => e.InventoryId, "Erp_DemandReceiptItemVariant_IX2");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_DemandReceiptItemVariant_IX3");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OrderedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DemandReceiptItem)
                    .WithMany(p => p.ErpDemandReceiptItemVariants)
                    .HasForeignKey(d => d.DemandReceiptItemId)
                    .HasConstraintName("FK_Erp_DemandReceiptItemVariant_Erp_DemandReceiptItem");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpDemandReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_DemandReceiptItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpDemandReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_DemandReceiptItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpDemandReceiptItemVariants)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_DemandReceiptItemVariant_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpDepartment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Department");

                entity.HasIndex(e => new { e.CompanyId, e.DepartmentCode }, "Erp_Department_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.DepartmentGroupId, "Erp_Department_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_Department_IX2");

                entity.HasIndex(e => e.ServiceId, "Erp_Department_IX3");

                entity.HasIndex(e => e.ParentId, "Erp_Department_IX4");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepartmentCode).HasMaxLength(25);

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PhoneNumbers).HasMaxLength(100);

                entity.Property(e => e.PostalCode).HasMaxLength(15);

                entity.Property(e => e.PriceGroupCode).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_Department_Meta_City");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Department_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Department_Erp_CostCenter");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Department_Meta_Country");

                entity.HasOne(d => d.DepartmentGroup)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.DepartmentGroupId)
                    .HasConstraintName("FK_Erp_Department_Erp_DepartmentGroup");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_Department_Meta_District");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Department_Erp_Department_DBOnly");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_Department_Erp_Service");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_Department_Meta_State");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_Department_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_Department_Meta_Town");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpDepartments)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Department_Erp_Workplace");
            });

            modelBuilder.Entity<ErpDepartmentCapacity>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DepartmentCapacity");

                entity.HasIndex(e => e.DepartmentId, "Erp_DepartmentCapacity_IX0");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_DepartmentCapacity_IX1");

                entity.HasIndex(e => e.CategoryId, "Erp_DepartmentCapacity_IX2");

                entity.Property(e => e.Capacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Turnover).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpDepartmentCapacities)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_DepartmentCapacity_Erp_Category");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpDepartmentCapacities)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_DepartmentCapacity_Erp_CurrentAccount");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpDepartmentCapacities)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_DepartmentCapacity_Erp_Department");
            });

            modelBuilder.Entity<ErpDepartmentCash>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DepartmentCash");

                entity.HasIndex(e => e.DepartmentId, "Erp_DepartmentCash_IX0");

                entity.HasIndex(e => e.CashId, "Erp_DepartmentCash_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpDepartmentCashes)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_DepartmentCash_Erp_Cash");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpDepartmentCashes)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_DepartmentCash_Erp_Department");
            });

            modelBuilder.Entity<ErpDepartmentDelivery>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DepartmentDelivery");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Meta_Country");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Erp_Department");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Meta_District");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Meta_State");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpDepartmentDeliveries)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_DepartmentDelivery_Meta_Town");
            });

            modelBuilder.Entity<ErpDepartmentGroup>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DepartmentGroup");

                entity.HasIndex(e => new { e.CompanyId, e.GroupCode }, "Erp_DepartmentGroup_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDepartmentGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_DepartmentGroup_Erp_Company");
            });

            modelBuilder.Entity<ErpDepartmentService>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DepartmentService");

                entity.HasIndex(e => e.DepartmentId, "Erp_DepartmentService_IX0");

                entity.HasIndex(e => e.ServiceId, "Erp_DepartmentService_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpDepartmentServices)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_DepartmentService_Erp_Department");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpDepartmentServices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_DepartmentService_Erp_Service");
            });

            modelBuilder.Entity<ErpDepartmentWarehouse>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DepartmentWarehouse");

                entity.HasIndex(e => e.DepartmentId, "Erp_DepartmentWarehouse_IX0");

                entity.HasIndex(e => e.WarehouseId, "Erp_DepartmentWarehouse_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FowarehouseType).HasColumnName("FOWarehouseType");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpDepartmentWarehouses)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_DepartmentWarehouse_Erp_Department");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpDepartmentWarehouses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_DepartmentWarehouse_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpDespatchContact>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DespatchContact");

                entity.HasIndex(e => new { e.CompanyId, e.ContactCode }, "Erp_DespatchContact_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.TransporterId, "Erp_DespatchContact_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ContactCode).HasMaxLength(25);

                entity.Property(e => e.ContactName).HasMaxLength(50);

                entity.Property(e => e.ContactSurname).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.IdNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PlateNumber).HasMaxLength(100);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDespatchContacts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_DespatchContact_Erp_Company");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpDespatchContacts)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_DespatchContact_Erp_Transporter");
            });

            modelBuilder.Entity<ErpDiscount>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DiscountGroup");

                entity.ToTable("Erp_Discount");

                entity.HasIndex(e => new { e.CompanyId, e.DiscountType, e.DiscountCode }, "Erp_Discount_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.DiscountType }, "Erp_Discount_IX1");

                entity.HasIndex(e => e.GlaccountId, "Erp_Discount_IX2");

                entity.HasIndex(e => e.CostCenterId, "Erp_Discount_IX3");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountCode).HasMaxLength(25);

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.Formula).HasMaxLength(100);

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDiscounts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_DiscountGroup_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpDiscounts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Discount_Erp_CostCenter");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpDiscounts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_FK_Erp_Discount_Meta_Forex");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpDiscounts)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_Discount_Erp_GLAccount");
            });

            modelBuilder.Entity<ErpDocument>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Document");

                entity.HasIndex(e => new { e.CompanyId, e.DocumentNo }, "Erp_Document_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpDocuments)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Document_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpDocuments)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_Document_Erp_Department");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpDocuments)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Document_Erp_Workplace");
            });

            modelBuilder.Entity<ErpDocumentAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_DocumentAttachment");

                entity.HasIndex(e => e.DocumentId, "Erp_DocumentAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.ErpDocumentAttachments)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_Erp_DocumenttAttachment_Erp_Document");
            });

            modelBuilder.Entity<ErpEducation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Education");

                entity.HasIndex(e => new { e.CompanyId, e.EducationCode }, "Erp_Education_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.WorkplaceId, "Erp_Education_IX1");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Caption).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EducationCode).HasMaxLength(25);

                entity.Property(e => e.Finish).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IssueAt).HasColumnType("datetime");

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpEducations)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Education_Erp_Company");

                entity.HasOne(d => d.Poll)
                    .WithMany(p => p.ErpEducations)
                    .HasForeignKey(d => d.PollId)
                    .HasConstraintName("FK_Erp_Education_Erp_Poll");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.ErpEducations)
                    .HasForeignKey(d => d.TeacherId)
                    .HasConstraintName("FK_Erp_Education_Meta_User");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpEducations)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Education_Erp_Workplace");
            });

            modelBuilder.Entity<ErpEducationAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EducationAttachment");

                entity.HasIndex(e => e.EducationId, "Erp_EducationAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Education)
                    .WithMany(p => p.ErpEducationAttachments)
                    .HasForeignKey(d => d.EducationId)
                    .HasConstraintName("FK_Erp_EducationAttachment_Erp_Education");
            });

            modelBuilder.Entity<ErpEducationStudent>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EducationStudent");

                entity.HasIndex(e => e.EducationId, "Erp_EducationStudent_IX0");

                entity.HasIndex(e => e.UserId, "Erp_EducationStudent_IX1");

                entity.HasIndex(e => e.UserGroupId, "Erp_EducationStudent_IX2");

                entity.HasIndex(e => e.ContactId, "Erp_EducationStudent_IX3");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpEducationStudents)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_EducationStudent_Erp_CurrentAccountContact");

                entity.HasOne(d => d.Education)
                    .WithMany(p => p.ErpEducationStudents)
                    .HasForeignKey(d => d.EducationId)
                    .HasConstraintName("FK_Erp_EducationStudent_Erp_Education");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpEducationStudents)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_EducationStudent_Meta_User");
            });

            modelBuilder.Entity<ErpEinvoice>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EInvoice");

                entity.HasIndex(e => e.InventoryReceiptId, "Erp_EInvoice_IX0");

                entity.HasIndex(e => e.InvoiceId, "Erp_EInvoice_IX1");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CurrencyCode).HasMaxLength(25);

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.EinvoiceData).HasColumnName("EInvoiceData");

                entity.Property(e => e.EinvoiceReference).HasColumnName("EInvoiceReference");

                entity.Property(e => e.EinvoiceSpecial)
                    .HasMaxLength(50)
                    .HasColumnName("EInvoiceSpecial");

                entity.Property(e => e.EinvoiceType).HasColumnName("EInvoiceType");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.InventoryReceiptDocumentNo).HasMaxLength(1000);

                entity.Property(e => e.InvoiceAcceptDate).HasColumnType("datetime");

                entity.Property(e => e.OrderReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.OrderReceiptDocumentNo).HasMaxLength(1000);

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptTypeName).HasMaxLength(50);

                entity.Property(e => e.ReceiverName).HasMaxLength(50);

                entity.Property(e => e.ReceiverTaxNo).HasMaxLength(25);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Uuid)
                    .HasMaxLength(50)
                    .HasColumnName("UUID");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpEinvoices)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_EInvoice_Erp_Company");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpEinvoices)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_EInvoice_Erp_InventoryReceipt");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpEinvoices)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_EInvoice_Erp_Invoice");
            });

            modelBuilder.Entity<ErpEmployee>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Employee");

                entity.HasIndex(e => new { e.CompanyId, e.EmployeeCode }, "Erp_Employee_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.DepartmentId, "Erp_Employee_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_Employee_IX2");

                entity.HasIndex(e => e.ManagerId, "Erp_Employee_IX3");

                entity.HasIndex(e => e.WorkStationId, "Erp_Employee_IX4");

                entity.HasIndex(e => new { e.CompanyId, e.ProxyNo }, "Erp_Employee_IX5");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.AsserviceEmployeeType).HasColumnName("ASServiceEmployeeType");

                entity.Property(e => e.AttendanceFee).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BankAccountNo).HasMaxLength(50);

                entity.Property(e => e.BankAdditionalNo).HasMaxLength(25);

                entity.Property(e => e.BankBranchCode).HasMaxLength(25);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BirthDebtAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BirthDebtBalance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BirthDebtUsedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BirthPlace).HasMaxLength(50);

                entity.Property(e => e.Blog).HasMaxLength(100);

                entity.Property(e => e.ContractExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.CumPrvInsurance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DisabilityRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DischargeDate).HasColumnType("datetime");

                entity.Property(e => e.DischargeNo).HasMaxLength(50);

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.EmployeeCode).HasMaxLength(25);

                entity.Property(e => e.EmployeeName).HasMaxLength(50);

                entity.Property(e => e.EmployeePicture).HasColumnType("image");

                entity.Property(e => e.EmployeeSigner).HasColumnType("image");

                entity.Property(e => e.EmployeeSurname).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EttsCode).HasMaxLength(25);

                entity.Property(e => e.Facebook).HasMaxLength(100);

                entity.Property(e => e.ForexSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.GsmPhone).HasMaxLength(50);

                entity.Property(e => e.HesCode).HasMaxLength(50);

                entity.Property(e => e.IbanNo).HasMaxLength(50);

                entity.Property(e => e.IdCardNo).HasMaxLength(50);

                entity.Property(e => e.IdCilt).HasMaxLength(50);

                entity.Property(e => e.IdCity).HasMaxLength(50);

                entity.Property(e => e.IdDistrict).HasMaxLength(50);

                entity.Property(e => e.IdFathersName).HasMaxLength(50);

                entity.Property(e => e.IdIssuedDate).HasColumnType("datetime");

                entity.Property(e => e.IdIssuedPlace).HasMaxLength(50);

                entity.Property(e => e.IdKoy).HasMaxLength(50);

                entity.Property(e => e.IdKutuk).HasMaxLength(50);

                entity.Property(e => e.IdMahalle).HasMaxLength(50);

                entity.Property(e => e.IdMothersName).HasMaxLength(50);

                entity.Property(e => e.IdNo).HasMaxLength(50);

                entity.Property(e => e.IdSayfa).HasMaxLength(50);

                entity.Property(e => e.IndPensionComPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IndPensionEmpPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Last3Years).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastYearCumTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastYearCumTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastYearMinWageIncomeTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LinkedIn).HasMaxLength(100);

                entity.Property(e => e.MaxDiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.MedReportedDays).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MilitaryDebtAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MilitaryDebtBalance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MilitaryDebtUsedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageIncomeCumTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Nationality).HasMaxLength(100);

                entity.Property(e => e.NonWorkWeek).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PensionDeductionRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.PensionEndDate).HasColumnType("datetime");

                entity.Property(e => e.PensionStartDate).HasColumnType("datetime");

                entity.Property(e => e.PortalPassword).HasMaxLength(32);

                entity.Property(e => e.PreviousEmployer).HasMaxLength(100);

                entity.Property(e => e.PreviousEmployerAddress).HasMaxLength(1000);

                entity.Property(e => e.PreviousQuitDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousSurname).HasMaxLength(50);

                entity.Property(e => e.ProxyNo).HasMaxLength(50);

                entity.Property(e => e.PrvInsuranceComPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrvInsuranceEmpPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrvInsuranceEmpPrmEndDate).HasColumnType("datetime");

                entity.Property(e => e.PrvInsuranceEmpPrmStartDate).HasColumnType("datetime");

                entity.Property(e => e.QuitExplanation).HasMaxLength(100);

                entity.Property(e => e.Salary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SeverancePayDate).HasColumnType("datetime");

                entity.Property(e => e.ShortTimePaidDay).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShortTimeWorkingEndDate).HasColumnType("datetime");

                entity.Property(e => e.ShortTimeWorkingStartDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SpecialExpenditureBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiNo).HasMaxLength(25);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.ThisYearCumTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ThisYearCumTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ToleranceLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Twitter).HasMaxLength(100);

                entity.Property(e => e.UnionMemberNo).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsedMinWageIncomeTax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UsedMinWageStampDue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WebAddress).HasMaxLength(50);

                entity.Property(e => e.WorkTime).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WorkWeek).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_Erp_Employee_Meta_Bank");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Calendar");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Employee_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Employee_Erp_CurrentAccount");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpEmployeeDepartments)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Department");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Employee_Meta_Forex");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_Employee_Erp_GLAccount");

                entity.HasOne(d => d.LeaveGroup)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.LeaveGroupId)
                    .HasConstraintName("FK_Erp_Employee_Hrm_LeaveGroup");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.InverseManager)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Employee_DBOnly");

                entity.HasOne(d => d.MlssQuitReason)
                    .WithMany(p => p.ErpEmployeeMlssQuitReasons)
                    .HasForeignKey(d => d.MlssQuitReasonId)
                    .HasConstraintName("FK_Erp_Employee_Meta_HrmQuit1");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Erp_Employee_Hrm_Position");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Project");

                entity.HasOne(d => d.SsiProfession)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.SsiProfessionId)
                    .HasConstraintName("FK_Erp_Employee_Meta_HrmProfession");

                entity.HasOne(d => d.SsiQuitReason)
                    .WithMany(p => p.ErpEmployeeSsiQuitReasons)
                    .HasForeignKey(d => d.SsiQuitReasonId)
                    .HasConstraintName("FK_Erp_Employee_Meta_HrmQuit");

                entity.HasOne(d => d.TaxOffice)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.TaxOfficeId)
                    .HasConstraintName("FK_Erp_Employee_Meta_TaxOffice");

                entity.HasOne(d => d.WorkStation)
                    .WithMany(p => p.ErpEmployeeWorkStations)
                    .HasForeignKey(d => d.WorkStationId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Department1");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpEmployees)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Employee_Erp_Workplace");
            });

            modelBuilder.Entity<ErpEmployeeAddPayment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeeAddPayment");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeductionRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AddPayment)
                    .WithMany(p => p.ErpEmployeeAddPayments)
                    .HasForeignKey(d => d.AddPaymentId)
                    .HasConstraintName("FK_Erp_EmployeeAddPayment_Hrm_AddPaymentDeduction");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeAddPayments)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeeAddPayment_Erp_Employee");
            });

            modelBuilder.Entity<ErpEmployeeAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeeAttachment");

                entity.HasIndex(e => e.EmployeeId, "Erp_EmployeeAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeAttachments)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeeAttachment_Erp_Employee");
            });

            modelBuilder.Entity<ErpEmployeeCompetency>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeeCompetency");

                entity.HasIndex(e => e.EmployeeId, "Erp_EmployeeCompetency_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_EmployeeCompetency_IX1");

                entity.HasIndex(e => e.ServiceId, "Erp_EmployeeCompetency_IX2");

                entity.HasIndex(e => e.CompetencyId, "Erp_EmployeeCompetency_IX3");

                entity.HasIndex(e => e.ProcessId, "Erp_EmployeeCompetency_IX4");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Competency)
                    .WithMany(p => p.ErpEmployeeCompetencies)
                    .HasForeignKey(d => d.CompetencyId)
                    .HasConstraintName("FK_Erp_EmployeeCompetency_Erp_Competency");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeCompetencies)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeeCompetency_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpEmployeeCompetencies)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_EmployeeCompetency_Erp_Inventory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpEmployeeCompetencies)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_EmployeeCompetency_Erp_Process");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpEmployeeCompetencies)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_EmployeeCompetency_Erp_Resource");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpEmployeeCompetencies)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_EmployeeCompetency_Erp_Service");
            });

            modelBuilder.Entity<ErpEmployeeHistory>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeeHistory");

                entity.Property(e => e.AppliedArtical).HasMaxLength(25);

                entity.Property(e => e.AttendanceFee).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ForexSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.IndPensionComPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IndPensionEmpPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PrvInsuranceComPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrvInsuranceEmpPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QuitDate).HasColumnType("datetime");

                entity.Property(e => e.QuitExplanation).HasMaxLength(100);

                entity.Property(e => e.Salary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.Departman)
                    .WithMany(p => p.ErpEmployeeHistories)
                    .HasForeignKey(d => d.DepartmanId)
                    .HasConstraintName("FK_Erp_EmployeeHistory_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeHistories)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeeHistory_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpEmployeeHistories)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_EmployeeHistory_Meta_Forex");

                entity.HasOne(d => d.MlssQuitReason)
                    .WithMany(p => p.ErpEmployeeHistories)
                    .HasForeignKey(d => d.MlssQuitReasonId)
                    .HasConstraintName("FK_Erp_EmployeeHistory_Meta_HrmQuit");
            });

            modelBuilder.Entity<ErpEmployeeIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_EmployeeAccount");

                entity.ToTable("Erp_EmployeeIA");

                entity.HasIndex(e => e.EmployeeId, "Erp_EmployeeIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_EmployeeIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_EmployeeIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpEmployeeIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_EmployeeIA_Erp_CostCenter");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeIas)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EmployeeAccount_Employee");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpEmployeeIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_EmployeeIA_Erp_GLAccount");
            });

            modelBuilder.Entity<ErpEmployeePremium>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeePremium");

                entity.HasIndex(e => e.EmployeeId, "Erp_EmployeePremium_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LowerLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PremiumRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UpperLimit).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeePremia)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeePremium_Erp_Employee");
            });

            modelBuilder.Entity<ErpEmployeeRelation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeeRelation");

                entity.Property(e => e.AddressLine1).HasMaxLength(1000);

                entity.Property(e => e.AddressLine2).HasMaxLength(1000);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BirthPlace).HasMaxLength(50);

                entity.Property(e => e.ClassNo).HasMaxLength(25);

                entity.Property(e => e.Cvid).HasColumnName("CVId");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DisabilityRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EMailAddress");

                entity.Property(e => e.FathersName).HasMaxLength(50);

                entity.Property(e => e.GsmNo).HasMaxLength(50);

                entity.Property(e => e.IdCardNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MothersName).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Nationality).HasMaxLength(100);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.RegisteredDate).HasColumnType("datetime");

                entity.Property(e => e.SchoolName).HasMaxLength(100);

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.ErpEmployeeRelations)
                    .HasForeignKey(d => d.Cvid)
                    .HasConstraintName("FK_Erp_EmployeeRelation_Hrm_CV");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeRelations)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeeRelation_Erp_Employee");
            });

            modelBuilder.Entity<ErpEmployeeTimeAttandance>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_EmployeeTimeAttandance");

                entity.HasIndex(e => e.EmployeeId, "Erp_EmployeeTimeAttandance_IX0");

                entity.HasIndex(e => e.ResourceId, "Erp_EmployeeTimeAttandance_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TrDate).HasColumnType("datetime");

                entity.Property(e => e.TrTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpEmployeeTimeAttandances)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_EmployeeTimeAttandance_Erp_Employee");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpEmployeeTimeAttandances)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_EmployeeTimeAttandance_Erp_Resource");
            });

            modelBuilder.Entity<ErpExpense>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Expense");

                entity.ToTable("Erp_Expense");

                entity.HasIndex(e => new { e.CompanyId, e.ExpenseType, e.ExpenseCode }, "Erp_Expense_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.ExpenseType }, "Erp_Expense_IX1");

                entity.HasIndex(e => e.GlaccountId, "Erp_Expense_IX2");

                entity.HasIndex(e => e.CostCenterId, "Erp_Expense_IX3");

                entity.HasIndex(e => e.ReflectionGlaccountId, "Erp_Expense_IX4");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExpenseCode).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.Formula).HasMaxLength(100);

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReflectionGlaccountId).HasColumnName("ReflectionGLAccountId");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpExpenses)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Expense_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpExpenses)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Expense_Erp_CostCenter");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpExpenseGlaccounts)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_Expense_Erp_GLAccount");

                entity.HasOne(d => d.ReflectionGlaccount)
                    .WithMany(p => p.ErpExpenseReflectionGlaccounts)
                    .HasForeignKey(d => d.ReflectionGlaccountId)
                    .HasConstraintName("FK_Erp_Expense_Erp_GLAccount2");
            });

            modelBuilder.Entity<ErpExpenseReport>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ExpenseReport");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpExpenseReports)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ExpenseReport_Erp_Company");
            });

            modelBuilder.Entity<ErpExpo>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Expo");

                entity.HasIndex(e => new { e.CompanyId, e.ExpoType, e.ExpoSubType, e.ExpoYear, e.ExpoNo }, "Erp_Expo_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.ManufacturerId, "Erp_Expo_IX1");

                entity.HasIndex(e => e.EmployeeId, "Erp_Expo_IX10");

                entity.HasIndex(e => e.DabbankId, "Erp_Expo_IX11");

                entity.HasIndex(e => e.LetterCreditId, "Erp_Expo_IX12");

                entity.HasIndex(e => e.AdvisingBankAccountId, "Erp_Expo_IX13");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Expo_IX2");

                entity.HasIndex(e => e.SellerId, "Erp_Expo_IX3");

                entity.HasIndex(e => e.CountryId, "Erp_Expo_IX4");

                entity.HasIndex(e => e.CustomerId, "Erp_Expo_IX5");

                entity.HasIndex(e => e.CorrespondentBankId, "Erp_Expo_IX6");

                entity.HasIndex(e => e.IntermediaryBankId, "Erp_Expo_IX7");

                entity.HasIndex(e => e.InvoiceId, "Erp_Expo_IX8");

                entity.HasIndex(e => e.ProjectId, "Erp_Expo_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AdditionCustomTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AntiDampingTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.AuthorityName).HasMaxLength(50);

                entity.Property(e => e.BillOfLoadingDate).HasColumnType("datetime");

                entity.Property(e => e.BillOfLoadingNo).HasMaxLength(25);

                entity.Property(e => e.Ciftotal)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("CIFTotal");

                entity.Property(e => e.CommissionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CorrespondentBankReference).HasMaxLength(50);

                entity.Property(e => e.CustomTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DabbankId).HasColumnName("DABBankId");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveredPlace).HasMaxLength(50);

                entity.Property(e => e.DestinationDate).HasColumnType("datetime");

                entity.Property(e => e.DestinationPoint).HasMaxLength(50);

                entity.Property(e => e.DischargingPoint).HasMaxLength(50);

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Doamount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DOAmount");

                entity.Property(e => e.DoarrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOArrivalDate");

                entity.Property(e => e.DoclosedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOClosedDate");

                entity.Property(e => e.DocustomOutwards)
                    .HasMaxLength(50)
                    .HasColumnName("DOCustomOutwards");

                entity.Property(e => e.Dodate)
                    .HasColumnType("datetime")
                    .HasColumnName("DODate");

                entity.Property(e => e.DodeliveredDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DODeliveredDate");

                entity.Property(e => e.Doforex1Amount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DOForex1Amount");

                entity.Property(e => e.Doforex1Rate)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DOForex1Rate");

                entity.Property(e => e.Doforex2Amount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DOForex2Amount");

                entity.Property(e => e.Doforex2Rate)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DOForex2Rate");

                entity.Property(e => e.DogrossWeight)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DOGrossWeight");

                entity.Property(e => e.DonetWeight)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("DONetWeight");

                entity.Property(e => e.Dono)
                    .HasMaxLength(50)
                    .HasColumnName("DONo");

                entity.Property(e => e.DooutwardsGate)
                    .HasMaxLength(50)
                    .HasColumnName("DOOutwardsGate");

                entity.Property(e => e.ExchangeWarningDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ExpoAsset).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpoDate).HasColumnType("datetime");

                entity.Property(e => e.ExpoNo).HasMaxLength(25);

                entity.Property(e => e.Fobtotal)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("FOBTotal");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FreightCost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GeneralTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GoodsLocation).HasMaxLength(50);

                entity.Property(e => e.GuaranteeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GuaranteeDate).HasColumnType("datetime");

                entity.Property(e => e.GuaranteeNo).HasMaxLength(50);

                entity.Property(e => e.GuaranteeSolvedDate).HasColumnType("datetime");

                entity.Property(e => e.IbanNo).HasMaxLength(25);

                entity.Property(e => e.IncomingDabpercentage)
                    .HasColumnType("decimal(11, 8)")
                    .HasColumnName("IncomingDABPercentage");

                entity.Property(e => e.IncuranceDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Instructor).HasMaxLength(50);

                entity.Property(e => e.InsuranceAgencyName).HasMaxLength(50);

                entity.Property(e => e.InsuranceForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsuranceLastOfferDate).HasColumnType("datetime");

                entity.Property(e => e.InsuranceNo).HasMaxLength(25);

                entity.Property(e => e.IntermediaryBankReference).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo).HasMaxLength(25);

                entity.Property(e => e.LastForexReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.LastReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.LetterOfCreditNo).HasMaxLength(50);

                entity.Property(e => e.LocalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ManifestDate).HasColumnType("datetime");

                entity.Property(e => e.ManifestNo).HasMaxLength(25);

                entity.Property(e => e.ManufacturerInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.ManufacturerInvoiceNo).HasMaxLength(25);

                entity.Property(e => e.ManufacturerReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ManufacturerReceiptNo).HasMaxLength(25);

                entity.Property(e => e.PaymentTerm).HasColumnType("datetime");

                entity.Property(e => e.ProductOrigin).HasMaxLength(50);

                entity.Property(e => e.QuantityTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SellerInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.SellerInvoiceNo).HasMaxLength(25);

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentPlace).HasMaxLength(50);

                entity.Property(e => e.SsiCost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StampDutyTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalLocalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VehicleFlag).HasMaxLength(50);

                entity.Property(e => e.VehicleId)
                    .HasMaxLength(50)
                    .HasColumnName("VehicleID");

                entity.Property(e => e.VehicleName).HasMaxLength(50);

                entity.Property(e => e.VehicleNationality).HasMaxLength(50);

                entity.Property(e => e.VehicleScheduleNo).HasMaxLength(50);

                entity.Property(e => e.VehicleTypeName).HasMaxLength(50);

                entity.Property(e => e.VerifyBankDate).HasColumnType("datetime");

                entity.Property(e => e.WaybillDate).HasColumnType("datetime");

                entity.Property(e => e.WaybillNo).HasMaxLength(25);

                entity.HasOne(d => d.Address1)
                    .WithMany(p => p.ErpExpoAddress1s)
                    .HasForeignKey(d => d.Address1Id)
                    .HasConstraintName("FK_Erp_Expo_Erp_Address1");

                entity.HasOne(d => d.Address2)
                    .WithMany(p => p.ErpExpoAddress2s)
                    .HasForeignKey(d => d.Address2Id)
                    .HasConstraintName("FK_Erp_Expo_Erp_Address2");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpExpoAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_Expo_Erp_Address");

                entity.HasOne(d => d.AdvisingBankAccount)
                    .WithMany(p => p.ErpExpoAdvisingBankAccounts)
                    .HasForeignKey(d => d.AdvisingBankAccountId)
                    .HasConstraintName("FK_Erp_Expo_Erp_BankAdvising");

                entity.HasOne(d => d.Commissioner)
                    .WithMany(p => p.ErpExpoCommissioners)
                    .HasForeignKey(d => d.CommissionerId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountCommissioner");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Expo_Erp_Company");

                entity.HasOne(d => d.CorrespondentBank)
                    .WithMany(p => p.ErpExpoCorrespondentBanks)
                    .HasForeignKey(d => d.CorrespondentBankId)
                    .HasConstraintName("FK_Erp_Expo_Erp_BankCorrespondent");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Expo_Meta_Country");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpExpoCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccount");

                entity.HasOne(d => d.CustomBroker)
                    .WithMany(p => p.ErpExpoCustomBrokers)
                    .HasForeignKey(d => d.CustomBrokerId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountBroker");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpExpoCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountCustomer");

                entity.HasOne(d => d.Dabbank)
                    .WithMany(p => p.ErpExpoDabbanks)
                    .HasForeignKey(d => d.DabbankId)
                    .HasConstraintName("FK_Erp_Expo_Erp_BankDABBank");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Expo_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpExpoForices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Expo_Meta_Forex");

                entity.HasOne(d => d.GuaranteeBank)
                    .WithMany(p => p.ErpExpoGuaranteeBanks)
                    .HasForeignKey(d => d.GuaranteeBankId)
                    .HasConstraintName("FK_Erp_Expo_Erp_BankGuarantee");

                entity.HasOne(d => d.InsuranceForex)
                    .WithMany(p => p.ErpExpoInsuranceForices)
                    .HasForeignKey(d => d.InsuranceForexId)
                    .HasConstraintName("FK_Erp_Expo_Meta_ForexInsurance");

                entity.HasOne(d => d.Insurance)
                    .WithMany(p => p.ErpExpoInsurances)
                    .HasForeignKey(d => d.InsuranceId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountInsurance");

                entity.HasOne(d => d.IntermediaryBank)
                    .WithMany(p => p.ErpExpoIntermediaryBanks)
                    .HasForeignKey(d => d.IntermediaryBankId)
                    .HasConstraintName("FK_Erp_Expo_Erp_BankIntermediary");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_Expo_Erp_Invoice");

                entity.HasOne(d => d.LetterCredit)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.LetterCreditId)
                    .HasConstraintName("FK_Erp_Expo_Erp_BankCreditLC");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.ErpExpoManufacturers)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountManufacturer");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_Expo_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_Expo_Erp_Project");

                entity.HasOne(d => d.RegimeType)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.RegimeTypeId)
                    .HasConstraintName("FK_Erp_Expo_Erp_RegimeType");

                entity.HasOne(d => d.Seller)
                    .WithMany(p => p.ErpExpoSellers)
                    .HasForeignKey(d => d.SellerId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountSeller");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpExpoTransporters)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_Expo_Erp_CurrentAccountTransporter");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpExpos)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Expo_Erp_Workplace");
            });

            modelBuilder.Entity<ErpExpoAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ExpoAttachment");

                entity.HasIndex(e => e.ExpoId, "Erp_ExpoAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpExpoAttachments)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_ExpoAttachment_Erp_Expo");
            });

            modelBuilder.Entity<ErpExpoImportClosing>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ExpoImportClosing");

                entity.HasIndex(e => e.ExpoId, "Erp_ExpoImportClosing_IX0");

                entity.HasIndex(e => e.ImportItemId, "Erp_ExpoImportClosing_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpExpoImportClosings)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_ExpoImportClosing_Erp_Expo");

                entity.HasOne(d => d.ImportItem)
                    .WithMany(p => p.ErpExpoImportClosings)
                    .HasForeignKey(d => d.ImportItemId)
                    .HasConstraintName("FK_Erp_ExpoImportClosing_Erp_ExpoItem_DBOnly");
            });

            modelBuilder.Entity<ErpExpoItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ExpoItem");

                entity.HasIndex(e => e.ExpoId, "Erp_ExpoItem_IX0");

                entity.HasIndex(e => e.ParentItemId, "Erp_ExpoItem_IX1");

                entity.HasIndex(e => e.ImportExpoId, "Erp_ExpoItem_IX10");

                entity.HasIndex(e => e.PackingListId, "Erp_ExpoItem_IX11");

                entity.HasIndex(e => e.PackingListItemId, "Erp_ExpoItem_IX12");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_ExpoItem_IX13");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_ExpoItem_IX14");

                entity.HasIndex(e => e.InventoryReceiptId, "Erp_ExpoItem_IX15");

                entity.HasIndex(e => e.InvoiceId, "Erp_ExpoItem_IX16");

                entity.HasIndex(e => e.OrderReceiptId, "Erp_ExpoItem_IX17");

                entity.HasIndex(e => e.InventoryId, "Erp_ExpoItem_IX2");

                entity.HasIndex(e => e.ServiceCardId, "Erp_ExpoItem_IX3");

                entity.HasIndex(e => e.ProjectId, "Erp_ExpoItem_IX4");

                entity.HasIndex(e => e.EmployeeId, "Erp_ExpoItem_IX5");

                entity.HasIndex(e => e.PackagingId, "Erp_ExpoItem_IX6");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_ExpoItem_IX7");

                entity.HasIndex(e => e.WorkOrderId, "Erp_ExpoItem_IX8");

                entity.HasIndex(e => e.CtspId, "Erp_ExpoItem_IX9");

                entity.Property(e => e.AdditionCustomTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AdditionCustomTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.AntiDampingTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AntiDampingTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CostUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FobunitPrice)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("FOBUnitPrice");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocalReferenceAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReferencePrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StampDutyAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalLocalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Ctsp)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.CtspId)
                    .HasConstraintName("FK_Erp_ExpoItem_Meta_Ctsp");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Discount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Expense");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpExpoItemExpos)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Expo");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ExpoItem_Meta_Forex");

                entity.HasOne(d => d.ImportExpo)
                    .WithMany(p => p.ErpExpoItemImportExpos)
                    .HasForeignKey(d => d.ImportExpoId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Expo_DBOnly");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_InventoryReceipt");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Invoice");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_OrderReceipt");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_OrderReceiptItem");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.PackagingId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Packaging");

                entity.HasOne(d => d.PackingList)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.PackingListId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_PackingList");

                entity.HasOne(d => d.PackingListItem)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.PackingListItemId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_PackingListItem");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_ExpoItem");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Project");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_Service");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_ExpoItem_Meta_UnitSetItem");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpExpoItems)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_ExpoItem_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpExpoItemDetail>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ExpoItemDetail");

                entity.HasIndex(e => e.ExpoId, "Erp_ExpoItemDetail_IX0");

                entity.HasIndex(e => e.ExpoItemId, "Erp_ExpoItemDetail_IX1");

                entity.Property(e => e.ContainerNo).HasMaxLength(50);

                entity.Property(e => e.ContainerType).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpExpoItemDetails)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_ExpoItemDetail_Erp_Expo");

                entity.HasOne(d => d.ExpoItem)
                    .WithMany(p => p.ErpExpoItemDetails)
                    .HasForeignKey(d => d.ExpoItemId)
                    .HasConstraintName("FK_Erp_ExpoItemDetail_Erp_ExpoItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpExpoItemDetails)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_ExpoItemDetail_Meta_UnitSetItem");
            });

            modelBuilder.Entity<ErpExpoItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ExpoItemVariant");

                entity.HasIndex(e => e.ExpoItemId, "Erp_ExpoItemVariant_IX1");

                entity.HasIndex(e => e.InventoryId, "Erp_ExpoItemVariant_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ExpoItem)
                    .WithMany(p => p.ErpExpoItemVariants)
                    .HasForeignKey(d => d.ExpoItemId)
                    .HasConstraintName("FK_Erp_ExpoItemVariant_Erp_ExpoItem");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpExpoItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ExpoItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpExpoItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_ExpoItemVariant_Erp_InventoryVariant");
            });

            modelBuilder.Entity<ErpFaultyCard>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_FaultyCard");

                entity.HasIndex(e => e.FaultyCode, "Erp_FaultyCard_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FaultyCode).HasMaxLength(25);

                entity.Property(e => e.FaultyName).HasMaxLength(50);

                entity.Property(e => e.FaultyPoint).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_FaultyCard_Erp_FaultyCard_DBOnly");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpFaultyCards)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_FaultyCard_Erp_Process");

                entity.HasOne(d => d.QualityTypeRec)
                    .WithMany(p => p.ErpFaultyCards)
                    .HasForeignKey(d => d.QualityTypeRecId)
                    .HasConstraintName("FK_Erp_FaultyCard_Erp_QualityType");
            });

            modelBuilder.Entity<ErpFinancialTable>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_FinancialTable");

                entity.HasIndex(e => new { e.CompanyId, e.TableType, e.TableNo }, "Erp_FinancialTable_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PreviousPeriodEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousPeriodStartDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.TableNo).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BalanceTable)
                    .WithMany(p => p.InverseBalanceTable)
                    .HasForeignKey(d => d.BalanceTableId)
                    .HasConstraintName("FK_Erp_FinancialTable_Erp_FinancialTable1_DBOnly");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpFinancialTables)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_FinancialTable_Erp_Company");

                entity.HasOne(d => d.ProfitlossTable)
                    .WithMany(p => p.InverseProfitlossTable)
                    .HasForeignKey(d => d.ProfitlossTableId)
                    .HasConstraintName("FK_Erp_FinancialTable_Erp_FinancialTable2_DBOnly");
            });

            modelBuilder.Entity<ErpFinancialTableItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_FinancialTableItem");

                entity.HasIndex(e => e.FinancialTableId, "Erp_FinancialTableItem_IX0");

                entity.HasIndex(e => e.StartAccountId, "Erp_FinancialTableItem_IX1");

                entity.HasIndex(e => e.EndAccountId, "Erp_FinancialTableItem_IX2");

                entity.HasIndex(e => e.EndAccountId, "Erp_FinancialTableItem_IX3");

                entity.HasIndex(e => new { e.CompanyId, e.FinancialTableId }, "Erp_FinancialTableItem_IX4");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Aptype).HasColumnName("APType");

                entity.Property(e => e.CforexAmount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("CForexAmount");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Formula).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasMaxLength(25);

                entity.Property(e => e.Pamount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PAmount");

                entity.Property(e => e.Pamount2)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PAmount2");

                entity.Property(e => e.Pamount3)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PAmount3");

                entity.Property(e => e.PcforexAmount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PCForexAmount");

                entity.Property(e => e.PforexAmount)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PForexAmount");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpFinancialTableItems)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_FinancialTableItem_Erp_Company");

                entity.HasOne(d => d.EndAccount)
                    .WithMany(p => p.ErpFinancialTableItemEndAccounts)
                    .HasForeignKey(d => d.EndAccountId)
                    .HasConstraintName("FK_Erp_FinancialTableItem_Erp_GLAccount2");

                entity.HasOne(d => d.FinancialTable)
                    .WithMany(p => p.ErpFinancialTableItems)
                    .HasForeignKey(d => d.FinancialTableId)
                    .HasConstraintName("FK_Erp_FinancialTableItem_Erp_FinancialTable");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_FinancialTableItem_Erp_FinancialTableItem");

                entity.HasOne(d => d.StartAccount)
                    .WithMany(p => p.ErpFinancialTableItemStartAccounts)
                    .HasForeignKey(d => d.StartAccountId)
                    .HasConstraintName("FK_Erp_FinancialTableItem_Erp_GLAccount1");
            });

            modelBuilder.Entity<ErpFixedAssetDebit>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_FixedAssetDebit");

                entity.ToTable("Erp_FixedAssetDebit");

                entity.HasIndex(e => e.InventoryId, "Erp_FixedAssetDebit_IX0");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DebitEmployee)
                    .WithMany(p => p.ErpFixedAssetDebitDebitEmployees)
                    .HasForeignKey(d => d.DebitEmployeeId)
                    .HasConstraintName("FK_Erp_FixedAssetDebit_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpFixedAssetDebitInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_FixedAssetDebit_Erp_Inventory");

                entity.HasOne(d => d.InventoryInventory)
                    .WithMany(p => p.ErpFixedAssetDebitInventoryInventories)
                    .HasForeignKey(d => d.InventoryInventoryId)
                    .HasConstraintName("FK_Erp_FixedAssetDebit_Erp_Inventory2_DBOnly");

                entity.HasOne(d => d.UsedEmployee)
                    .WithMany(p => p.ErpFixedAssetDebitUsedEmployees)
                    .HasForeignKey(d => d.UsedEmployeeId)
                    .HasConstraintName("FK_Erp_FixedAssetDebit_Erp_Employee2");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpFixedAssetDebits)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_FixedAssetDebit_Erp_Workplace");
            });

            modelBuilder.Entity<ErpFixedAssetDepreciation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_FixedAssetDepreciation");

                entity.HasIndex(e => e.InventoryId, "Erp_FixedAssetDepreciation_IX0");

                entity.Property(e => e.AccumulatedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AppreciationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CurrentDepreciationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CurrentValue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CurrentYearDepreciationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepreciationRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PartianDepreciationRemainder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PreviousDepreciationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.RevaluatedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluatedExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationAccumulatedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationAccumulatedAmount298c).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationAppreciationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationAppreciationAmount298c).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationNetAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationNetAmount298c).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationPurchaseCost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationPurchaseCost298c).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.RevaluationRate298c).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.TotalAccumulatedDepreciationAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpFixedAssetDepreciations)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_FixedAssetDepreciation_Erp_Inventory");
            });

            modelBuilder.Entity<ErpFixedAssetExpense>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_FixedAssetExpense");

                entity.HasIndex(e => e.InventoryId, "Erp_FixedAssetExpense_IX0");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_FixedAssetExpense_IX1");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ExpenseDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpFixedAssetExpenses)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_FixedAssetExpense_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpFixedAssetExpenses)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_FixedAssetExpense_Erp_InventoryReceiptItem");
            });

            modelBuilder.Entity<ErpFixedAssetUsefulServiceLife>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_FixedAssetUsefulServiceLife");

                entity.ToTable("Erp_FixedAssetUsefulServiceLife");

                entity.HasIndex(e => new { e.CompanyId, e.UsefulServiceLifeCode }, "Erp_FixedAssetUsefulServiceLife_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepreciationRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsefulServiceLifeCode).HasMaxLength(25);

                entity.Property(e => e.UsefulServiceLifeName).HasMaxLength(1000);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpFixedAssetUsefulServiceLives)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_FixedAssetUsefulServiceLife_Erp_Company");
            });

            modelBuilder.Entity<ErpGiftVoucher>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GiftVoucher");

                entity.ToTable("Erp_GiftVoucher");

                entity.HasIndex(e => new { e.CompanyId, e.VoucherCode }, "Erp_GiftVoucher_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.PosReceiptId, "Erp_GiftVoucher_IX1");

                entity.HasIndex(e => e.ReceivedPosReceiptId, "Erp_GiftVoucher_IX2");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PosReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ProducedDate).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceivedPosReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SerialNo).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VoucherCode).HasMaxLength(25);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGiftVouchers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GiftVoucher_Erp_Company");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpGiftVouchers)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_GiftVoucher_Meta_Forex");

                entity.HasOne(d => d.GiftVoucherType)
                    .WithMany(p => p.ErpGiftVouchers)
                    .HasForeignKey(d => d.GiftVoucherTypeId)
                    .HasConstraintName("FK_Erp_GiftVoucher_Erp_GiftVoucherType");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpGiftVoucherPosReceipts)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_GiftVoucher_Erp_Pos");

                entity.HasOne(d => d.ReceivedPosReceipt)
                    .WithMany(p => p.ErpGiftVoucherReceivedPosReceipts)
                    .HasForeignKey(d => d.ReceivedPosReceiptId)
                    .HasConstraintName("FK_Erp_GiftVoucher_Erp_Pos1");
            });

            modelBuilder.Entity<ErpGiftVoucherDept>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GiftVoucherDept");

                entity.ToTable("Erp_GiftVoucherDept");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpGiftVoucherDepts)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_GiftVoucherDept_Erp_Department");

                entity.HasOne(d => d.GiftVoucher)
                    .WithMany(p => p.ErpGiftVoucherDepts)
                    .HasForeignKey(d => d.GiftVoucherId)
                    .HasConstraintName("FK_Erp_GiftVoucherDept_Erp_GiftVoucher");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpGiftVoucherDepts)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_GiftVoucherDept_Erp_InventoryGroup");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpGiftVoucherDepts)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_GiftVoucherDept_Erp_Mark");
            });

            modelBuilder.Entity<ErpGiftVoucherType>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GiftVoucherType");

                entity.ToTable("Erp_GiftVoucherType");

                entity.HasIndex(e => new { e.CompanyId, e.VoucherTypeCode }, "Erp_GiftVoucherType_IX0")
                    .IsUnique();

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CodeTemplate).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MaximumAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinumumAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VoucherTypeCode).HasMaxLength(25);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGiftVoucherTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GiftVoucherType_Erp_Company");

                entity.HasOne(d => d.InventoryCampaign)
                    .WithMany(p => p.ErpGiftVoucherTypes)
                    .HasForeignKey(d => d.InventoryCampaignId)
                    .HasConstraintName("FK_Erp_GiftVoucherType_Erp_InventoryCampaign");
            });

            modelBuilder.Entity<ErpGiftVoucherTypeDept>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GiftVoucherTypeDept");

                entity.ToTable("Erp_GiftVoucherTypeDept");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpGiftVoucherTypeDepts)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_GiftVoucherTypeDept_Erp_Department");

                entity.HasOne(d => d.GiftVoucherType)
                    .WithMany(p => p.ErpGiftVoucherTypeDepts)
                    .HasForeignKey(d => d.GiftVoucherTypeId)
                    .HasConstraintName("FK_Erp_GiftVoucherTypeDept_Erp_GiftVoucherType");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpGiftVoucherTypeDepts)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_GiftVoucherTypeDept_Erp_InventoryGroup");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpGiftVoucherTypeDepts)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_GiftVoucherTypeDept_Erp_Mark");
            });

            modelBuilder.Entity<ErpGlaccount>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GLAccount");

                entity.ToTable("Erp_GLAccount");

                entity.HasIndex(e => new { e.CompanyId, e.AccountCode }, "Erp_GLAccount_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AccountCode).HasMaxLength(25);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.Cdtype).HasColumnName("CDType");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.IdCardNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.UdGiderTipi)
                    .HasMaxLength(50)
                    .HasColumnName("Ud_GiderTipi");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGlaccounts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GLAccount_Erp_Company");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpGlaccounts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_GLAccount_Meta_Forex");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpGlaccounts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_GLAccount_Erp_Workplace");
            });

            modelBuilder.Entity<ErpGlaccountTotal>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GLAccountTotal");

                entity.ToTable("Erp_GLAccountTotal");

                entity.HasIndex(e => e.AccountId, "Erp_GLAccountTotal_IX0");

                entity.HasIndex(e => new { e.AccountId, e.FiscalYear }, "Erp_GLAccountTotal_IX1");

                entity.Property(e => e.Credit01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit12).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit01).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit02).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit03).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit04).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit05).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit06).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit07).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit08).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit09).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit12).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ErpGlaccountTotals)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Erp_GLAccountTotal_Erp_GLAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpGlaccountTotals)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_GLAccountTotal_Meta_Forex");
            });

            modelBuilder.Entity<ErpGleledger>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLELedger");

                entity.Property(e => e.AccountingPeriodEnd).HasColumnType("datetime");

                entity.Property(e => e.AccountingPeriodStart).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ElcertificateData).HasColumnName("ELCertificateData");

                entity.Property(e => e.ElcertificateFileName)
                    .HasMaxLength(50)
                    .HasColumnName("ELCertificateFileName");

                entity.Property(e => e.ElendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ELEndDate");

                entity.Property(e => e.ElfileCode)
                    .HasMaxLength(50)
                    .HasColumnName("ELFileCode");

                entity.Property(e => e.ElfileSize)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ELFileSize");

                entity.Property(e => e.Elguid)
                    .HasMaxLength(50)
                    .HasColumnName("ELGuid");

                entity.Property(e => e.ElitemNo).HasColumnName("ELItemNo");

                entity.Property(e => e.EllastReceiptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ELLastReceiptDate");

                entity.Property(e => e.ElledgerData).HasColumnName("ELLedgerData");

                entity.Property(e => e.ElledgerFileName)
                    .HasMaxLength(50)
                    .HasColumnName("ELLedgerFileName");

                entity.Property(e => e.Elmonth).HasColumnName("ELMonth");

                entity.Property(e => e.ElstartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ELStartDate");

                entity.Property(e => e.Elstatus).HasColumnName("ELStatus");

                entity.Property(e => e.EltrialBalanceFileCode)
                    .HasMaxLength(50)
                    .HasColumnName("ELTrialBalanceFileCode");

                entity.Property(e => e.EltrialBalanceFileName)
                    .HasMaxLength(50)
                    .HasColumnName("ELTrialBalanceFileName");

                entity.Property(e => e.EltrialBalanceGuid).HasColumnName("ELTrialBalanceGuid");

                entity.Property(e => e.Eltype).HasColumnName("ELType");

                entity.Property(e => e.Elyear).HasColumnName("ELYear");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGleledgers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GLELedger_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpGleledgers)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_GLELedger_Erp_Workplace");
            });

            modelBuilder.Entity<ErpGlintegration>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLIntegration");

                entity.Property(e => e.CostCenterCode).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GlaccountCode)
                    .HasMaxLength(100)
                    .HasColumnName("GLAccountCode");

                entity.Property(e => e.GlaccountCode2)
                    .HasMaxLength(100)
                    .HasColumnName("GLAccountCode2");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IntegrationExplanation).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<ErpGlreceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GLReceipt");

                entity.ToTable("Erp_GLReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptDate, e.ReceiptType, e.ReceiptNo }, "Erp_GLReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.SourceModule, e.SourceId }, "Erp_GLReceipt_IX1");

                entity.HasIndex(e => e.CashId, "Erp_GLReceipt_IX2");

                entity.HasIndex(e => e.ProjectId, "Erp_GLReceipt_IX3");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.DocumentType).HasMaxLength(100);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpGlreceipts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_GLReceipt_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGlreceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GLReceipt_Erp_Company");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpGlreceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_GLReceipt_Erp_Project");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpGlreceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_GLReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpGlreceiptIntegration>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLReceiptIntegration");

                entity.HasIndex(e => e.GlreceiptId, "Erp_GLReceiptIntegration_IX0");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpGlreceiptIntegrations)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_GLReceiptIntegration_Erp_GLReceipt");
            });

            modelBuilder.Entity<ErpGlreceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_GLReceiptItem");

                entity.ToTable("Erp_GLReceiptItem");

                entity.HasIndex(e => e.GlreceiptId, "Erp_GLReceiptItem_IX0");

                entity.HasIndex(e => e.AccountId, "Erp_GLReceiptItem_IX1");

                entity.HasIndex(e => e.GlcashAccountId, "Erp_GLReceiptItem_IX2");

                entity.HasIndex(e => e.ParentItemId, "Erp_GLReceiptItem_IX3");

                entity.HasIndex(e => e.CostCenterId, "Erp_GLReceiptItem_IX4");

                entity.HasIndex(e => e.ProjectId, "Erp_GLReceiptItem_IX5");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_GLReceiptItem_IX6");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Credit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Credit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CrossGlaccountId).HasColumnName("CrossGLAccountId");

                entity.Property(e => e.Debit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Debit3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.DocumentType).HasMaxLength(100);

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlcashAccountId).HasColumnName("GLCashAccountId");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LedgerForexCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LedgerForexDebit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LedgerForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransactionForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ErpGlreceiptItemAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_GLAccount");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpGlreceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.CrossGlaccount)
                    .WithMany(p => p.ErpGlreceiptItemCrossGlaccounts)
                    .HasForeignKey(d => d.CrossGlaccountId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_GLAccount_CrossGLAccountId_DBOnly");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpGlreceiptItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpGlreceiptItemForices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Meta_Forex");

                entity.HasOne(d => d.GlcashAccount)
                    .WithMany(p => p.ErpGlreceiptItemGlcashAccounts)
                    .HasForeignKey(d => d.GlcashAccountId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_GLAccount1");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpGlreceiptItems)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_GLReceipt");

                entity.HasOne(d => d.LedgerForex)
                    .WithMany(p => p.ErpGlreceiptItemLedgerForices)
                    .HasForeignKey(d => d.LedgerForexId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Meta_Forex2");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_GLReceiptItem");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpGlreceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Erp_Project");

                entity.HasOne(d => d.TransactionForex)
                    .WithMany(p => p.ErpGlreceiptItemTransactionForices)
                    .HasForeignKey(d => d.TransactionForexId)
                    .HasConstraintName("FK_Erp_GLReceiptItem_Meta_Forex1");
            });

            modelBuilder.Entity<ErpGlreceiptItemInv>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLReceiptItemInv");

                entity.HasIndex(e => e.GlreceiptItemId, "Erp_GLReceiptItemInv_IX0");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CurrentAccountCode).HasMaxLength(25);

                entity.Property(e => e.CurrentAccountName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.GlreceiptItemId).HasColumnName("GLReceiptItemId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryExplanation).HasMaxLength(100);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.TaxNo).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.GlreceiptItem)
                    .WithMany(p => p.ErpGlreceiptItemInvs)
                    .HasForeignKey(d => d.GlreceiptItemId)
                    .HasConstraintName("FK_Erp_GLReceiptItemInv_Erp_GLReceiptItem");

                entity.HasOne(d => d.TaxOffice)
                    .WithMany(p => p.ErpGlreceiptItemInvs)
                    .HasForeignKey(d => d.TaxOfficeId)
                    .HasConstraintName("FK_Erp_GLReceiptItemInv_Meta_TaxOffice");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpGlreceiptItemInvs)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_GLReceiptItemInv_Meta_UnitSetItem");
            });

            modelBuilder.Entity<ErpGlreflection>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLReflection");

                entity.HasIndex(e => e.FirstAccountId, "Erp_GLReflection_IX0");

                entity.HasIndex(e => e.LastAccountId, "Erp_GLReflection_IX1");

                entity.HasIndex(e => e.AccountId, "Erp_GLReflection_IX2");

                entity.HasIndex(e => e.GlreflectionDefId, "Erp_GLReflection_IX3");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlreflectionDefId).HasColumnName("GLReflectionDefId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ErpGlreflectionAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Erp_GLReflection_Erp_GLAccount2");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGlreflections)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GLReflection_Erp_Company");

                entity.HasOne(d => d.FirstAccount)
                    .WithMany(p => p.ErpGlreflectionFirstAccounts)
                    .HasForeignKey(d => d.FirstAccountId)
                    .HasConstraintName("FK_Erp_GLReflection_Erp_GLAccount");

                entity.HasOne(d => d.GlreflectionDef)
                    .WithMany(p => p.ErpGlreflections)
                    .HasForeignKey(d => d.GlreflectionDefId)
                    .HasConstraintName("FK_Erp_GLReflection_Erp_GLReflectionDefinition");

                entity.HasOne(d => d.LastAccount)
                    .WithMany(p => p.ErpGlreflectionLastAccounts)
                    .HasForeignKey(d => d.LastAccountId)
                    .HasConstraintName("FK_Erp_GLReflection_Erp_GLAccount1");
            });

            modelBuilder.Entity<ErpGlreflectionDefinition>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLReflectionDefinition");

                entity.HasIndex(e => new { e.CompanyId, e.ReflectionCode }, "Erp_GLReflectionDefinition_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReflectionCode).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGlreflectionDefinitions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GLReflectionDefinition_Erp_Company");
            });

            modelBuilder.Entity<ErpGlregBook>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_GLRegBook");

                entity.Property(e => e.RegBookCredit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RegBookDate).HasColumnType("datetime");

                entity.Property(e => e.RegBookDebit).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpGlregBooks)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_GLRegBook_Erp_Company");
            });

            modelBuilder.Entity<ErpGuarantor>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Guarantor");

                entity.ToTable("Erp_Guarantor");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Guarantor_IX0");

                entity.HasIndex(e => e.GuarantorName, "Erp_Guarantor_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GsmPhone).HasMaxLength(50);

                entity.Property(e => e.GuarantorName).HasMaxLength(50);

                entity.Property(e => e.IdNo).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpGuarantors)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Guarantor_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpInitialCost>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InitialCost");

                entity.ToTable("Erp_InitialCost");

                entity.HasIndex(e => new { e.CompanyId, e.CostType, e.InitialCostCode }, "Erp_InitialCost_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CalculatedPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.CommissionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionAmount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionAmount3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionPercent).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionPercent2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionPercent3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostAmount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostAmount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GivenPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.InitialCostCode).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OrderQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PartyNo).HasMaxLength(25);

                entity.Property(e => e.ProfitAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProfitPercent).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubCalculatedPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubCommissionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubCostAmount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubDiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubGivenPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubProfitAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubWastageAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WastageAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WastagePercent).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex2)
                    .WithMany(p => p.ErpInitialCostForex2s)
                    .HasForeignKey(d => d.Forex2Id)
                    .HasConstraintName("FK_Erp_InitialCost_Meta_Forex1");

                entity.HasOne(d => d.Forex3)
                    .WithMany(p => p.ErpInitialCostForex3s)
                    .HasForeignKey(d => d.Forex3Id)
                    .HasConstraintName("FK_Erp_InitialCost_Meta_Forex2");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInitialCostForices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InitialCost_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_Inventory");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpInitialCostLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_LabRecipe");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpInitialCostPatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_LabRecipe2");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_Recipe");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_Route");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInitialCosts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_InitialCost_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInitialCostAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InitialCostAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InitialCost)
                    .WithMany(p => p.ErpInitialCostAttachments)
                    .HasForeignKey(d => d.InitialCostId)
                    .HasConstraintName("FK_Erp_InitialCostAttachment_Erp_InitialCost");
            });

            modelBuilder.Entity<ErpInitialCostCard>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InitialCostCard");

                entity.ToTable("Erp_InitialCostCard");

                entity.HasIndex(e => new { e.CompanyId, e.Code }, "Erp_InitialCostCard_IX0")
                    .IsUnique();

                entity.Property(e => e.BudgetTerm).HasMaxLength(25);

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInitialCostCards)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InitialCostCard_Erp_Company");

                entity.HasOne(d => d.ForFutureNavigation)
                    .WithMany(p => p.ErpInitialCostCards)
                    .HasForeignKey(d => d.ForFuture)
                    .HasConstraintName("FK_Erp_InitialCostCard_Erp_Process");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInitialCostCards)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InitialCostCard_Meta_Forex");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpInitialCostCards)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_InitialCostCard_Meta_UnitSetItem");

                entity.HasOne(d => d.UnitSet)
                    .WithMany(p => p.ErpInitialCostCards)
                    .HasForeignKey(d => d.UnitSetId)
                    .HasConstraintName("FK_Erp_InitialCostCard_Meta_UnitSet");
            });

            modelBuilder.Entity<ErpInitialCostItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InitialCostItem");

                entity.ToTable("Erp_InitialCostItem");

                entity.Property(e => e.CalcItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Divisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.Factor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.KnitForexPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.KnitForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.KnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.KnitWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerM2gram)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("MarkerM2Gram");

                entity.Property(e => e.MarkerPieces).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OperationWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintForexPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintM2gram)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PrintM2Gram");

                entity.Property(e => e.PrintPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.Property(e => e.UnitGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsageRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Wastage).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Meta_Forex");

                entity.HasOne(d => d.InitialCostCard)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.InitialCostCardId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Erp_InitialCostCard");

                entity.HasOne(d => d.InitialCost)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.InitialCostId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Erp_InitialCost");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Erp_InventoryVariant");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Erp_InitialCostItem");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Erp_Process");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpInitialCostItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_InitialCostItem_Meta_UnitSetItem");
            });

            modelBuilder.Entity<ErpInterestRate>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InterestRate");

                entity.HasIndex(e => new { e.CompanyId, e.InterestRateType, e.InterestRateCode }, "Erp_InterestRate_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterestRateCode).HasMaxLength(25);

                entity.Property(e => e.InterestRateName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInterestRates)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InterestRate_Erp_Company");
            });

            modelBuilder.Entity<ErpInterestRateItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InterestRateItem");

                entity.HasIndex(e => e.InterestRateId, "Erp_InterestRateItem_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InterestRate3Monthly).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InterestRate6Monthly).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InterestRateEarlyPaid).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InterestRateYearly).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.ErpInterestRateItems)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_Erp_InterestRateItem_Erp_Bank");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInterestRateItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InterestRateItem_Meta_Forex");

                entity.HasOne(d => d.InterestRateNavigation)
                    .WithMany(p => p.ErpInterestRateItems)
                    .HasForeignKey(d => d.InterestRateId)
                    .HasConstraintName("FK_Erp_InterestRateItem_Erp_InterestRate");
            });

            modelBuilder.Entity<ErpInventory>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Inventory");

                entity.ToTable("Erp_Inventory");

                entity.HasIndex(e => new { e.CompanyId, e.InventoryCode }, "Erp_Inventory_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.GroupId, "Erp_Inventory_IX1");

                entity.HasIndex(e => e.CtspId, "Erp_Inventory_IX10");

                entity.HasIndex(e => e.MarkId, "Erp_Inventory_IX11");

                entity.HasIndex(e => e.ModelId, "Erp_Inventory_IX12");

                entity.HasIndex(e => e.RecipeUnitItemId, "Erp_Inventory_IX13");

                entity.HasIndex(e => e.CategoryId, "Erp_Inventory_IX14");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Inventory_IX15");

                entity.HasIndex(e => e.GiftVoucherId, "Erp_Inventory_IX16");

                entity.HasIndex(e => e.CostCenterId, "Erp_Inventory_IX17");

                entity.HasIndex(e => e.ManufacturingWarehouseId, "Erp_Inventory_IX18");

                entity.HasIndex(e => e.ConsumptionWarehouseId, "Erp_Inventory_IX19");

                entity.HasIndex(e => e.ParentId, "Erp_Inventory_IX2");

                entity.HasIndex(e => e.UnitId, "Erp_Inventory_IX3");

                entity.HasIndex(e => e.TaxId, "Erp_Inventory_IX4");

                entity.HasIndex(e => e.VatId, "Erp_Inventory_IX5");

                entity.HasIndex(e => e.RetailVatId, "Erp_Inventory_IX6");

                entity.HasIndex(e => e.RetailReturnVatId, "Erp_Inventory_IX7");

                entity.HasIndex(e => e.WholeSaleVatId, "Erp_Inventory_IX8");

                entity.HasIndex(e => e.WholeSaleReturnVatId, "Erp_Inventory_IX9");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.Cadcode)
                    .HasMaxLength(25)
                    .HasColumnName("CADCode");

                entity.Property(e => e.CampaignGroup).HasMaxLength(25);

                entity.Property(e => e.Ctext).HasColumnName("CText");

                entity.Property(e => e.CustomerStyle).HasMaxLength(25);

                entity.Property(e => e.D01).HasMaxLength(15);

                entity.Property(e => e.D02).HasMaxLength(15);

                entity.Property(e => e.D03).HasMaxLength(15);

                entity.Property(e => e.D04).HasMaxLength(15);

                entity.Property(e => e.D05).HasMaxLength(15);

                entity.Property(e => e.D06).HasMaxLength(15);

                entity.Property(e => e.D07).HasMaxLength(15);

                entity.Property(e => e.D08).HasMaxLength(15);

                entity.Property(e => e.D09).HasMaxLength(15);

                entity.Property(e => e.D10).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepreciationEndDate).HasColumnType("datetime");

                entity.Property(e => e.DepreciationRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DepreciationStartDate).HasColumnType("datetime");

                entity.Property(e => e.GrossQuantityTax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryCode).HasMaxLength(25);

                entity.Property(e => e.InventoryName).HasMaxLength(50);

                entity.Property(e => e.InventoryProductCode).HasMaxLength(25);

                entity.Property(e => e.IsQcrequried).HasColumnName("IsQCRequried");

                entity.Property(e => e.IsoDocumentNo).HasMaxLength(50);

                entity.Property(e => e.LocalCurrencyForexRate2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocalCurrencyForexRate3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.Markers1).HasMaxLength(50);

                entity.Property(e => e.Markers10).HasMaxLength(50);

                entity.Property(e => e.Markers2).HasMaxLength(50);

                entity.Property(e => e.Markers3).HasMaxLength(50);

                entity.Property(e => e.Markers4).HasMaxLength(50);

                entity.Property(e => e.Markers5).HasMaxLength(50);

                entity.Property(e => e.Markers6).HasMaxLength(50);

                entity.Property(e => e.Markers7).HasMaxLength(50);

                entity.Property(e => e.Markers8).HasMaxLength(50);

                entity.Property(e => e.Markers9).HasMaxLength(50);

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OptimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PluCode).HasMaxLength(25);

                entity.Property(e => e.PreparationTime).HasColumnType("datetime");

                entity.Property(e => e.PreviousCode).HasMaxLength(25);

                entity.Property(e => e.PriceGroup).HasMaxLength(25);

                entity.Property(e => e.ProducerInventoryCode).HasMaxLength(50);

                entity.Property(e => e.PurchaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseCost).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

                entity.Property(e => e.PurchaseDocument).HasMaxLength(25);

                entity.Property(e => e.QccontrolType).HasColumnName("QCControlType");

                entity.Property(e => e.RecipeCostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalvageValue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SeasonCode).HasMaxLength(25);

                entity.Property(e => e.SoldAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SoldDate).HasColumnType("datetime");

                entity.Property(e => e.SoldDocument).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.Stext).HasColumnName("SText");

                entity.Property(e => e.SupplyCoefficient).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SvalueText)
                    .HasMaxLength(4000)
                    .HasColumnName("SValueText");

                entity.Property(e => e.UdSabitKiyGid)
                    .HasMaxLength(50)
                    .HasColumnName("Ud_SabitKiyGid");

                entity.Property(e => e.UdUzunKod)
                    .HasMaxLength(50)
                    .HasColumnName("UD_UzunKod");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.V1).HasMaxLength(15);

                entity.Property(e => e.V1typeId).HasColumnName("V1TypeId");

                entity.Property(e => e.V2).HasMaxLength(15);

                entity.Property(e => e.V2typeId).HasColumnName("V2TypeId");

                entity.Property(e => e.V3).HasMaxLength(15);

                entity.Property(e => e.V3typeId).HasColumnName("V3TypeId");

                entity.Property(e => e.V4).HasMaxLength(15);

                entity.Property(e => e.V4typeId).HasColumnName("V4TypeId");

                entity.Property(e => e.V5).HasMaxLength(15);

                entity.Property(e => e.V5typeId).HasColumnName("V5TypeId");

                entity.Property(e => e.V6).HasMaxLength(15);

                entity.Property(e => e.V6typeId).HasColumnName("V6TypeId");

                entity.Property(e => e.V7).HasMaxLength(15);

                entity.Property(e => e.V7typeId).HasColumnName("V7TypeId");

                entity.Property(e => e.V8).HasMaxLength(15);

                entity.Property(e => e.V8typeId).HasColumnName("V8TypeId");

                entity.Property(e => e.WebContent).HasMaxLength(100);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Category");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Company");

                entity.HasOne(d => d.ConsumptionWarehouse)
                    .WithMany(p => p.ErpInventoryConsumptionWarehouses)
                    .HasForeignKey(d => d.ConsumptionWarehouseId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_ConsumptionWarehouse");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_CostCenter");

                entity.HasOne(d => d.Ctsp)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.CtspId)
                    .HasConstraintName("FK_Erp_Inventory_Meta_Ctsp");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_CurrentAccount");

                entity.HasOne(d => d.GiftVoucher)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.GiftVoucherId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_GiftVoucher");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_Inventory_InventoryGroup");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_InventoryReceiptItem_DBOnly");

                entity.HasOne(d => d.ManufacturingWarehouse)
                    .WithMany(p => p.ErpInventoryManufacturingWarehouses)
                    .HasForeignKey(d => d.ManufacturingWarehouseId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_ManufacturingWarehouse");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Model");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Inventory_Inventory_DBOnly");

                entity.HasOne(d => d.Poll)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.PollId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Poll");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Process");

                entity.HasOne(d => d.RecipeUnitItem)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.RecipeUnitItemId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_InventoryUnitItemSize_DBOnly");

                entity.HasOne(d => d.RetailReturnVat)
                    .WithMany(p => p.ErpInventoryRetailReturnVats)
                    .HasForeignKey(d => d.RetailReturnVatId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Tax3");

                entity.HasOne(d => d.RetailVat)
                    .WithMany(p => p.ErpInventoryRetailVats)
                    .HasForeignKey(d => d.RetailVatId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Tax2");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Route");

                entity.HasOne(d => d.Season)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.SeasonId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Season");

                entity.HasOne(d => d.Symbol)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.SymbolId)
                    .HasConstraintName("FK_Erp_Inventory_Meta_Symbol");

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.ErpInventoryTaxes)
                    .HasForeignKey(d => d.TaxId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Tax");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_Inventory_Meta_UnitSet");

                entity.HasOne(d => d.UsefulServiceLife)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.UsefulServiceLifeId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_FixedAssetUsefulServiceLife");

                entity.HasOne(d => d.Variant1Type)
                    .WithMany(p => p.ErpInventoryVariant1Types)
                    .HasForeignKey(d => d.Variant1TypeId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_VariantType");

                entity.HasOne(d => d.Variant2Type)
                    .WithMany(p => p.ErpInventoryVariant2Types)
                    .HasForeignKey(d => d.Variant2TypeId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_VariantType1");

                entity.HasOne(d => d.Variant3Type)
                    .WithMany(p => p.ErpInventoryVariant3Types)
                    .HasForeignKey(d => d.Variant3TypeId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_VariantType2");

                entity.HasOne(d => d.Variant4Type)
                    .WithMany(p => p.ErpInventoryVariant4Types)
                    .HasForeignKey(d => d.Variant4TypeId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_VariantType3");

                entity.HasOne(d => d.Variant5Type)
                    .WithMany(p => p.ErpInventoryVariant5Types)
                    .HasForeignKey(d => d.Variant5TypeId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_VariantType4");

                entity.HasOne(d => d.Vat)
                    .WithMany(p => p.ErpInventoryVats)
                    .HasForeignKey(d => d.VatId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Tax1");

                entity.HasOne(d => d.WholeSaleReturnVat)
                    .WithMany(p => p.ErpInventoryWholeSaleReturnVats)
                    .HasForeignKey(d => d.WholeSaleReturnVatId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Tax5");

                entity.HasOne(d => d.WholeSaleVat)
                    .WithMany(p => p.ErpInventoryWholeSaleVats)
                    .HasForeignKey(d => d.WholeSaleVatId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Tax4");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInventories)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Inventory_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInventoryAllocation>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryAllocation");

                entity.ToTable("Erp_InventoryAllocation");

                entity.HasIndex(e => e.RequirementId, "Erp_InventoryAllocation_IX0");

                entity.HasIndex(e => new { e.RequirementId, e.InventoryReceiptType, e.InventoryReceiptSubType }, "Erp_InventoryAllocation_IX1");

                entity.HasIndex(e => new { e.InventoryReceiptItemId, e.InInventoryReceiptItemId }, "Erp_InventoryAllocation_IX10");

                entity.HasIndex(e => e.SerialCardId, "Erp_InventoryAllocation_IX11");

                entity.HasIndex(e => new { e.RequirementId, e.OrderReceiptType }, "Erp_InventoryAllocation_IX2");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_InventoryAllocation_IX3");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_InventoryAllocation_IX4");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryAllocation_IX5");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_InventoryAllocation_IX6");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryAllocation_IX7");

                entity.HasIndex(e => e.WorkOrderProductionId, "Erp_InventoryAllocation_IX8");

                entity.HasIndex(e => e.InInventoryReceiptItemId, "Erp_InventoryAllocation_IX9");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PartyNo).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WastageQuantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_CurrentAccount");

                entity.HasOne(d => d.DemandReceiptItem)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.DemandReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_DemandReceiptItem");

                entity.HasOne(d => d.InInventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryAllocationInInventoryReceiptItems)
                    .HasForeignKey(d => d.InInventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_InventoryReceiptItem2_DBOnly");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryAllocationInventoryReceiptItems)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_InventoryVariant");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_OrderReceiptItem");

                entity.HasOne(d => d.Requirement)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.RequirementId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_Requirement");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_InventorySerialCard");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_WorkOrderItem");

                entity.HasOne(d => d.WorkOrderProduction)
                    .WithMany(p => p.ErpInventoryAllocations)
                    .HasForeignKey(d => d.WorkOrderProductionId)
                    .HasConstraintName("FK_Erp_InventoryAllocation_Erp_WorkOrderProduction");
            });

            modelBuilder.Entity<ErpInventoryAlternative>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryAlternative");

                entity.ToTable("Erp_InventoryAlternative");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryAlternative_IX0");

                entity.HasIndex(e => e.AlternativeId, "Erp_InventoryAlternative_IX1");

                entity.HasIndex(e => e.UnitId, "Erp_InventoryAlternative_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Divisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Factor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WasteRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Alternative)
                    .WithMany(p => p.ErpInventoryAlternativeAlternatives)
                    .HasForeignKey(d => d.AlternativeId)
                    .HasConstraintName("FK_Erp_InventoryAlternative_Erp_Inventory2_DBOnly");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryAlternativeInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryAlternative_Erp_Inventory");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpInventoryAlternatives)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_InventoryAlternative_Erp_InventoryUnitItemSize_DBOnly");
            });

            modelBuilder.Entity<ErpInventoryAssortment>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryLot");

                entity.ToTable("Erp_InventoryAssortment");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryAssortment_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LotCode).HasMaxLength(25);

                entity.Property(e => e.LotDescription).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryAssortments)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryLot_Inventory");
            });

            modelBuilder.Entity<ErpInventoryAssortmentItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryLotItem");

                entity.ToTable("Erp_InventoryAssortmentItem");

                entity.HasIndex(e => e.LotId, "Erp_InventoryAssortmentItem_IX0");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryAssortmentItem_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryAssortmentItems)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_InventoryLotItem_InventoryVariant");

                entity.HasOne(d => d.Lot)
                    .WithMany(p => p.ErpInventoryAssortmentItems)
                    .HasForeignKey(d => d.LotId)
                    .HasConstraintName("FK_InventoryLotItem_InventoryLot");
            });

            modelBuilder.Entity<ErpInventoryAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryAttachment");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryAttachments)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryAttachment_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryAttachments)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InventoryAttachment_Erp_InventoryVariant");
            });

            modelBuilder.Entity<ErpInventoryAttribute>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryAttribute");

                entity.ToTable("Erp_InventoryAttribute");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryAttribute_IX0");

                entity.HasIndex(e => e.AttributeSetId, "Erp_InventoryAttribute_IX1");

                entity.HasIndex(e => e.AttributeSetItemId, "Erp_InventoryAttribute_IX2");

                entity.HasIndex(e => e.GroupId, "Erp_InventoryAttribute_IX3");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.ErpInventoryAttributes)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Erp_InventoryAttribute_Erp_InventoryAttributeSet");

                entity.HasOne(d => d.AttributeSetItem)
                    .WithMany(p => p.ErpInventoryAttributes)
                    .HasForeignKey(d => d.AttributeSetItemId)
                    .HasConstraintName("FK_Erp_InventoryAttribute_Erp_InventoryAttributeSetItem");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ErpInventoryAttributes)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_Erp_InventoryAttribute_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryAttributes)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryAttribute_Erp_Inventory");
            });

            modelBuilder.Entity<ErpInventoryAttributeSet>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryAttributeSet");

                entity.ToTable("Erp_InventoryAttributeSet");

                entity.HasIndex(e => new { e.CompanyId, e.AttributeCode }, "Erp_InventoryAttributeSet_IX0")
                    .IsUnique();

                entity.Property(e => e.AttributeCode).HasMaxLength(25);

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventoryAttributeSets)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventoryAttributeSet_Erp_Company");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ErpInventoryAttributeSets)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_Erp_InventoryAttributeSet_Erp_InventoryGroup");
            });

            modelBuilder.Entity<ErpInventoryAttributeSetItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryAttributeCard");

                entity.ToTable("Erp_InventoryAttributeSetItem");

                entity.HasIndex(e => e.AttributeSetId, "Erp_InventoryAttributeSetItem_IX0");

                entity.HasIndex(e => new { e.AttributeSetId, e.AttributeItemCode }, "Erp_InventoryAttributeSetItem_IX1")
                    .IsUnique();

                entity.Property(e => e.AttributeItemCode).HasMaxLength(25);

                entity.Property(e => e.AttributeItemName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.ErpInventoryAttributeSetItems)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Erp_InventoryAttributeSetItem_Erp_InventoryAttributeSet");
            });

            modelBuilder.Entity<ErpInventoryBarcode>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryBarcode");

                entity.ToTable("Erp_InventoryBarcode");

                entity.HasIndex(e => e.Barcode, "Erp_InventoryBarcode_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryBarcode_IX1");

                entity.HasIndex(e => new { e.InventoryId, e.InventoryVariantId }, "Erp_InventoryBarcode_IX2");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryBarcode_IX3");

                entity.HasIndex(e => e.InventoryAssortmentId, "Erp_InventoryBarcode_IX4");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_InventoryBarcode_IX5");

                entity.HasIndex(e => e.UnitSetItemId, "Erp_InventoryBarcode_IX6");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.Barcode).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PluCode).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventoryBarcodes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryBarcode_Erp_CurrentAccount");

                entity.HasOne(d => d.InventoryAssortment)
                    .WithMany(p => p.ErpInventoryBarcodes)
                    .HasForeignKey(d => d.InventoryAssortmentId)
                    .HasConstraintName("FK_Erp_InventoryBarcode_Erp_InventoryAssortment");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryBarcodes)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryBarcode_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryBarcodes)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_InventoryBarcode_InventoryVariant");

                entity.HasOne(d => d.UnitSetItem)
                    .WithMany(p => p.ErpInventoryBarcodes)
                    .HasForeignKey(d => d.UnitSetItemId)
                    .HasConstraintName("FK_Erp_InventoryBarcode_Erp_InventoryUnitItemSize_DBOnly");
            });

            modelBuilder.Entity<ErpInventoryCampaign>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryCampaign");

                entity.HasIndex(e => new { e.CompanyId, e.CampaignCode }, "Erp_InventoryCampaign_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryCampaign_IX1");

                entity.HasIndex(e => e.UserId, "Erp_InventoryCampaign_IX2");

                entity.Property(e => e.CampaignCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LowerAmountLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventoryCampaigns)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventoryCampaign_Erp_Company");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryCampaigns)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryCampaign_Erp_Inventory");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpInventoryCampaigns)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_InventoryCampaign_Meta_User");
            });

            modelBuilder.Entity<ErpInventoryCampaignDepartment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryCampaignDepartment");

                entity.HasIndex(e => e.CampaignId, "Erp_InventoryCampaignDepartment_IX0");

                entity.HasIndex(e => e.DepartmentId, "Erp_InventoryCampaignDepartment_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Campaign)
                    .WithMany(p => p.ErpInventoryCampaignDepartments)
                    .HasForeignKey(d => d.CampaignId)
                    .HasConstraintName("FK_Erp_InventoryCampaignDepartment_Erp_InventoryCampaign");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpInventoryCampaignDepartments)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_InventoryCampaignDepartment_Erp_Department");
            });

            modelBuilder.Entity<ErpInventoryCampaignItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryCampaignItem");

                entity.HasIndex(e => e.CampaignId, "Erp_InventoryCampaignItem_IX0");

                entity.HasIndex(e => e.GroupId, "Erp_InventoryCampaignItem_IX1");

                entity.HasIndex(e => e.MarkId, "Erp_InventoryCampaignItem_IX2");

                entity.HasIndex(e => e.ModelId, "Erp_InventoryCampaignItem_IX3");

                entity.HasIndex(e => e.VariantTypeId, "Erp_InventoryCampaignItem_IX4");

                entity.HasIndex(e => e.VariantId, "Erp_InventoryCampaignItem_IX5");

                entity.HasIndex(e => e.UserId, "Erp_InventoryCampaignItem_IX6");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AmountMax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AmountMin).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CampaignGroup).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GroupSpecialCode).HasMaxLength(15);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PriceGroup).HasMaxLength(25);

                entity.Property(e => e.PromotionQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SeasonCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Campaign)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.CampaignId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_InventoryCampaign");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_Category");

                entity.HasOne(d => d.CurrentAccountCategory)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.CurrentAccountCategoryId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_CurrentAccountCategory");

                entity.HasOne(d => d.CurrentAccountGroup)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.CurrentAccountGroupId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_CurrentAccountGroup");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_Inventory");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_Model");

                entity.HasOne(d => d.PromotionAttributeSetItem)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.PromotionAttributeSetItemId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_InventoryAttributeSetItem");

                entity.HasOne(d => d.Season)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.SeasonId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_Season");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Meta_User");

                entity.HasOne(d => d.Variant)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.VariantId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_VariantItem");

                entity.HasOne(d => d.VariantType)
                    .WithMany(p => p.ErpInventoryCampaignItems)
                    .HasForeignKey(d => d.VariantTypeId)
                    .HasConstraintName("FK_Erp_InventoryCampaignItem_Erp_VariantType");
            });

            modelBuilder.Entity<ErpInventoryCampaignPromotion>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryCampaignPromotion");

                entity.HasIndex(e => e.PromotionCode, "Erp_InventoryCampaignPromotion_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.InventoryCampaignId, "Erp_InventoryCampaignPromotion_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_InventoryCampaignPromotion_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(50)
                    .HasColumnName("EMailAddress");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PromotionCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventoryCampaignPromotions)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryCampaignPromotion_Erp_CurrentAccount");

                entity.HasOne(d => d.InventoryCampaign)
                    .WithMany(p => p.ErpInventoryCampaignPromotions)
                    .HasForeignKey(d => d.InventoryCampaignId)
                    .HasConstraintName("FK_Erp_InventoryCampaignPromotion_Erp_InventoryCampaign");
            });

            modelBuilder.Entity<ErpInventoryExplanation>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryExplanation");

                entity.ToTable("Erp_InventoryExplanation");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryExplanation_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryExplanations)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryExplanation_Inventory");
            });

            modelBuilder.Entity<ErpInventoryGroup>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryGroup");

                entity.ToTable("Erp_InventoryGroup");

                entity.HasIndex(e => new { e.CompanyId, e.GroupCode }, "Erp_InventoryGroup_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventoryGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventoryGroup_Erp_Company");
            });

            modelBuilder.Entity<ErpInventoryGroupIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryGroupAccount");

                entity.ToTable("Erp_InventoryGroupIA");

                entity.HasIndex(e => e.InventoryGroupId, "Erp_InventoryGroupIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_InventoryGroupIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_InventoryGroupIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpInventoryGroupIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_InventoryGroupIA_Erp_CostCenter");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpInventoryGroupIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_InventoryGroupIA_Erp_GLAccount");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpInventoryGroupIas)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Erp_InventoryGroupIA_Erp_InventoryGroup");
            });

            modelBuilder.Entity<ErpInventoryIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryAccount");

                entity.ToTable("Erp_InventoryIA");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_InventoryIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_InventoryIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpInventoryIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_InventoryIA_Erp_CostCenter");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpInventoryIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_InventoryIA_Erp_GLAccount");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryIas)
                    .HasForeignKey(d => d.InventoryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_InventoryAccount_Inventory");
            });

            modelBuilder.Entity<ErpInventoryMargin>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryMargin");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryMargin_IX0");

                entity.HasIndex(e => e.InventoryGroupId, "Erp_InventoryMargin_IX1");

                entity.HasIndex(e => e.InventoryCategoryId, "Erp_InventoryMargin_IX2");

                entity.HasIndex(e => e.InventoryMarkId, "Erp_InventoryMargin_IX3");

                entity.HasIndex(e => e.InventoryModelId, "Erp_InventoryMargin_IX4");

                entity.HasIndex(e => e.CurrAccId, "Erp_InventoryMargin_IX5");

                entity.HasIndex(e => e.CurrAccGroupId, "Erp_InventoryMargin_IX6");

                entity.HasIndex(e => e.CurrAccTradingGroupId, "Erp_InventoryMargin_IX7");

                entity.Property(e => e.CurrAccDiscountGroup).HasMaxLength(25);

                entity.Property(e => e.CurrAccPriceGroup).HasMaxLength(25);

                entity.Property(e => e.CurrAccSpecial).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.Formula).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryCampaignCode).HasMaxLength(25);

                entity.Property(e => e.InventoryPriceGroup).HasMaxLength(25);

                entity.Property(e => e.InventorySeasonCode).HasMaxLength(25);

                entity.Property(e => e.InventorySpecial).HasMaxLength(15);

                entity.Property(e => e.Margin).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_Company");

                entity.HasOne(d => d.CurrAccGroup)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.CurrAccGroupId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_CurrentAccountGroup");

                entity.HasOne(d => d.CurrAcc)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.CurrAccId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrAccTradingGroup)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.CurrAccTradingGroupId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_TradingGroup");

                entity.HasOne(d => d.InventoryCategory)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.InventoryCategoryId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_Category");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_Inventory");

                entity.HasOne(d => d.InventoryMark)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.InventoryMarkId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_Mark");

                entity.HasOne(d => d.InventoryModel)
                    .WithMany(p => p.ErpInventoryMargins)
                    .HasForeignKey(d => d.InventoryModelId)
                    .HasConstraintName("FK_Erp_InventoryMargin_Erp_Model");
            });

            modelBuilder.Entity<ErpInventoryPriceList>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryPriceList");

                entity.ToTable("Erp_InventoryPriceList");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryPriceList_IX0");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryPriceList_IX1");

                entity.HasIndex(e => e.CertificationId, "Erp_InventoryPriceList_IX10");

                entity.HasIndex(e => e.InventoryCategoryId, "Erp_InventoryPriceList_IX11");

                entity.HasIndex(e => e.CurrentAccountCategoryId, "Erp_InventoryPriceList_IX12");

                entity.HasIndex(e => e.InventoryGroupId, "Erp_InventoryPriceList_IX2");

                entity.HasIndex(e => e.UnitSetItemId, "Erp_InventoryPriceList_IX3");

                entity.HasIndex(e => e.CurrAccId, "Erp_InventoryPriceList_IX4");

                entity.HasIndex(e => e.CurrAccGroupId, "Erp_InventoryPriceList_IX5");

                entity.HasIndex(e => e.DepartmentId, "Erp_InventoryPriceList_IX6");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_InventoryPriceList_IX7");

                entity.HasIndex(e => e.CustomerId, "Erp_InventoryPriceList_IX8");

                entity.HasIndex(e => e.ProjectId, "Erp_InventoryPriceList_IX9");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CampaignCode).HasMaxLength(25);

                entity.Property(e => e.CurrAccDiscountGroup).HasMaxLength(25);

                entity.Property(e => e.CurrAccGroupSpecial).HasMaxLength(15);

                entity.Property(e => e.CurrAccSpecial).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.Formula).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryCampaignCode).HasMaxLength(25);

                entity.Property(e => e.InventoryGroupSpecial).HasMaxLength(15);

                entity.Property(e => e.InventoryPriceGroup).HasMaxLength(25);

                entity.Property(e => e.InventorySpecial).HasMaxLength(15);

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PriceCode).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Certification)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.CertificationId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Certification");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Company");

                entity.HasOne(d => d.CurrAccGroup)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.CurrAccGroupId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_CurrentAccountGroup");

                entity.HasOne(d => d.CurrAcc)
                    .WithMany(p => p.ErpInventoryPriceListCurrAccs)
                    .HasForeignKey(d => d.CurrAccId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountCategory)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.CurrentAccountCategoryId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_CurrentAccountCategory");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpInventoryPriceListCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_CurrentAccount1");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Department");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Meta_Forex");

                entity.HasOne(d => d.InventoryCategory)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.InventoryCategoryId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Category");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_InventoryPriceList_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryPriceList_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_InventoryVariant");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Model");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_InventoryPriceList_PaymentPlan");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Project");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Route");

                entity.HasOne(d => d.UnitSetItem)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.UnitSetItemId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_InventoryUnitItemSize");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Warehouse");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInventoryPriceLists)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_InventoryPriceList_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInventoryReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryReceipt");

                entity.ToTable("Erp_InventoryReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_InventoryReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_InventoryReceipt_IX1");

                entity.HasIndex(e => e.ProjectId, "Erp_InventoryReceipt_IX10");

                entity.HasIndex(e => e.EmployeeId, "Erp_InventoryReceipt_IX11");

                entity.HasIndex(e => e.CashId, "Erp_InventoryReceipt_IX12");

                entity.HasIndex(e => e.TransporterId, "Erp_InventoryReceipt_IX13");

                entity.HasIndex(e => e.VehicleId, "Erp_InventoryReceipt_IX14");

                entity.HasIndex(e => e.PosReceiptId, "Erp_InventoryReceipt_IX15");

                entity.HasIndex(e => e.Receipt99Id, "Erp_InventoryReceipt_IX16");

                entity.HasIndex(e => e.Receipt101Id, "Erp_InventoryReceipt_IX17");

                entity.HasIndex(e => e.ManufactureReceiptId, "Erp_InventoryReceipt_IX18");

                entity.HasIndex(e => e.ConsumptionReceiptId, "Erp_InventoryReceipt_IX19");

                entity.HasIndex(e => e.AddressId, "Erp_InventoryReceipt_IX2");

                entity.HasIndex(e => e.WasteReceiptId, "Erp_InventoryReceipt_IX20");

                entity.HasIndex(e => e.TransferInflowReceiptId, "Erp_InventoryReceipt_IX21");

                entity.HasIndex(e => e.WorkOrderReceiptId, "Erp_InventoryReceipt_IX22");

                entity.HasIndex(e => e.InvoiceId, "Erp_InventoryReceipt_IX23");

                entity.HasIndex(e => e.GlreceiptId, "Erp_InventoryReceipt_IX24");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_InventoryReceipt_IX25");

                entity.HasIndex(e => e.CustomerId, "Erp_InventoryReceipt_IX26");

                entity.HasIndex(e => e.CustomerAddressId, "Erp_InventoryReceipt_IX27");

                entity.HasIndex(e => e.ShipToAddressId, "Erp_InventoryReceipt_IX28");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_InventoryReceipt_IX29");

                entity.HasIndex(e => e.ShipToCurrentAccountId, "Erp_InventoryReceipt_IX3");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.DocumentNo }, "Erp_InventoryReceipt_IX30");

                entity.HasIndex(e => e.InWarehouseId, "Erp_InventoryReceipt_IX4");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_InventoryReceipt_IX5");

                entity.HasIndex(e => e.ConsumptionWarehouseId, "Erp_InventoryReceipt_IX6");

                entity.HasIndex(e => e.CostCenterId, "Erp_InventoryReceipt_IX7");

                entity.HasIndex(e => e.DealerId, "Erp_InventoryReceipt_IX8");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_InventoryReceipt_IX9");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGross).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGrossForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.DriverIdNo).HasMaxLength(50);

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.EdespatchAdviceType)
                    .HasMaxLength(25)
                    .HasColumnName("EDespatchAdviceType");

                entity.Property(e => e.EdespatchGuid)
                    .HasMaxLength(50)
                    .HasColumnName("EDespatchGuid");

                entity.Property(e => e.EdespatchIntegratorId)
                    .HasMaxLength(50)
                    .HasColumnName("EDespatchIntegratorId");

                entity.Property(e => e.EdespatchNo).HasColumnName("EDespatchNo");

                entity.Property(e => e.EdespatchScenario).HasColumnName("EDespatchScenario");

                entity.Property(e => e.EdespatchStatus).HasColumnName("EDespatchStatus");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsEdespatch).HasColumnName("IsEDespatch");

                entity.Property(e => e.IsEsendMail).HasColumnName("IsESendMail");

                entity.Property(e => e.IsForexEdespatch).HasColumnName("IsForexEDespatch");

                entity.Property(e => e.IsSendEdespatch).HasColumnName("IsSendEDespatch");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.PlateNumber).HasMaxLength(100);

                entity.Property(e => e.QcrejectedWarehouseId).HasColumnName("QCRejectedWarehouseId");

                entity.Property(e => e.Rate1).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate1Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate1AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate1AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate1AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate3Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate4Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate5Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentTime).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Forex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Forex).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpInventoryReceiptAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Address");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Company");

                entity.HasOne(d => d.ConsumptionReceipt)
                    .WithMany(p => p.InverseConsumptionReceipt)
                    .HasForeignKey(d => d.ConsumptionReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt3_DBOnly");

                entity.HasOne(d => d.ConsumptionWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptConsumptionWarehouses)
                    .HasForeignKey(d => d.ConsumptionWarehouseId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Warehouse");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CurrentAccountContact");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventoryReceiptCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CurrentAccountReceiptItem");

                entity.HasOne(d => d.CustomerAddress)
                    .WithMany(p => p.ErpInventoryReceiptCustomerAddresses)
                    .HasForeignKey(d => d.CustomerAddressId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Address1");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpInventoryReceiptCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CurrentAccount3");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CustomerTransaction");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpInventoryReceiptDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CurrentAccount2");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.InWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptInWarehouses)
                    .HasForeignKey(d => d.InWarehouseId)
                    .HasConstraintName("FK_InventoryReceipt_Warehouse");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Invoice");

                entity.HasOne(d => d.ManufactureReceipt)
                    .WithMany(p => p.InverseManufactureReceipt)
                    .HasForeignKey(d => d.ManufactureReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt2_DBOnly");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_InventoryReceipt_Warehouse1");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_PaymentCard");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_PaymentPlan");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Pos");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Project");

                entity.HasOne(d => d.QcrejectedWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptQcrejectedWarehouses)
                    .HasForeignKey(d => d.QcrejectedWarehouseId)
                    .HasConstraintName("FK_InventoryReceipt_Warehouse2");

                entity.HasOne(d => d.Receipt101)
                    .WithMany(p => p.InverseReceipt101)
                    .HasForeignKey(d => d.Receipt101Id)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt1_DBOnly");

                entity.HasOne(d => d.Receipt99)
                    .WithMany(p => p.InverseReceipt99)
                    .HasForeignKey(d => d.Receipt99Id)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt_DBOnly");

                entity.HasOne(d => d.ShipToAddress)
                    .WithMany(p => p.ErpInventoryReceiptShipToAddresses)
                    .HasForeignKey(d => d.ShipToAddressId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Address2");

                entity.HasOne(d => d.ShipToCurrentAccount)
                    .WithMany(p => p.ErpInventoryReceiptShipToCurrentAccounts)
                    .HasForeignKey(d => d.ShipToCurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_CurrentAccount1");

                entity.HasOne(d => d.ShipmentReceipt)
                    .WithMany(p => p.InverseShipmentReceipt)
                    .HasForeignKey(d => d.ShipmentReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt6_DBOnly");

                entity.HasOne(d => d.TransferInflowReceipt)
                    .WithMany(p => p.InverseTransferInflowReceipt)
                    .HasForeignKey(d => d.TransferInflowReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt5_DBOnly");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Transporter");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Vehicle");

                entity.HasOne(d => d.WasteReceipt)
                    .WithMany(p => p.InverseWasteReceipt)
                    .HasForeignKey(d => d.WasteReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_InventoryReceipt4_DBOnly");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInventoryReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_InventoryReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInventoryReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryReceiptAttachment");

                entity.HasIndex(e => e.InventoryReceiptId, "Erp_InventoryReceiptAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsUsingEdespatch).HasColumnName("IsUsingEDespatch");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpInventoryReceiptAttachments)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceiptAttachment_Erp_InventoryReceipt");
            });

            modelBuilder.Entity<ErpInventoryReceiptDespatchContact>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryReceiptDespatchContact");

                entity.HasIndex(e => new { e.InventoryReceiptId, e.ContactId, e.VehicleId }, "Erp_InventoryReceiptDespatchContact_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpInventoryReceiptDespatchContacts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_InventoryReceiptDespatchContact_Erp_DespatchContact");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpInventoryReceiptDespatchContacts)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceiptDespatchContact_Erp_InventoryReceipt");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpInventoryReceiptDespatchContacts)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_InventoryReceiptDespatchContact_Erp_Vehicle");
            });

            modelBuilder.Entity<ErpInventoryReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryReceiptItem");

                entity.ToTable("Erp_InventoryReceiptItem");

                entity.HasIndex(e => e.ExpoId, "Erp_InventoryReceiptItem_Expo_IX1");

                entity.HasIndex(e => e.ExpoItemId, "Erp_InventoryReceiptItem_Expo_IX2");

                entity.HasIndex(e => e.InventoryReceiptId, "Erp_InventoryReceiptItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryReceiptItem_IX1");

                entity.HasIndex(e => e.UnitId, "Erp_InventoryReceiptItem_IX10");

                entity.HasIndex(e => e.ProjectId, "Erp_InventoryReceiptItem_IX11");

                entity.HasIndex(e => e.EmployeeId, "Erp_InventoryReceiptItem_IX12");

                entity.HasIndex(e => e.PackagingId, "Erp_InventoryReceiptItem_IX13");

                entity.HasIndex(e => e.InventoryAssortmentId, "Erp_InventoryReceiptItem_IX14");

                entity.HasIndex(e => e.CostCenterId, "Erp_InventoryReceiptItem_IX15");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_InventoryReceiptItem_IX16");

                entity.HasIndex(e => e.CustomerId, "Erp_InventoryReceiptItem_IX17");

                entity.HasIndex(e => e.DiscountId, "Erp_InventoryReceiptItem_IX18");

                entity.HasIndex(e => e.ExpenseId, "Erp_InventoryReceiptItem_IX19");

                entity.HasIndex(e => new { e.InventoryId, e.ReceiptDate }, "Erp_InventoryReceiptItem_IX2");

                entity.HasIndex(e => e.InventoryCampaignId, "Erp_InventoryReceiptItem_IX20");

                entity.HasIndex(e => e.ManufactureReceiptItemId, "Erp_InventoryReceiptItem_IX21");

                entity.HasIndex(e => e.ReturnReceiptItemId, "Erp_InventoryReceiptItem_IX22");

                entity.HasIndex(e => e.TransferOutReceiptItemId, "Erp_InventoryReceiptItem_IX23");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_InventoryReceiptItem_IX24");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_InventoryReceiptItem_IX25");

                entity.HasIndex(e => e.BoxId, "Erp_InventoryReceiptItem_IX26");

                entity.HasIndex(e => e.InvoiceItemId, "Erp_InventoryReceiptItem_IX27");

                entity.HasIndex(e => e.DemandReceiptItemId, "Erp_InventoryReceiptItem_IX28");

                entity.HasIndex(e => new { e.ReceiptType, e.ItemType, e.InventoryReceiptId, e.Explanation }, "Erp_InventoryReceiptItem_IX29");

                entity.HasIndex(e => e.ServiceCardId, "Erp_InventoryReceiptItem_IX3");

                entity.HasIndex(e => e.WorkplaceId, "Erp_InventoryReceiptItem_IX30");

                entity.HasIndex(e => e.DepartmentId, "Erp_InventoryReceiptItem_IX31");

                entity.HasIndex(e => e.CashId, "Erp_InventoryReceiptItem_IX32");

                entity.HasIndex(e => e.ReservedReceiptItemId, "Erp_InventoryReceiptItem_IX33");

                entity.HasIndex(e => e.UsedEmployeeId, "Erp_InventoryReceiptItem_IX34");

                entity.HasIndex(e => e.CurrentAccountReceiptItemId, "Erp_InventoryReceiptItem_IX35");

                entity.HasIndex(e => e.GiftVoucherId, "Erp_InventoryReceiptItem_IX36");

                entity.HasIndex(e => e.CostOrderReceiptId, "Erp_InventoryReceiptItem_IX37");

                entity.HasIndex(e => e.CostInventoryId, "Erp_InventoryReceiptItem_IX38");

                entity.HasIndex(e => e.WorkOrderId, "Erp_InventoryReceiptItem_IX39");

                entity.HasIndex(e => new { e.ServiceCardId, e.ReceiptDate }, "Erp_InventoryReceiptItem_IX4");

                entity.HasIndex(e => e.ParentItemId, "Erp_InventoryReceiptItem_IX5");

                entity.HasIndex(e => e.InWarehouseId, "Erp_InventoryReceiptItem_IX6");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_InventoryReceiptItem_IX7");

                entity.HasIndex(e => e.InWarehouseLocationId, "Erp_InventoryReceiptItem_IX8");

                entity.HasIndex(e => e.OutWarehouseLocationId, "Erp_InventoryReceiptItem_IX9");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation)
                    .HasMaxLength(4000)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledExplanation)
                    .HasMaxLength(4000)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CostForexPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostPrice2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostPrice3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderNo)
                    .HasMaxLength(25)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpenseForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EinvoiceTaxExemptionReasonCode)
                    .HasMaxLength(25)
                    .HasColumnName("EInvoiceTaxExemptionReasonCode")
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation)
                    .HasMaxLength(4000)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncomingEinvoiceItemName)
                    .HasMaxLength(4000)
                    .HasColumnName("IncomingEInvoiceItemName")
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.InflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsQcapproved).HasColumnName("IsQCApproved");

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantityEntry).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPriceForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OpeningQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OutflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageMark)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackagingNo)
                    .HasMaxLength(25)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.PackedTime).HasColumnType("datetime");

                entity.Property(e => e.PackingStartTime).HasColumnType("datetime");

                entity.Property(e => e.PartyNo)
                    .HasMaxLength(25)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.PreviousCostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProcessTime).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QcrejectedQuantity)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("QCRejectedQuantity");

                entity.Property(e => e.QcrejectedWarehouseId).HasColumnName("QCRejectedWarehouseId");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReservedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode)
                    .HasMaxLength(15)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.TransferInflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferOutflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UdGiderMerkezi)
                    .HasMaxLength(50)
                    .HasColumnName("UD_GiderMerkezi");

                entity.Property(e => e.UdMasrafYeri)
                    .HasMaxLength(50)
                    .HasColumnName("UD_MasrafYeri");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatListField01)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.VatListField02)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.VatListField03)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.VatListField04)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.VatListField05)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.VatRateAccommodation).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.WithholdingAmount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Forex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Forex).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Box");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Cash");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.CostInventory)
                    .WithMany(p => p.ErpInventoryReceiptItemCostInventories)
                    .HasForeignKey(d => d.CostInventoryId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Inventory_DBOnly");

                entity.HasOne(d => d.CostOrderReceipt)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.CostOrderReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_OrderReceipt_DBOnly");

                entity.HasOne(d => d.Ctsp)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.CtspId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Meta_Ctsp");

                entity.HasOne(d => d.CurrentAccountReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.CurrentAccountReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_CurrentAccountReceiptItem");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_CurrentAccount");

                entity.HasOne(d => d.DemandReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.DemandReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_DemandReceiptItem");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Department");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Discount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpInventoryReceiptItemEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Expense");

                entity.HasOne(d => d.Expo)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ExpoId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Expo");

                entity.HasOne(d => d.ExpoItem)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ExpoItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_ExpoItem");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Meta_Forex");

                entity.HasOne(d => d.GiftVoucher)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.GiftVoucherId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_GiftVoucher");

                entity.HasOne(d => d.InWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptItemInWarehouses)
                    .HasForeignKey(d => d.InWarehouseId)
                    .HasConstraintName("FK_InventoryReceiptItem_Warehouse");

                entity.HasOne(d => d.InWarehouseLocation)
                    .WithMany(p => p.ErpInventoryReceiptItemInWarehouseLocations)
                    .HasForeignKey(d => d.InWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_WarehouseLocation");

                entity.HasOne(d => d.InventoryAssortment)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.InventoryAssortmentId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryAssortment");

                entity.HasOne(d => d.InventoryCampaign)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.InventoryCampaignId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryCampaign");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryReceiptItemInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryReceiptItem_Inventory");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_InventoryReceiptItem_InventoryReceipt");

                entity.HasOne(d => d.InvoiceItem)
                    .WithMany(p => p.InverseInvoiceItem)
                    .HasForeignKey(d => d.InvoiceItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryReceiptItem4_DBOnly");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpInventoryReceiptItemLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_LabRecipe");

                entity.HasOne(d => d.ManufactureReceiptItem)
                    .WithMany(p => p.InverseManufactureReceiptItem)
                    .HasForeignKey(d => d.ManufactureReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryReceiptItem2_DBOnly");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Model");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_OrderReceiptItem");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptItemOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_InventoryReceiptItem_Warehouse1");

                entity.HasOne(d => d.OutWarehouseLocation)
                    .WithMany(p => p.ErpInventoryReceiptItemOutWarehouseLocations)
                    .HasForeignKey(d => d.OutWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_WarehouseLocation1");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.PackagingId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Packaging");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpInventoryReceiptItemPatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_LabRecipe2");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_PaymentPlan");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Project");

                entity.HasOne(d => d.QcrejectedWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptItemQcrejectedWarehouses)
                    .HasForeignKey(d => d.QcrejectedWarehouseId)
                    .HasConstraintName("FK_InventoryReceiptItem_Warehouse2");

                entity.HasOne(d => d.QualityType)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.QualityTypeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_QualityType");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Recipe");

                entity.HasOne(d => d.ReservedReceiptItem)
                    .WithMany(p => p.InverseReservedReceiptItem)
                    .HasForeignKey(d => d.ReservedReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryReceiptItem5_DBOnly");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Resource");

                entity.HasOne(d => d.ReturnReceiptItem)
                    .WithMany(p => p.InverseReturnReceiptItem)
                    .HasForeignKey(d => d.ReturnReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryReceiptItem1_DBOnly");

                entity.HasOne(d => d.ReturnType)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ReturnTypeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_ReturnType");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Route");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Service");

                entity.HasOne(d => d.TransferOutReceiptItem)
                    .WithMany(p => p.InverseTransferOutReceiptItem)
                    .HasForeignKey(d => d.TransferOutReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_InventoryReceiptItem3_DBOnly");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Meta_UnitSetItem");

                entity.HasOne(d => d.UsedEmployee)
                    .WithMany(p => p.ErpInventoryReceiptItemUsedEmployees)
                    .HasForeignKey(d => d.UsedEmployeeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Employee1");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInventoryReceiptItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInventoryReceiptItemAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryReceiptItemAttachment");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_InventoryReceiptItemAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItemAttachments)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemAttachment_Erp_InventoryReceiptItem");
            });

            modelBuilder.Entity<ErpInventoryReceiptItemPayment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryReceiptItemPayments");

                entity.HasIndex(e => e.PosReceiptId, "Erp_InventoryReceiptItemPayments_IX0");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_InventoryReceiptItemPayments_IX1");

                entity.HasIndex(e => e.CurrentAccountReceiptItemId, "Erp_InventoryReceiptItemPayments_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemPaymentAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccountReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItemPayments)
                    .HasForeignKey(d => d.CurrentAccountReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemPayments_Erp_CurrentAccountReceiptItem");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItemPayments)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemPayments_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpInventoryReceiptItemPayments)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemPayments_Erp_Pos");
            });

            modelBuilder.Entity<ErpInventoryReceiptItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryReceiptItemVariant");

                entity.ToTable("Erp_InventoryReceiptItemVariant");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_InventoryReceiptItemVariant_IX0");

                entity.HasIndex(e => e.InWarehouseId, "Erp_InventoryReceiptItemVariant_IX1");

                entity.HasIndex(e => e.DemandReceiptItemVariantId, "Erp_InventoryReceiptItemVariant_IX10");

                entity.HasIndex(e => e.ReservedReceiptItemVariantId, "Erp_InventoryReceiptItemVariant_IX11");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_InventoryReceiptItemVariant_IX2");

                entity.HasIndex(e => e.InWarehouseLocationId, "Erp_InventoryReceiptItemVariant_IX3");

                entity.HasIndex(e => e.OutWarehouseLocationId, "Erp_InventoryReceiptItemVariant_IX4");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryReceiptItemVariant_IX5");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryReceiptItemVariant_IX6");

                entity.HasIndex(e => e.ReturnReceiptItemVariantId, "Erp_InventoryReceiptItemVariant_IX7");

                entity.HasIndex(e => e.TransferOutReceiptItemVariantId, "Erp_InventoryReceiptItemVariant_IX8");

                entity.HasIndex(e => e.OrderReceiptItemVariantId, "Erp_InventoryReceiptItemVariant_IX9");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsQcapproved).HasColumnName("IsQCApproved");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OpeningQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OutflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QcrejectedQuantity)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("QCRejectedQuantity");

                entity.Property(e => e.QcrejectedWarehouseId).HasColumnName("QCRejectedWarehouseId");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReturnedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferInflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferOutflowQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DemandReceiptItemVariant)
                    .WithMany(p => p.ErpInventoryReceiptItemVariants)
                    .HasForeignKey(d => d.DemandReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_DemandReceiptItemVariant");

                entity.HasOne(d => d.InWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptItemVariantInWarehouses)
                    .HasForeignKey(d => d.InWarehouseId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_Warehouse");

                entity.HasOne(d => d.InWarehouseLocation)
                    .WithMany(p => p.ErpInventoryReceiptItemVariantInWarehouseLocations)
                    .HasForeignKey(d => d.InWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_WarehouseLocation");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_InventoryReceiptItemVariant_InventoryReceiptItem");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_InventoryReceiptItemVariant_InventoryVariant");

                entity.HasOne(d => d.OrderReceiptItemVariant)
                    .WithMany(p => p.ErpInventoryReceiptItemVariants)
                    .HasForeignKey(d => d.OrderReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_OrderReceiptItemVariant");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptItemVariantOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_Warehouse1");

                entity.HasOne(d => d.OutWarehouseLocation)
                    .WithMany(p => p.ErpInventoryReceiptItemVariantOutWarehouseLocations)
                    .HasForeignKey(d => d.OutWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_WarehouseLocation1");

                entity.HasOne(d => d.QcrejectedWarehouse)
                    .WithMany(p => p.ErpInventoryReceiptItemVariantQcrejectedWarehouses)
                    .HasForeignKey(d => d.QcrejectedWarehouseId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_Warehouse2");

                entity.HasOne(d => d.ReservedReceiptItemVariant)
                    .WithMany(p => p.InverseReservedReceiptItemVariant)
                    .HasForeignKey(d => d.ReservedReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_InventoryReceiptItemVariant2_DBOnly");

                entity.HasOne(d => d.ReturnReceiptItemVariant)
                    .WithMany(p => p.InverseReturnReceiptItemVariant)
                    .HasForeignKey(d => d.ReturnReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_InventoryReceiptItemVariant_DBOnly");

                entity.HasOne(d => d.TransferOutReceiptItemVariant)
                    .WithMany(p => p.InverseTransferOutReceiptItemVariant)
                    .HasForeignKey(d => d.TransferOutReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_InventoryReceiptItemVariant1_DBOnly");

                entity.HasOne(d => d.WorkOrderItemVariant)
                    .WithMany(p => p.ErpInventoryReceiptItemVariants)
                    .HasForeignKey(d => d.WorkOrderItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptItemVariant_Erp_WorkOrderItemVariant");
            });

            modelBuilder.Entity<ErpInventoryReceiptShipment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryReceiptShipment");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_InventoryReceiptShipment_IX0");

                entity.HasIndex(e => e.InventoryReceiptItemVariantId, "Erp_InventoryReceiptShipment_IX1");

                entity.HasIndex(e => e.WarehouseLocationId, "Erp_InventoryReceiptShipment_IX2");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryReceiptShipment_IX3");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryReceiptShipment_IX4");

                entity.HasIndex(e => e.SerialCardId, "Erp_InventoryReceiptShipment_IX5");

                entity.HasIndex(e => e.BoxItemId, "Erp_InventoryReceiptShipment_IX6");

                entity.HasIndex(e => e.BoxId, "Erp_InventoryReceiptShipment_IX7");

                entity.Property(e => e.BoxedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShipmentQuantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_Box");

                entity.HasOne(d => d.BoxItem)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.BoxItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_BoxItem");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.InventoryReceiptItemVariant)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.InventoryReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_InventoryReceiptItemVariant");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_InventoryVariant");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_InventorySerialCard");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_Vehicle");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpInventoryReceiptShipments)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventoryReceiptShipment_Erp_WarehouseLocation");
            });

            modelBuilder.Entity<ErpInventorySerialAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventorySerialAttachment");

                entity.HasIndex(e => e.SerialCardId, "Erp_InventorySerialAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpInventorySerialAttachments)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_InventorySerialAttachment_Erp_InventorySerialCard");
            });

            modelBuilder.Entity<ErpInventorySerialCard>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_SerialCard");

                entity.ToTable("Erp_InventorySerialCard");

                entity.HasIndex(e => e.AsservicePartnerId, "Erp_InventorySerialCardASServicePartnerId_Index");

                entity.HasIndex(e => e.OwnerId, "Erp_InventorySerialCardMachineOwner_Index");

                entity.HasIndex(e => e.UniqueCode, "Erp_InventorySerialCardUniqueCode_Index");

                entity.HasIndex(e => new { e.CompanyId, e.IsMainSerial, e.InventoryId, e.SerialCode }, "Erp_InventorySerialCard_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.InventoryId, "Erp_InventorySerialCard_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventorySerialCard_IX2");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_InventorySerialCard_IX3");

                entity.HasIndex(e => e.WorkOrderId, "Erp_InventorySerialCard_IX4");

                entity.HasIndex(e => new { e.CompanyId, e.SerialCode, e.InventoryId }, "Erp_InventorySerialCard_IX6");

                entity.Property(e => e.AsservicePartnerId).HasColumnName("ASServicePartnerId");

                entity.Property(e => e.ChassisSerialNo).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EngineSerialNo).HasMaxLength(100);

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterimChassisSerialNo).HasMaxLength(100);

                entity.Property(e => e.ManufacturingDate).HasColumnType("datetime");

                entity.Property(e => e.PartyNo).HasMaxLength(25);

                entity.Property(e => e.QualityControlDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SecondQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SerialCode).HasMaxLength(100);

                entity.Property(e => e.UniqueCode).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WarrantyEndDate).HasColumnType("datetime");

                entity.Property(e => e.WarrantyStartDate).HasColumnType("datetime");

                entity.HasOne(d => d.AsservicePartner)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.AsservicePartnerId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_CurrentAccount");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_Company");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_SerialCard_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_SerialCard_InventoryVariant");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_MachineOwner");

                entity.HasOne(d => d.ParentSerial)
                    .WithMany(p => p.InverseParentSerial)
                    .HasForeignKey(d => d.ParentSerialId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_InventorySerialCard_DBOnly");

                entity.HasOne(d => d.QualityControl)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.QualityControlId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_QualityControl");

                entity.HasOne(d => d.QualityType)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.QualityTypeId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_QualityType");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_Resource");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpInventorySerialCards)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_InventorySerialCard_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpInventorySerialCardItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventorySerialCardItem");

                entity.HasIndex(e => new { e.ItemType, e.SerialCardId, e.FaultyId }, "Erp_InventorySerialCardItem_IX0");

                entity.HasIndex(e => new { e.ItemType, e.SerialCardId, e.ItemOrderNo }, "Erp_InventorySerialCardItem_IX1");

                entity.HasIndex(e => e.SerialCardId, "Erp_InventorySerialCardItem_IX3");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FaultyEndMeter).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FaultyPoint).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FaultyQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FaultyStartMeter).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemInsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpInventorySerialCardItems)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_InventorySerialCardItem_Erp_Employee");

                entity.HasOne(d => d.Faulty)
                    .WithMany(p => p.ErpInventorySerialCardItems)
                    .HasForeignKey(d => d.FaultyId)
                    .HasConstraintName("FK_Erp_InventorySerialCardItem_Erp_FaultyCard");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpInventorySerialCardItems)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_InventorySerialCardItem_Erp_InventorySerialCard");
            });

            modelBuilder.Entity<ErpInventorySerialCardTotal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventorySerialCardTotal");

                entity.HasIndex(e => e.SerialCardId, "Erp_InventorySerialCardTotal_IX1");

                entity.HasIndex(e => e.Quantity, "Erp_InventorySerialCardTotal_IX2");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpInventorySerialCardTotals)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_InventorySerialCardTotal_Erp_InventorySerialCard");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpInventorySerialCardTotals)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_InventorySerialCardTotal_Erp_Warehouse");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpInventorySerialCardTotals)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventorySerialCardTotal_Erp_WarehouseLocation");
            });

            modelBuilder.Entity<ErpInventorySerialTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_SerialTransaction");

                entity.ToTable("Erp_InventorySerialTransaction");

                entity.HasIndex(e => e.SerialCardId, "Erp_InventorySerialTransaction_IX0");

                entity.HasIndex(e => e.ReceiptItemId, "Erp_InventorySerialTransaction_IX1");

                entity.HasIndex(e => e.WorkOrderProductionId, "Erp_InventorySerialTransaction_IX2");

                entity.HasIndex(e => new { e.WorkOrderProductionId, e.SerialCardId }, "Erp_InventorySerialTransaction_IX3");

                entity.HasIndex(e => e.InventoryAllocationId, "Erp_InventorySerialTransaction_IX4");

                entity.HasIndex(e => e.InWarehouseId, "Erp_InventorySerialTransaction_IX5");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_InventorySerialTransaction_IX6");

                entity.HasIndex(e => e.InWarehouseLocationId, "Erp_InventorySerialTransaction_IX7");

                entity.HasIndex(e => e.OutWarehouseLocationId, "Erp_InventorySerialTransaction_IX8");

                entity.HasIndex(e => e.TransferOutReceiptItemId, "Erp_InventorySerialTransaction_IX9");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InWarehouse)
                    .WithMany(p => p.ErpInventorySerialTransactionInWarehouses)
                    .HasForeignKey(d => d.InWarehouseId)
                    .HasConstraintName("FK_Erp_InventorySerialTransaction_Erp_Warehouse1");

                entity.HasOne(d => d.InWarehouseLocation)
                    .WithMany(p => p.ErpInventorySerialTransactionInWarehouseLocations)
                    .HasForeignKey(d => d.InWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventorySerialTransaction_Erp_WarehouseLocation1");

                entity.HasOne(d => d.InventoryAllocation)
                    .WithMany(p => p.ErpInventorySerialTransactions)
                    .HasForeignKey(d => d.InventoryAllocationId)
                    .HasConstraintName("FK_FK_Erp_InventorySerialTransaction_Erp_InventoryAllocation");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpInventorySerialTransactionOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_InventorySerialTransaction_Erp_Warehouse");

                entity.HasOne(d => d.OutWarehouseLocation)
                    .WithMany(p => p.ErpInventorySerialTransactionOutWarehouseLocations)
                    .HasForeignKey(d => d.OutWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventorySerialTransaction_Erp_WarehouseLocation");

                entity.HasOne(d => d.ReceiptItem)
                    .WithMany(p => p.ErpInventorySerialTransactionReceiptItems)
                    .HasForeignKey(d => d.ReceiptItemId)
                    .HasConstraintName("FK_SerialTransaction_InventoryReceiptItem");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpInventorySerialTransactions)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_SerialTransaction_SerialCard");

                entity.HasOne(d => d.TransferOutReceiptItem)
                    .WithMany(p => p.ErpInventorySerialTransactionTransferOutReceiptItems)
                    .HasForeignKey(d => d.TransferOutReceiptItemId)
                    .HasConstraintName("FK_Erp_InventorySerialTransaction_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.WorkOrderProduction)
                    .WithMany(p => p.ErpInventorySerialTransactions)
                    .HasForeignKey(d => d.WorkOrderProductionId)
                    .HasConstraintName("FK_SerialTransaction_Erp_WorkOrderProduction");
            });

            modelBuilder.Entity<ErpInventorySet>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventorySet");

                entity.HasIndex(e => new { e.CompanyId, e.SetType, e.SetCode }, "Erp_InventorySet_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SetCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInventorySets)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_InventorySet_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInventorySets)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_InventorySet_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInventorySupplier>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventorySupplier");

                entity.HasIndex(e => e.InventoryId, "Erp_InventorySupplier_IX0");

                entity.HasIndex(e => new { e.InventoryId, e.InventoryVariantId }, "Erp_InventorySupplier_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventorySupplier_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_InventorySupplier_IX3");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MinumumOrderQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PriceCode).HasMaxLength(25);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.SupplyCoefficient).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SupplyRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventorySuppliers)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventorySupplier_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInventorySuppliers)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_InventorySupplier_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventorySuppliers)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventorySupplier_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventorySuppliers)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InventorySupplier_Erp_InventoryVariant");
            });

            modelBuilder.Entity<ErpInventoryTaxUsage>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InventoryTaxUsage");

                entity.HasIndex(e => e.SalesInventoryReceiptItemId, "Erp_InventoryTaxUsage_IX1");

                entity.HasIndex(e => e.PurchaseInventoryReceiptItemId, "Erp_InventoryTaxUsage_IX2");

                entity.Property(e => e.UsedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UsedVatAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.PurchaseInventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryTaxUsagePurchaseInventoryReceiptItems)
                    .HasForeignKey(d => d.PurchaseInventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryTaxUsage_PurchaseInventoryReceiptItem");

                entity.HasOne(d => d.SalesInventoryReceiptItem)
                    .WithMany(p => p.ErpInventoryTaxUsageSalesInventoryReceiptItems)
                    .HasForeignKey(d => d.SalesInventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_InventoryTaxUsage_SalesInventoryReceiptItem");
            });

            modelBuilder.Entity<ErpInventoryTotal>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryTotal");

                entity.ToTable("Erp_InventoryTotal");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryTotal_IX0");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryTotal_IX1");

                entity.HasIndex(e => e.WarehouseId, "Erp_InventoryTotal_IX2");

                entity.HasIndex(e => new { e.InventoryId, e.WarehouseId, e.TotalDate }, "Erp_InventoryTotal_IX3");

                entity.HasIndex(e => new { e.InventoryVariantId, e.WarehouseId, e.TotalDate }, "Erp_InventoryTotal_IX4");

                entity.HasIndex(e => new { e.InventoryId, e.InventoryVariantId, e.WarehouseId, e.TotalDate }, "Erp_InventoryTotal_IX5");

                entity.Property(e => e.ActualDemand).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ActualStock).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AveragePrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedIn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedInAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedInReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedInReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedSale).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedSaleAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedSaleReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsignedSaleReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Consumed).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConsumedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Counting).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CountingAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastInDate).HasColumnType("datetime");

                entity.Property(e => e.LastInPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastOutDate).HasColumnType("datetime");

                entity.Property(e => e.LastOutPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Manufactured).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ManufacturedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ManufacturedAmountUnQc)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ManufacturedAmountUnQC");

                entity.Property(e => e.ManufacturedUnQc)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ManufacturedUnQC");

                entity.Property(e => e.OtherIn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OtherInAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OtherOut).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OtherOutAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Planned).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PreCustomerOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PreCustomerOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrePurchaseOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrePurchaseOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Purchase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseAmountUnQc)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PurchaseAmountUnQC");

                entity.Property(e => e.PurchaseOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseUnQc)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("PurchaseUnQC");

                entity.Property(e => e.Received).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceivedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Reserved).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Retail).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RetailAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RetailReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RetailReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesCostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SalesReturnCostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Shipped).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShippedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorInAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorInReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorInReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOutAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOutReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOutReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalDate).HasColumnType("datetime");

                entity.Property(e => e.TotalInflow).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalInflowAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalOutflow).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalOutflowAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferIn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferInAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferOut).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TransferOutAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UdInflow).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UdInflowAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UdOutflow).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UdOutflowAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Wasted).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WastedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WholeSale).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WholeSaleAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WholeSaleReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WholeSaleReturnAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryTotals)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryTotal_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryTotals)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_InventoryTotal_Erp_InventoryVariant");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpInventoryTotals)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_InventoryTotal_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpInventoryUnitItemSize>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryUnitItemSize");

                entity.ToTable("Erp_InventoryUnitItemSize");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryUnitItemSize_IX0");

                entity.HasIndex(e => new { e.InventoryId, e.UnitItemId }, "Erp_InventoryUnitItemSize_IX1");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UnitArea).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitHeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitVolume).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitWeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryUnitItemSizes)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryUnitItemSize_Inventory");

                entity.HasOne(d => d.UnitItem)
                    .WithMany(p => p.ErpInventoryUnitItemSizes)
                    .HasForeignKey(d => d.UnitItemId)
                    .HasConstraintName("FK_InventoryUnitItemSize_UnitSetItem");
            });

            modelBuilder.Entity<ErpInventoryVariant>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryVariant");

                entity.ToTable("Erp_InventoryVariant");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryVariant_IX0");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryVariant_Inventory");

                entity.HasOne(d => d.Variant1)
                    .WithMany(p => p.ErpInventoryVariantVariant1s)
                    .HasForeignKey(d => d.Variant1Id)
                    .HasConstraintName("FK_InventoryVariant_VariantItem1");

                entity.HasOne(d => d.Variant1Type)
                    .WithMany(p => p.ErpInventoryVariantVariant1Types)
                    .HasForeignKey(d => d.Variant1TypeId)
                    .HasConstraintName("FK_InventoryVariant_VariantType1");

                entity.HasOne(d => d.Variant2)
                    .WithMany(p => p.ErpInventoryVariantVariant2s)
                    .HasForeignKey(d => d.Variant2Id)
                    .HasConstraintName("FK_InventoryVariant_VariantItem2");

                entity.HasOne(d => d.Variant2Type)
                    .WithMany(p => p.ErpInventoryVariantVariant2Types)
                    .HasForeignKey(d => d.Variant2TypeId)
                    .HasConstraintName("FK_InventoryVariant_VariantType2");

                entity.HasOne(d => d.Variant3)
                    .WithMany(p => p.ErpInventoryVariantVariant3s)
                    .HasForeignKey(d => d.Variant3Id)
                    .HasConstraintName("FK_InventoryVariant_VariantItem3");

                entity.HasOne(d => d.Variant3Type)
                    .WithMany(p => p.ErpInventoryVariantVariant3Types)
                    .HasForeignKey(d => d.Variant3TypeId)
                    .HasConstraintName("FK_InventoryVariant_VariantType3");

                entity.HasOne(d => d.Variant4)
                    .WithMany(p => p.ErpInventoryVariantVariant4s)
                    .HasForeignKey(d => d.Variant4Id)
                    .HasConstraintName("FK_InventoryVariant_VariantItem4");

                entity.HasOne(d => d.Variant4Type)
                    .WithMany(p => p.ErpInventoryVariantVariant4Types)
                    .HasForeignKey(d => d.Variant4TypeId)
                    .HasConstraintName("FK_InventoryVariant_VariantType4");

                entity.HasOne(d => d.Variant5)
                    .WithMany(p => p.ErpInventoryVariantVariant5s)
                    .HasForeignKey(d => d.Variant5Id)
                    .HasConstraintName("FK_InventoryVariant_VariantItem5");

                entity.HasOne(d => d.Variant5Type)
                    .WithMany(p => p.ErpInventoryVariantVariant5Types)
                    .HasForeignKey(d => d.Variant5TypeId)
                    .HasConstraintName("FK_InventoryVariant_VariantType5");
            });

            modelBuilder.Entity<ErpInventoryWarehouse>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryWarehouse");

                entity.ToTable("Erp_InventoryWarehouse");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryWarehouse_IX0");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_InventoryWarehouse_IX1");

                entity.HasIndex(e => e.WarehouseId, "Erp_InventoryWarehouse_IX2");

                entity.HasIndex(e => new { e.WarehouseId, e.DefaultWarehouseLocationId }, "Erp_InventoryWarehouse_IX3");

                entity.HasIndex(e => new { e.InventoryId, e.InventoryVariantId, e.WarehouseId }, "Erp_InventoryWarehouse_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.McontrolType).HasColumnName("MControlType");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OptimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DefaultWarehouseLocation)
                    .WithMany(p => p.ErpInventoryWarehouses)
                    .HasForeignKey(d => d.DefaultWarehouseLocationId)
                    .HasConstraintName("FK_Erp_InventoryWarehouse_Erp_WarehouseLocation");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryWarehouses)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_InventoryWarehouse_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpInventoryWarehouses)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_InventoryWarehouse_InventoryVariant");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpInventoryWarehouses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_InventoryWarehouse_Warehouse");
            });

            modelBuilder.Entity<ErpInventoryWorkStudy>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryWorkStudy");

                entity.ToTable("Erp_InventoryWorkStudy");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryWorkStudy_IX0");

                entity.HasIndex(e => new { e.InventoryId, e.ProcessId }, "Erp_InventoryWorkStudy_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ScissorsCount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Segment).HasMaxLength(25);

                entity.Property(e => e.StandartTime1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTime2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTime3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTimeActual).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTimeDistribution).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTimeInitial).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInventoryWorkStudies)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_CurrentAccount");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryWorkStudies)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_Inventory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpInventoryWorkStudyProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_Process");

                entity.HasOne(d => d.ProductionProcess)
                    .WithMany(p => p.ErpInventoryWorkStudyProductionProcesses)
                    .HasForeignKey(d => d.ProductionProcessId)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_Process1");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpInventoryWorkStudies)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_Resource");

                entity.HasOne(d => d.Variant1)
                    .WithMany(p => p.ErpInventoryWorkStudyVariant1s)
                    .HasForeignKey(d => d.Variant1Id)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_VariantItem");

                entity.HasOne(d => d.Variant2)
                    .WithMany(p => p.ErpInventoryWorkStudyVariant2s)
                    .HasForeignKey(d => d.Variant2Id)
                    .HasConstraintName("FK_Erp_InventoryWorkStudy_Erp_VariantItem1");
            });

            modelBuilder.Entity<ErpInventoryWorkplace>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_InventoryWorkplace");

                entity.ToTable("Erp_InventoryWorkplace");

                entity.HasIndex(e => e.InventoryId, "Erp_InventoryWorkplace_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpInventoryWorkplaces)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_InventoryWorkplace_Erp_Inventory");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpInventoryWorkplaces)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_InventoryWorkplace_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInventoryWorkplaces)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_InventoryWorkplace_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInvoice>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Invoice");

                entity.ToTable("Erp_Invoice");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_Invoice_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Invoice_IX1");

                entity.HasIndex(e => e.CashId, "Erp_Invoice_IX10");

                entity.HasIndex(e => e.TransporterId, "Erp_Invoice_IX11");

                entity.HasIndex(e => e.VehicleId, "Erp_Invoice_IX12");

                entity.HasIndex(e => e.InventoryReceiptId, "Erp_Invoice_IX13");

                entity.HasIndex(e => e.WorkOrderReceiptId, "Erp_Invoice_IX14");

                entity.HasIndex(e => e.GlreceiptId, "Erp_Invoice_IX15");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_Invoice_IX16");

                entity.HasIndex(e => e.AddressId, "Erp_Invoice_IX17");

                entity.HasIndex(e => e.CustomerId, "Erp_Invoice_IX18");

                entity.HasIndex(e => e.CustomerAddressId, "Erp_Invoice_IX19");

                entity.HasIndex(e => e.ShipToCurrentAccountId, "Erp_Invoice_IX2");

                entity.HasIndex(e => e.ShipToAddressId, "Erp_Invoice_IX20");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_Invoice_IX21");

                entity.HasIndex(e => e.PosReceiptId, "Erp_Invoice_IX22");

                entity.HasIndex(e => e.BankCreditItemId, "Erp_Invoice_IX23");

                entity.HasIndex(e => e.InWarehouseId, "Erp_Invoice_IX3");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_Invoice_IX4");

                entity.HasIndex(e => e.CostCenterId, "Erp_Invoice_IX5");

                entity.HasIndex(e => e.DealerId, "Erp_Invoice_IX6");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_Invoice_IX7");

                entity.HasIndex(e => e.ProjectId, "Erp_Invoice_IX8");

                entity.HasIndex(e => e.EmployeeId, "Erp_Invoice_IX9");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.BlockedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DischargeDate).HasColumnType("datetime");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGross).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGrossForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.EarchivesCargoId).HasColumnName("EArchivesCargoId");

                entity.Property(e => e.EarchivesInstallationNo)
                    .HasMaxLength(50)
                    .HasColumnName("EArchivesInstallationNo");

                entity.Property(e => e.EarchivesPaymentType)
                    .HasMaxLength(100)
                    .HasColumnName("EArchivesPaymentType");

                entity.Property(e => e.EarchivesPaymentTypeOtherExp)
                    .HasMaxLength(100)
                    .HasColumnName("EArchivesPaymentTypeOtherExp");

                entity.Property(e => e.EarchivesSendDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EArchivesSendDate");

                entity.Property(e => e.EarchivesShippingType)
                    .HasMaxLength(25)
                    .HasColumnName("EArchivesShippingType");

                entity.Property(e => e.EarchivesSummaryValue)
                    .HasMaxLength(100)
                    .HasColumnName("EArchivesSummaryValue");

                entity.Property(e => e.EarchivesWebAddress)
                    .HasMaxLength(100)
                    .HasColumnName("EArchivesWebAddress");

                entity.Property(e => e.EinvoiceGuid)
                    .HasMaxLength(50)
                    .HasColumnName("EInvoiceGuid");

                entity.Property(e => e.EinvoiceNo).HasColumnName("EInvoiceNo");

                entity.Property(e => e.EinvoicePeriodEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("EInvoicePeriodEnd");

                entity.Property(e => e.EinvoicePeriodStart)
                    .HasColumnType("datetime")
                    .HasColumnName("EInvoicePeriodStart");

                entity.Property(e => e.EinvoiceScenario).HasColumnName("EInvoiceScenario");

                entity.Property(e => e.EinvoiceStatus).HasColumnName("EInvoiceStatus");

                entity.Property(e => e.EinvoiceTaxExemptionReasonCode)
                    .HasMaxLength(25)
                    .HasColumnName("EInvoiceTaxExemptionReasonCode");

                entity.Property(e => e.EinvoiceTaxTypeCode)
                    .HasMaxLength(25)
                    .HasColumnName("EInvoiceTaxTypeCode");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GlreceiptId1).HasColumnName("GLReceiptId1");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsEinvoice).HasColumnName("IsEInvoice");

                entity.Property(e => e.IsEsendMail).HasColumnName("IsESendMail");

                entity.Property(e => e.IsEtrade).HasColumnName("IsETrade");

                entity.Property(e => e.IsForexEinvoice).HasColumnName("IsForexEInvoice");

                entity.Property(e => e.IsSendEinvoice).HasColumnName("IsSendEInvoice");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.PackageMark).HasMaxLength(50);

                entity.Property(e => e.PackagingNo).HasMaxLength(25);

                entity.Property(e => e.QcrejectedWarehouseId).HasColumnName("QCRejectedWarehouseId");

                entity.Property(e => e.Rate1).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate1Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate1AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate1AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate1AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate2Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate2AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate3Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate3AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate4Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate4AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Rate5Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5AmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5AmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Rate5AmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.ReturnOperationType).HasMaxLength(25);

                entity.Property(e => e.RoundingAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SgkDocumentNo).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.TradeName).HasMaxLength(1000);

                entity.Property(e => e.UdEinvoiceIntegratorInvoiceId)
                    .HasMaxLength(50)
                    .HasColumnName("UD_EInvoiceIntegratorInvoiceId");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatListField01).HasMaxLength(50);

                entity.Property(e => e.VatListField02).HasMaxLength(50);

                entity.Property(e => e.VatListField03).HasMaxLength(50);

                entity.Property(e => e.VatListField05).HasMaxLength(50);

                entity.Property(e => e.WithholdingAmount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Forex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Forex).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpInvoiceAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Address");

                entity.HasOne(d => d.BankCreditItem)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.BankCreditItemId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_BankCreditItem");

                entity.HasOne(d => d.Broker)
                    .WithMany(p => p.ErpInvoiceBrokers)
                    .HasForeignKey(d => d.BrokerId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount4");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Company");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccountContact");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccountBank)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.CurrentAccountBankId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccountBank");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpInvoiceCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccountReceiptItem");

                entity.HasOne(d => d.CustomerAddress)
                    .WithMany(p => p.ErpInvoiceCustomerAddresses)
                    .HasForeignKey(d => d.CustomerAddressId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Address1");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpInvoiceCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount3");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CustomerTransaction");

                entity.HasOne(d => d.CustomsCurrentAccount)
                    .WithMany(p => p.ErpInvoiceCustomsCurrentAccounts)
                    .HasForeignKey(d => d.CustomsCurrentAccountId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount6");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpInvoiceDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount2");

                entity.HasOne(d => d.EarchivesCargo)
                    .WithMany(p => p.ErpInvoiceEarchivesCargos)
                    .HasForeignKey(d => d.EarchivesCargoId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount7");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Invoice_Meta_Forex");

                entity.HasOne(d => d.ForexRateDifferenceInvoice)
                    .WithMany(p => p.InverseForexRateDifferenceInvoice)
                    .HasForeignKey(d => d.ForexRateDifferenceInvoiceId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_InvoiceForexRateDifferenceInvoiceId_DBOnly");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpInvoiceGlreceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_GLReceipt");

                entity.HasOne(d => d.GlreceiptId1Navigation)
                    .WithMany(p => p.ErpInvoiceGlreceiptId1Navigations)
                    .HasForeignKey(d => d.GlreceiptId1)
                    .HasConstraintName("FK_Erp_Invoice_Erp_GLReceipt1");

                entity.HasOne(d => d.InWarehouse)
                    .WithMany(p => p.ErpInvoiceInWarehouses)
                    .HasForeignKey(d => d.InWarehouseId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Warehouse");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_InventoryReceipt");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.ErpInvoiceManufacturers)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount8");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpInvoiceOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Warehouse1");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_PaymentCard");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_PaymentPlan");

                entity.HasOne(d => d.PaymentToCurrentAccount)
                    .WithMany(p => p.ErpInvoicePaymentToCurrentAccounts)
                    .HasForeignKey(d => d.PaymentToCurrentAccountId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount5");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Pos");

                entity.HasOne(d => d.PriceDifferenceInvoice)
                    .WithMany(p => p.InversePriceDifferenceInvoice)
                    .HasForeignKey(d => d.PriceDifferenceInvoiceId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_InvoicePriceDifferenceInvoiceId_DBOnly");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Project");

                entity.HasOne(d => d.QcrejectedWarehouse)
                    .WithMany(p => p.ErpInvoiceQcrejectedWarehouses)
                    .HasForeignKey(d => d.QcrejectedWarehouseId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Warehouse2");

                entity.HasOne(d => d.ShipToAddress)
                    .WithMany(p => p.ErpInvoiceShipToAddresses)
                    .HasForeignKey(d => d.ShipToAddressId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Address2");

                entity.HasOne(d => d.ShipToCurrentAccount)
                    .WithMany(p => p.ErpInvoiceShipToCurrentAccounts)
                    .HasForeignKey(d => d.ShipToCurrentAccountId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_CurrentAccount1");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Transporter");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Vehicle");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpInvoices)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Invoice_Erp_Workplace");
            });

            modelBuilder.Entity<ErpInvoiceAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_InvoiceAttachment");

                entity.HasIndex(e => e.InvoiceId, "Erp_InvoiceAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsUsingEinvoice).HasColumnName("IsUsingEInvoice");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpInvoiceAttachments)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_InvoiceAttachment_Erp_Invoice");
            });

            modelBuilder.Entity<ErpLabRecipe>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LabRecipe");

                entity.HasIndex(e => new { e.CompanyId, e.LabRecipeType, e.LabRecipeCode }, "Erp_LabRecipe_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Capacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerRecipeCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DemandDate).HasColumnType("datetime");

                entity.Property(e => e.DyeingGraphics).HasColumnType("image");

                entity.Property(e => e.DyeingGraphics2).HasColumnType("image");

                entity.Property(e => e.EngravingHeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EngravingWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LabRecipeCode).HasMaxLength(25);

                entity.Property(e => e.LabRecipeName).HasMaxLength(50);

                entity.Property(e => e.PantoneNo).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReportHeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReportSlide).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReportWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TemplateInDate).HasColumnType("datetime");

                entity.Property(e => e.TemplateWorkDate).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VariantExplanation).HasMaxLength(50);

                entity.Property(e => e.WashingGraphics).HasColumnType("image");

                entity.Property(e => e.WashingGraphics2).HasColumnType("image");

                entity.Property(e => e.Weight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Width).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WorkDate).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpLabRecipes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpLabRecipes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_CurrentAccount");

                entity.HasOne(d => d.DyeingRecipeProgram2)
                    .WithMany(p => p.ErpLabRecipeDyeingRecipeProgram2s)
                    .HasForeignKey(d => d.DyeingRecipeProgram2Id)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_RecipeProgram1");

                entity.HasOne(d => d.DyeingRecipeProgram3)
                    .WithMany(p => p.ErpLabRecipeDyeingRecipeProgram3s)
                    .HasForeignKey(d => d.DyeingRecipeProgram3Id)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_RecipeProgram4");

                entity.HasOne(d => d.DyeingRecipeProgram)
                    .WithMany(p => p.ErpLabRecipeDyeingRecipePrograms)
                    .HasForeignKey(d => d.DyeingRecipeProgramId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_RecipeProgram");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpLabRecipes)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpLabRecipes)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_LabRecipe_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpLabRecipes)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_Inventory");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_LabRecipe_DBOnly");

                entity.HasOne(d => d.WashingRecipeProgram2)
                    .WithMany(p => p.ErpLabRecipeWashingRecipeProgram2s)
                    .HasForeignKey(d => d.WashingRecipeProgram2Id)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_RecipeProgram3");

                entity.HasOne(d => d.WashingRecipeProgram3)
                    .WithMany(p => p.ErpLabRecipeWashingRecipeProgram3s)
                    .HasForeignKey(d => d.WashingRecipeProgram3Id)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_RecipeProgram5");

                entity.HasOne(d => d.WashingRecipeProgram)
                    .WithMany(p => p.ErpLabRecipeWashingRecipePrograms)
                    .HasForeignKey(d => d.WashingRecipeProgramId)
                    .HasConstraintName("FK_Erp_LabRecipe_Erp_RecipeProgram2");
            });

            modelBuilder.Entity<ErpLabRecipeItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LabRecipeItem");

                entity.HasIndex(e => e.LabRecipeId, "Erp_LabRecipeItem_IX0");

                entity.HasIndex(e => e.LabRecipeRevId, "Erp_LabRecipeItem_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpLabRecipeItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_LabRecipeItem_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpLabRecipeItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_LabRecipeItem_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpLabRecipeItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_LabRecipeItem_Erp_Inventory");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpLabRecipeItems)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_LabRecipeItem_Erp_LabRecipe");

                entity.HasOne(d => d.LabRecipeRev)
                    .WithMany(p => p.ErpLabRecipeItems)
                    .HasForeignKey(d => d.LabRecipeRevId)
                    .HasConstraintName("FK_Erp_LabRecipeItem_Erp_LabRecipeRev");
            });

            modelBuilder.Entity<ErpLabRecipeRev>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LabRecipeRev");

                entity.HasIndex(e => new { e.LabRecipeId, e.ParentId, e.RevNo }, "Erp_LabRecipeRev_IX0")
                    .IsUnique();

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DilutionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DyeRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DyeingGraphics).HasColumnType("image");

                entity.Property(e => e.DyeingGraphics2).HasColumnType("image");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Rakle).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Viscosity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WashingGraphics).HasColumnType("image");

                entity.Property(e => e.WashingGraphics2).HasColumnType("image");

                entity.Property(e => e.WorkDate).HasColumnType("datetime");

                entity.HasOne(d => d.DyeingRecipeProgram2)
                    .WithMany(p => p.ErpLabRecipeRevDyeingRecipeProgram2s)
                    .HasForeignKey(d => d.DyeingRecipeProgram2Id)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram2");

                entity.HasOne(d => d.DyeingRecipeProgram3)
                    .WithMany(p => p.ErpLabRecipeRevDyeingRecipeProgram3s)
                    .HasForeignKey(d => d.DyeingRecipeProgram3Id)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram4");

                entity.HasOne(d => d.DyeingRecipeProgram)
                    .WithMany(p => p.ErpLabRecipeRevDyeingRecipePrograms)
                    .HasForeignKey(d => d.DyeingRecipeProgramId)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpLabRecipeRevs)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_LabRecipe");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_LabRecipeRev");

                entity.HasOne(d => d.PatternRecipeProgram)
                    .WithMany(p => p.ErpLabRecipeRevPatternRecipePrograms)
                    .HasForeignKey(d => d.PatternRecipeProgramId)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram6");

                entity.HasOne(d => d.WashingRecipeProgram2)
                    .WithMany(p => p.ErpLabRecipeRevWashingRecipeProgram2s)
                    .HasForeignKey(d => d.WashingRecipeProgram2Id)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram3");

                entity.HasOne(d => d.WashingRecipeProgram3)
                    .WithMany(p => p.ErpLabRecipeRevWashingRecipeProgram3s)
                    .HasForeignKey(d => d.WashingRecipeProgram3Id)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram5");

                entity.HasOne(d => d.WashingRecipeProgram)
                    .WithMany(p => p.ErpLabRecipeRevWashingRecipePrograms)
                    .HasForeignKey(d => d.WashingRecipeProgramId)
                    .HasConstraintName("FK_Erp_LabRecipeRev_Erp_RecipeProgram1");
            });

            modelBuilder.Entity<ErpLocalization>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Erp_Localizationl");

                entity.ToTable("Erp_Localization");

                entity.HasIndex(e => new { e.TableName, e.FieldName, e.UniqueId }, "Erp_Localization_IX1");

                entity.HasIndex(e => new { e.TableName, e.FieldName, e.SourceId }, "Erp_Localization_IX2");

                entity.HasIndex(e => e.UniqueId, "Erp_Localization_IX3");

                entity.HasIndex(e => e.Language, "Erp_Localization_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FieldName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<ErpLoyalityCard>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCard");

                entity.HasIndex(e => new { e.CompanyId, e.LoyalityCardCode }, "Erp_LoyalityCard_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_LoyalityCard_IX1");

                entity.HasIndex(e => e.LoyalityCardTypeId, "Erp_LoyalityCard_IX2");

                entity.HasIndex(e => e.ParentCardId, "Erp_LoyalityCard_IX3");

                entity.HasIndex(e => e.CashId, "Erp_LoyalityCard_IX4");

                entity.HasIndex(e => e.PaymentCardId, "Erp_LoyalityCard_IX5");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CriticalLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountGroupCode).HasMaxLength(25);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InvalidEndDate).HasColumnType("datetime");

                entity.Property(e => e.InvalidStartDate).HasColumnType("datetime");

                entity.Property(e => e.Limit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LimitForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LoyalityCardCode).HasMaxLength(25);

                entity.Property(e => e.PriceGroupCode).HasMaxLength(25);

                entity.Property(e => e.ProxyNo).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UsedLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UsedLimitForex).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpLoyalityCards)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpLoyalityCards)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpLoyalityCards)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_CurrentAccount");

                entity.HasOne(d => d.LoyalityCardType)
                    .WithMany(p => p.ErpLoyalityCards)
                    .HasForeignKey(d => d.LoyalityCardTypeId)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_LoyalityCardType");

                entity.HasOne(d => d.ParentCard)
                    .WithMany(p => p.InverseParentCard)
                    .HasForeignKey(d => d.ParentCardId)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_LoyalityCard");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpLoyalityCards)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_PaymentCard");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpLoyalityCards)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_LoyalityCard_Erp_Workplace");
            });

            modelBuilder.Entity<ErpLoyalityCardDept>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCardDept");

                entity.HasIndex(e => e.LoyalityCardId, "Erp_LoyalityCardDept_IX0");

                entity.HasIndex(e => e.DepartmentId, "Erp_LoyalityCardDept_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpLoyalityCardDepts)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_LoyalityCardDept_Erp_Department");

                entity.HasOne(d => d.LoyalityCard)
                    .WithMany(p => p.ErpLoyalityCardDepts)
                    .HasForeignKey(d => d.LoyalityCardId)
                    .HasConstraintName("FK_Erp_LoyalityCardDept_Erp_LoyalityCard");
            });

            modelBuilder.Entity<ErpLoyalityCardService>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCardService");

                entity.HasIndex(e => e.LoyalityCardId, "Erp_LoyalityCardService_IX0");

                entity.HasIndex(e => e.ServiceId, "Erp_LoyalityCardService_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Limit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.LoyalityCard)
                    .WithMany(p => p.ErpLoyalityCardServices)
                    .HasForeignKey(d => d.LoyalityCardId)
                    .HasConstraintName("FK_Erp_LoyalityCardService_Erp_LoyalityCard");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpLoyalityCardServices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_LoyalityCardService_Erp_Service");
            });

            modelBuilder.Entity<ErpLoyalityCardType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCardType");

                entity.HasIndex(e => new { e.CompanyId, e.TypeCode }, "Erp_LoyalityCardType_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_LoyalityCardType_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountGroupCode).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PriceGroupCode).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TypeCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpLoyalityCardTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Erp_LoyalityCardType_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpLoyalityCardTypes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_LoyalityCardType_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpLoyalityCardTypeDept>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCardTypeDept");

                entity.HasIndex(e => e.TypeId, "Erp_LoyalityCardTypeDept_IX0");

                entity.HasIndex(e => e.DepartmentId, "Erp_LoyalityCardTypeDept_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpLoyalityCardTypeDepts)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_LoyalityCardTypeDept_Erp_Department");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ErpLoyalityCardTypeDepts)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_Erp_LoyalityCardTypeDept_Erp_LoyalityCardType");
            });

            modelBuilder.Entity<ErpLoyalityCardTypeProxy>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCardTypeProxy");

                entity.HasIndex(e => e.TypeId, "Erp_LoyalityCardTypeProxy_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndingSerialNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartingSerialNo).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ErpLoyalityCardTypeProxies)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_Erp_LoyalityCardTypeProxy_Erp_LoyalityCardType");
            });

            modelBuilder.Entity<ErpLoyalityCardTypeService>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_LoyalityCardTypeService");

                entity.HasIndex(e => e.TypeId, "Erp_LoyalityCardTypeService_IX0");

                entity.HasIndex(e => e.ServiceId, "Erp_LoyalityCardTypeService_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Limit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpLoyalityCardTypeServices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_LoyalityCardTypeService_Erp_Service");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ErpLoyalityCardTypeServices)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_Erp_LoyalityCardTypeService_Erp_LoyalityCardType");
            });

            modelBuilder.Entity<ErpMachineOwner>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_MachineOwner");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("EMail");

                entity.Property(e => e.Idno)
                    .HasMaxLength(100)
                    .HasColumnName("IDNo");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MobilePhone).HasMaxLength(100);

                entity.Property(e => e.OwnerCode).HasMaxLength(25);

                entity.Property(e => e.OwnerName).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(100);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TaxNo).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_MachineOwner_Meta_City");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_MachineOwner_Erp_Company");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_MachineOwner_Meta_Country");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_MachineOwner_Erp_CurrentAccount");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_MachineOwner_Meta_District");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_MachineOwner_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpMachineOwners)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_MachineOwner_Meta_Town");
            });

            modelBuilder.Entity<ErpManufacturingType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ManufacturingType");

                entity.HasIndex(e => new { e.CompanyId, e.TypeCode }, "Erp_ManufacturingType_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TypeCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpManufacturingTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ManufacturingType_Erp_Company");
            });

            modelBuilder.Entity<ErpMark>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Mark");

                entity.HasIndex(e => new { e.CompanyId, e.MarkName }, "Erp_Mark_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrAccId, "Erp_Mark_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MarkName).HasMaxLength(50);

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpMarks)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Mark_Erp_Company");

                entity.HasOne(d => d.CurrAcc)
                    .WithMany(p => p.ErpMarks)
                    .HasForeignKey(d => d.CurrAccId)
                    .HasConstraintName("FK_Erp_Mark_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpMaterialRequirement>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_MaterialRequirement");

                entity.HasIndex(e => new { e.CompanyId, e.RequirementType, e.RequirementCode }, "Erp_MaterialRequirement_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RequirementCode).HasMaxLength(25);

                entity.Property(e => e.RequirementName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpMaterialRequirements)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_MaterialRequirement_Erp_Company");
            });

            modelBuilder.Entity<ErpMaterialRequirementDetail>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_MaterialRequirementDetail");

                entity.HasIndex(e => e.MaterialRequirementId, "Erp_MaterialRequirementDetail_IX1");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OptimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OriginalTermDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.HasOne(d => d.MaterialRequirement)
                    .WithMany(p => p.ErpMaterialRequirementDetails)
                    .HasForeignKey(d => d.MaterialRequirementId)
                    .HasConstraintName("FK_Erp_MaterialRequirementDetail_Erp_MaterialRequirement");
            });

            modelBuilder.Entity<ErpMaterialRequirementItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_MaterialRequirementItem");

                entity.HasIndex(e => e.MaterialRequirementId, "Erp_MaterialRequirementItem_IX1");

                entity.HasIndex(e => e.ParentItemId, "Erp_MaterialRequirementItem_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_MaterialRequirementItem_IX3");

                entity.HasIndex(e => e.WarehouseId, "Erp_MaterialRequirementItem_IX4");

                entity.HasIndex(e => e.InventoryId, "Erp_MaterialRequirementItem_IX5");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_MaterialRequirementItem_IX6");

                entity.HasIndex(e => e.UnitId, "Erp_MaterialRequirementItem_IX7");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpMaterialRequirementItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpMaterialRequirementItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpMaterialRequirementItems)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Erp_InventoryVariant");

                entity.HasOne(d => d.MaterialRequirement)
                    .WithMany(p => p.ErpMaterialRequirementItems)
                    .HasForeignKey(d => d.MaterialRequirementId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Erp_MaterialRequirement");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Erp_MaterialRequirementItem");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpMaterialRequirementItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Meta_UnitSetItem");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpMaterialRequirementItems)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_MaterialRequirementItem_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpModel>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Model");

                entity.HasIndex(e => e.MarkId, "Erp_Model_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ModelName).HasMaxLength(50);

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpModels)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_Model_Erp_Mark");
            });

            modelBuilder.Entity<ErpNews>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_News");

                entity.HasIndex(e => new { e.CompanyId, e.NewsCode }, "Erp_News_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.WorkplaceId, "Erp_News_IX1");

                entity.HasIndex(e => e.NotificationId, "Erp_News_IX2");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Caption).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IssueAt).HasColumnType("datetime");

                entity.Property(e => e.NewsCode).HasMaxLength(25);

                entity.Property(e => e.ShortExplanation).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpNews)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_News_Erp_Company");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.ErpNews)
                    .HasForeignKey(d => d.NotificationId)
                    .HasConstraintName("FK_Erp_News_Erp_Notification");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpNews)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_News_Erp_Workplace");
            });

            modelBuilder.Entity<ErpNotification>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Notification");

                entity.HasIndex(e => new { e.CompanyId, e.NotificationCode }, "Erp_Notification_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.WorkplaceId, "Erp_Notification_IX1");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Caption).HasMaxLength(1000);

                entity.Property(e => e.ContactWhereStr).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExternalMailType).HasMaxLength(1000);

                entity.Property(e => e.FormFieldName).HasMaxLength(1000);

                entity.Property(e => e.FormFormDef).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IssueAt).HasColumnType("datetime");

                entity.Property(e => e.NotificationCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpNotifications)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Notification_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpNotifications)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Notification_Erp_Workplace");
            });

            modelBuilder.Entity<ErpNotificationItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_NotificationItem");

                entity.HasIndex(e => e.NotificationId, "Erp_NotificationItem_IX0");

                entity.HasIndex(e => e.UserId, "Erp_NotificationItem_IX1");

                entity.HasIndex(e => e.UserGroupId, "Erp_NotificationItem_IX2");

                entity.HasIndex(e => e.ContactId, "Erp_NotificationItem_IX3");

                entity.HasIndex(e => e.WorkplaceId, "Erp_NotificationItem_IX4");

                entity.HasIndex(e => e.DepartmentId, "Erp_NotificationItem_IX5");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpNotificationItems)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_NotificationItem_Erp_CurrentAccountContact");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpNotificationItems)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_NotificationItem_Erp_Department");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.ErpNotificationItems)
                    .HasForeignKey(d => d.NotificationId)
                    .HasConstraintName("FK_Erp_NotificationItem_Erp_Notification");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpNotificationItems)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_NotificationItem_Meta_User");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpNotificationItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_NotificationItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpOrderReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_OrderReceipt");

                entity.ToTable("Erp_OrderReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_OrderReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_OrderReceipt_IX1");

                entity.HasIndex(e => e.TransporterId, "Erp_OrderReceipt_IX10");

                entity.HasIndex(e => e.PosReceiptId, "Erp_OrderReceipt_IX11");

                entity.HasIndex(e => e.WorkOrderReceiptId, "Erp_OrderReceipt_IX12");

                entity.HasIndex(e => e.GlreceiptId, "Erp_OrderReceipt_IX13");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_OrderReceipt_IX14");

                entity.HasIndex(e => e.CustomerId, "Erp_OrderReceipt_IX15");

                entity.HasIndex(e => e.CustomerAddressId, "Erp_OrderReceipt_IX16");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_OrderReceipt_IX17");

                entity.HasIndex(e => e.VehicleId, "Erp_OrderReceipt_IX18");

                entity.HasIndex(e => e.AddressId, "Erp_OrderReceipt_IX2");

                entity.HasIndex(e => e.ShippingAddressId, "Erp_OrderReceipt_IX3");

                entity.HasIndex(e => e.WarehouseId, "Erp_OrderReceipt_IX4");

                entity.HasIndex(e => e.CostCenterId, "Erp_OrderReceipt_IX5");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_OrderReceipt_IX6");

                entity.HasIndex(e => e.ProjectId, "Erp_OrderReceipt_IX7");

                entity.HasIndex(e => e.EmployeeId, "Erp_OrderReceipt_IX8");

                entity.HasIndex(e => e.CashId, "Erp_OrderReceipt_IX9");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedExplanation).HasMaxLength(1000);

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGross).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGrossForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UdShippmentType)
                    .HasMaxLength(1000)
                    .HasColumnName("UD_ShippmentType");

                entity.Property(e => e.UdTerms)
                    .HasMaxLength(1000)
                    .HasColumnName("UD_Terms");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency3).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpOrderReceiptAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Address");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Company");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CurrentAccountContact");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpOrderReceiptCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CurrentAccountReceiptItem");

                entity.HasOne(d => d.CustomerAddress)
                    .WithMany(p => p.ErpOrderReceiptCustomerAddresses)
                    .HasForeignKey(d => d.CustomerAddressId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Address2");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpOrderReceiptCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CurrentAccount2");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CustomerTransaction");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpOrderReceiptDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CurrentAccount1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_PaymentPlan");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Pos");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Project");

                entity.HasOne(d => d.ShipToAddress)
                    .WithMany(p => p.ErpOrderReceiptShipToAddresses)
                    .HasForeignKey(d => d.ShipToAddressId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Address3");

                entity.HasOne(d => d.ShipToCurrentAccount)
                    .WithMany(p => p.ErpOrderReceiptShipToCurrentAccounts)
                    .HasForeignKey(d => d.ShipToCurrentAccountId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_CurrentAccount3");

                entity.HasOne(d => d.ShippingAddress)
                    .WithMany(p => p.ErpOrderReceiptShippingAddresses)
                    .HasForeignKey(d => d.ShippingAddressId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Address1");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Transporter");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Vehicle");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Warehouse");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpOrderReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_OrderReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpOrderReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_OrderReceiptAttachment");

                entity.HasIndex(e => e.OrderReceiptId, "Erp_OrderReceiptAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpOrderReceiptAttachments)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_OrderReceiptAttachment_Erp_OrderReceipt");
            });

            modelBuilder.Entity<ErpOrderReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_OrderReceiptItem");

                entity.ToTable("Erp_OrderReceiptItem");

                entity.HasIndex(e => e.OrderReceiptId, "Erp_OrderReceiptItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_OrderReceiptItem_IX1");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_OrderReceiptItem_IX10");

                entity.HasIndex(e => e.DiscountId, "Erp_OrderReceiptItem_IX11");

                entity.HasIndex(e => e.ExpenseId, "Erp_OrderReceiptItem_IX12");

                entity.HasIndex(e => e.InventoryCampaignId, "Erp_OrderReceiptItem_IX13");

                entity.HasIndex(e => e.ContractItemId, "Erp_OrderReceiptItem_IX14");

                entity.HasIndex(e => e.QuotationReceiptItemId, "Erp_OrderReceiptItem_IX15");

                entity.HasIndex(e => e.DemandReceiptItemId, "Erp_OrderReceiptItem_IX16");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_OrderReceiptItem_IX17");

                entity.HasIndex(e => e.DemandReceiptItemId, "Erp_OrderReceiptItem_IX18");

                entity.HasIndex(e => e.UsedEmployeeId, "Erp_OrderReceiptItem_IX19");

                entity.HasIndex(e => e.ServiceCardId, "Erp_OrderReceiptItem_IX2");

                entity.HasIndex(e => e.ParentItemId, "Erp_OrderReceiptItem_IX3");

                entity.HasIndex(e => e.UnitId, "Erp_OrderReceiptItem_IX4");

                entity.HasIndex(e => e.ProjectId, "Erp_OrderReceiptItem_IX5");

                entity.HasIndex(e => e.EmployeeId, "Erp_OrderReceiptItem_IX6");

                entity.HasIndex(e => e.PackagingId, "Erp_OrderReceiptItem_IX7");

                entity.HasIndex(e => e.InventoryAssortmentId, "Erp_OrderReceiptItem_IX8");

                entity.HasIndex(e => e.CostCenterId, "Erp_OrderReceiptItem_IX9");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedExplanation).HasMaxLength(1000);

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpenseForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsWcancelled).HasColumnName("IsWCancelled");

                entity.Property(e => e.IsWclosed).HasColumnName("IsWClosed");

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantityEntry).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPriceForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PartyNo).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceivedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UdLook1)
                    .HasMaxLength(50)
                    .HasColumnName("UD_look1");

                entity.Property(e => e.UdLook2)
                    .HasMaxLength(50)
                    .HasColumnName("UD_look2");

                entity.Property(e => e.UdLook3)
                    .HasMaxLength(50)
                    .HasColumnName("UD_look3");

                entity.Property(e => e.UdOtv)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("UD_OTV");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.VatRateAccommodation).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.WorkOrderQuantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Box");

                entity.HasOne(d => d.CatalogSerialCard)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.CatalogSerialCardId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_InventorySerialCard");

                entity.HasOne(d => d.ContractItem)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ContractItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_ContractItem");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.Ctsp)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.CtspId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Meta_Ctsp");

                entity.HasOne(d => d.DemandReceiptItem)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.DemandReceiptItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_DemandReceiptItem");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Discount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpOrderReceiptItemEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Meta_Forex");

                entity.HasOne(d => d.InitialCost)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.InitialCostId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_InitialCost");

                entity.HasOne(d => d.InventoryAssortment)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.InventoryAssortmentId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_InventoryAssortment");

                entity.HasOne(d => d.InventoryCampaign)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.InventoryCampaignId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_InventoryCampaign");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Inventory");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpOrderReceiptItemLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_LabRecipe");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Model");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_OrderReceipt");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.PackagingId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Packaging");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_OrderReceiptItem");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpOrderReceiptItemPatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_LabRecipe2");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Project");

                entity.HasOne(d => d.QualityType)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.QualityTypeId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_QualityType");

                entity.HasOne(d => d.QuotationReceiptItem)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.QuotationReceiptItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_QuotationReceiptItem");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Recipe");

                entity.HasOne(d => d.ReferenceWorkOrder)
                    .WithMany(p => p.ErpOrderReceiptItemReferenceWorkOrders)
                    .HasForeignKey(d => d.ReferenceWorkOrderId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_WorkOrder");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Resource");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Route");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Service");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Meta_UnitSetItem");

                entity.HasOne(d => d.UsedEmployee)
                    .WithMany(p => p.ErpOrderReceiptItemUsedEmployees)
                    .HasForeignKey(d => d.UsedEmployeeId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Employee1");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Warehouse");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpOrderReceiptItemWorkOrders)
                    .HasForeignKey(d => d.WorkOrderId);

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpOrderReceiptItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_OrderReceiptItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpOrderReceiptItemAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_OrderReceiptItemAttachment");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_OrderReceiptItemAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpOrderReceiptItemAttachments)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemAttachment_Erp_OrderReceiptItem");
            });

            modelBuilder.Entity<ErpOrderReceiptItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_OrderReceiptItemVariant");

                entity.ToTable("Erp_OrderReceiptItemVariant");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_OrderReceiptItemVariant_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_OrderReceiptItemVariant_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_OrderReceiptItemVariant_IX2");

                entity.HasIndex(e => e.ContractItemVariantId, "Erp_OrderReceiptItemVariant_IX3");

                entity.HasIndex(e => e.DemandReceiptItemVariantId, "Erp_OrderReceiptItemVariant_IX4");

                entity.HasIndex(e => e.QuotationReceiptItemVariantId, "Erp_OrderReceiptItemVariant_IX5");

                entity.HasIndex(e => e.WarehouseId, "Erp_OrderReceiptItemVariant_IX6");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsWcancelled).HasColumnName("IsWCancelled");

                entity.Property(e => e.IsWclosed).HasColumnName("IsWClosed");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceivedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WorkOrderQuantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.ContractItemVariant)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.ContractItemVariantId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_ContractItemVariant");

                entity.HasOne(d => d.DemandReceiptItemVariant)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.DemandReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_DemandReceiptItemVariant");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_OrderReceiptItem");

                entity.HasOne(d => d.QuotationReceiptItemVariant)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.QuotationReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_QuotationReceiptItemVariant");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_Warehouse");

                entity.HasOne(d => d.WorkOrderItemVariant)
                    .WithMany(p => p.ErpOrderReceiptItemVariants)
                    .HasForeignKey(d => d.WorkOrderItemVariantId)
                    .HasConstraintName("FK_Erp_OrderReceiptItemVariant_Erp_WorkOrderItemVariant");
            });

            modelBuilder.Entity<ErpPackaging>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Packaging");

                entity.HasIndex(e => new { e.CompanyId, e.PackagingCode }, "Erp_Packaging_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PackagingCode).HasMaxLength(25);

                entity.Property(e => e.PackagingName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPackagings)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Packaging_Erp_Company");
            });

            modelBuilder.Entity<ErpPackingList>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PackingList");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_PackingList_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_PackingList_IX1");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_PackingList_IX2");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CheckingDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpPackingLists)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_PackingList_Erp_Address");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPackingLists)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_PackingList_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpPackingLists)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_PackingList_Erp_CurrentAccount");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpPackingLists)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Erp_PackingList_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpPackingListItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PackingListItem");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FromBox).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ToBox).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpPackingListItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_PackingListItem_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpPackingListItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_PackingListItem_Erp_Inventory");

                entity.HasOne(d => d.PackingList)
                    .WithMany(p => p.ErpPackingListItems)
                    .HasForeignKey(d => d.PackingListId)
                    .HasConstraintName("FK_Erp_PackingListItem_Erp_PackingList");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpPackingListItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_PackingListItem_Meta_UnitSet");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpPackingListItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_PackingListItem_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpPackingListItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PackingListItemVariant");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpPackingListItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_PackingListItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpPackingListItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_PackingListItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.PackingListItem)
                    .WithMany(p => p.ErpPackingListItemVariants)
                    .HasForeignKey(d => d.PackingListItemId)
                    .HasConstraintName("FK_Erp_PackingListItemVariant_Erp_PackingListItem");
            });

            modelBuilder.Entity<ErpParameter>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Parameter");

                entity.ToTable("Erp_Parameter");

                entity.HasIndex(e => new { e.CompanyId, e.WorkplaceId, e.PrmGroup }, "Erp_Parameter_IX1");

                entity.HasIndex(e => e.PrmId, "Erp_Parameter_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameters)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Parameter_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameters)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Parameter_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterBarcode>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterBarcode");

                entity.Property(e => e.Code).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TemplateString).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterBarcodes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterBarcode_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterBarcodes)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterBarcode_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterBonu>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterBonus");

                entity.Property(e => e.BonusRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LowerAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UpperAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterBonus)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterBonus_Erp_Company");

                entity.HasOne(d => d.InventoryAttrSet)
                    .WithMany(p => p.ErpParameterBonus)
                    .HasForeignKey(d => d.InventoryAttrSetId)
                    .HasConstraintName("FK_Erp_ParameterBonus_Erp_InventoryAttributeSet");

                entity.HasOne(d => d.InventoryAttrSetItem)
                    .WithMany(p => p.ErpParameterBonus)
                    .HasForeignKey(d => d.InventoryAttrSetItemId)
                    .HasConstraintName("FK_Erp_ParameterBonus_Erp_InventoryAttributeSetItem");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpParameterBonus)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_ParameterBonus_Erp_InventoryGroup");

                entity.HasOne(d => d.ServiceGroup)
                    .WithMany(p => p.ErpParameterBonus)
                    .HasForeignKey(d => d.ServiceGroupId)
                    .HasConstraintName("FK_Erp_ParameterBonus_Erp_ServiceGroup");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterBonus)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterBonus_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterDocNo>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterDocNo");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FieldName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.TemplateString).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpParameterDocNos)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_ParameterDocNo_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterDocNos)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterDocNo_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterDocNos)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterDocNo_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterPo>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ParameterPos");

                entity.ToTable("Erp_ParameterPos");

                entity.HasIndex(e => e.PrmId, "Erp_ParameterPos_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PrmValue).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterPos)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterPos_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpParameterPos)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_ParameterPos_Erp_Department");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterPos)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterPos_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterPosDevice>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterPosDevice");

                entity.Property(e => e.CommPort).HasMaxLength(100);

                entity.Property(e => e.CommSetup).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterPosDevices)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterPosDevice_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpParameterPosDevices)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_ParameterPosDevice_Erp_Department");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterPosDevices)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterPosDevice_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterPosExp>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterPosExp");

                entity.Property(e => e.CodeList).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExplanationList).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterPosExps)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterPosExp_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterPosExps)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterPosExp_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterPosPrinter>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterPosPrinter");

                entity.Property(e => e.CodeList).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MonitorFolder).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpParameterPosPrinters)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ParameterPosPrinter_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpParameterPosPrinters)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_ParameterPosPrinter_Erp_Department");

                entity.HasOne(d => d.Printer)
                    .WithMany(p => p.ErpParameterPosPrinters)
                    .HasForeignKey(d => d.PrinterId)
                    .HasConstraintName("FK_Erp_ParameterPosPrinter_Meta_Printer");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpParameterPosPrinters)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_ParameterPosPrinter_Erp_Resource");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpParameterPosPrinters)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ParameterPosPrinter_Erp_Workplace");
            });

            modelBuilder.Entity<ErpParameterRevaluation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ParameterRevaluation");

                entity.HasIndex(e => new { e.RevaluationYear, e.RevaluationMonth }, "Erp_ParameterRevaluation_IX0")
                    .IsUnique();

                entity.Property(e => e.ConsumerPriceIndex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProducerPriceIndex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RevaluationRate).HasColumnType("decimal(11, 8)");
            });

            modelBuilder.Entity<ErpPaymentCard>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_PaymentCard");

                entity.ToTable("Erp_PaymentCard");

                entity.HasIndex(e => new { e.CompanyId, e.PaymentCode }, "Erp_PaymentCard_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.BankAccountId, "Erp_PaymentCard_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_PaymentCard_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CommRate1).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CommRate2).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CommRate3).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PaymentCode).HasMaxLength(25);

                entity.Property(e => e.PaymentName).HasMaxLength(50);

                entity.Property(e => e.RateForOverMonths).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.RateForShortMonths).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpPaymentCards)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_PaymentCard_Erp_BankAccount");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPaymentCards)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_PaymentCard_Erp_Company");

                entity.HasOne(d => d.CreditCard)
                    .WithMany(p => p.ErpPaymentCards)
                    .HasForeignKey(d => d.CreditCardId)
                    .HasConstraintName("FK_Erp_PaymentCard_Meta_CreditCard");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpPaymentCards)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_PaymentCard_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpPaymentCards)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_PaymentCard_Meta_Forex");
            });

            modelBuilder.Entity<ErpPaymentCardDept>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PaymentCardDept");

                entity.HasIndex(e => e.PaymentCardId, "Erp_PaymentCardDept_IX0");

                entity.HasIndex(e => e.DepartmentId, "Erp_PaymentCardDept_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpPaymentCardDepts)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_PaymentCardDept_Erp_Department");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpPaymentCardDepts)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_PaymentCardDept_Erp_PaymentCard");
            });

            modelBuilder.Entity<ErpPaymentCardItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PaymentCardItem");

                entity.HasIndex(e => e.PaymentCardId, "Erp_PaymentCardItem_IX0");

                entity.Property(e => e.BonusRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CommRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpPaymentCardItems)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_PaymentCardItem_Erp_PaymentCard");
            });

            modelBuilder.Entity<ErpPaymentPlan>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_PaymentPlan");

                entity.ToTable("Erp_PaymentPlan");

                entity.HasIndex(e => new { e.CompanyId, e.PlanCode }, "Erp_PaymentPlan_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EarlyPayment).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LatePayment).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.PlanCode).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UniversalCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPaymentPlans)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_PaymentPlan_Erp_Company");
            });

            modelBuilder.Entity<ErpPaymentPlanItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_PaymentPlanItem");

                entity.ToTable("Erp_PaymentPlanItem");

                entity.HasIndex(e => e.PaymentId, "Erp_PaymentPlanItem_IX0");

                entity.Property(e => e.CustomerInterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ItemDay).HasMaxLength(15);

                entity.Property(e => e.ItemFormula).HasMaxLength(100);

                entity.Property(e => e.ItemMonth).HasMaxLength(15);

                entity.Property(e => e.ItemYear).HasMaxLength(15);

                entity.Property(e => e.TransferDay).HasMaxLength(15);

                entity.Property(e => e.UniversalCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.ErpPaymentPlanItems)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Erp_PaymentPlanItem_Erp_BankAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpPaymentPlanItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_PaymentPlanItem_Meta_Forex");

                entity.HasOne(d => d.PaymentCard)
                    .WithMany(p => p.ErpPaymentPlanItems)
                    .HasForeignKey(d => d.PaymentCardId)
                    .HasConstraintName("FK_Erp_PaymentPlanItem_Erp_PaymentCard");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.ErpPaymentPlanItems)
                    .HasForeignKey(d => d.PaymentId)
                    .HasConstraintName("FK_PaymentPlanItem_PaymentPlan");
            });

            modelBuilder.Entity<ErpPlanning>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Planning");

                entity.HasIndex(e => new { e.WorkOrderItemId, e.ProcessId }, "Erp_Planning_IX1");

                entity.Property(e => e.ActualFinish).HasColumnType("datetime");

                entity.Property(e => e.ActualStart).HasColumnType("datetime");

                entity.Property(e => e.CompletedEffortTs).HasColumnName("CompletedEffortTS");

                entity.Property(e => e.Completion).HasColumnType("datetime");

                entity.Property(e => e.CompletionPercentage).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DailyQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DurationTs).HasColumnName("DurationTS");

                entity.Property(e => e.EffortTs).HasColumnName("EffortTS");

                entity.Property(e => e.FabricTermDate).HasColumnType("datetime");

                entity.Property(e => e.Finish).HasColumnType("datetime");

                entity.Property(e => e.FinishDailyQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexCostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MaxFinish).HasColumnType("datetime");

                entity.Property(e => e.MaxStart).HasColumnType("datetime");

                entity.Property(e => e.MinFinish).HasColumnType("datetime");

                entity.Property(e => e.MinStart).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OldFinish).HasColumnType("datetime");

                entity.Property(e => e.OldFinish2).HasColumnType("datetime");

                entity.Property(e => e.OldFinish3).HasColumnType("datetime");

                entity.Property(e => e.OldFinish4).HasColumnType("datetime");

                entity.Property(e => e.OldFinish5).HasColumnType("datetime");

                entity.Property(e => e.OldStart).HasColumnType("datetime");

                entity.Property(e => e.OldStart2).HasColumnType("datetime");

                entity.Property(e => e.OldStart3).HasColumnType("datetime");

                entity.Property(e => e.OldStart4).HasColumnType("datetime");

                entity.Property(e => e.OldStart5).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartDailyQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StyleGroupCode).HasMaxLength(25);

                entity.Property(e => e.TemplateCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Planning_Erp_CurrentAccount");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Employee");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpPlanningLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_Planning_Erp_LabRecipe");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Planning");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpPlanningPatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_Planning_Erp_LabRecipe2");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Project");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.ReasonId)
                    .HasConstraintName("FK_Erp_Planning_Erp_ResourceOutOfUseReason");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Recipe");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Resource");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_Planning_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_Planning_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpPlannings)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Planning_Erp_Workplace");
            });

            modelBuilder.Entity<ErpPo>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Pos");

                entity.ToTable("Erp_Pos");

                entity.HasIndex(e => e.WorkplaceId, "Erp_InventoryReceiptItem_IX30");

                entity.HasIndex(e => e.DepartmentId, "Erp_InventoryReceiptItem_IX31");

                entity.HasIndex(e => e.CashId, "Erp_InventoryReceiptItem_IX32");

                entity.HasIndex(e => new { e.CompanyId, e.DocumentNo }, "Erp_Pos_IX0");

                entity.HasIndex(e => e.DepartmentId, "Erp_Pos_IX1");

                entity.HasIndex(e => e.VehicleId, "Erp_Pos_IX10");

                entity.HasIndex(e => e.LoyalityCardId, "Erp_Pos_IX11");

                entity.HasIndex(e => e.TableId, "Erp_Pos_IX12");

                entity.HasIndex(e => e.WorkOrderId, "Erp_Pos_IX13");

                entity.HasIndex(e => new { e.CompanyId, e.CashRegisterReceiptNo }, "Erp_Pos_IX14");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptDate }, "Erp_Pos_IX15");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptNo }, "Erp_Pos_IX16");

                entity.HasIndex(e => e.PosEndOfDateRaportId, "Erp_Pos_IX17");

                entity.HasIndex(e => e.CashierId, "Erp_Pos_IX18");

                entity.HasIndex(e => e.CourierId, "Erp_Pos_IX19");

                entity.HasIndex(e => e.CashId, "Erp_Pos_IX2");

                entity.HasIndex(e => new { e.CompanyId, e.InsertedBy }, "Erp_Pos_IX20");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Pos_IX3");

                entity.HasIndex(e => e.AddressId, "Erp_Pos_IX4");

                entity.HasIndex(e => e.WarehouseId, "Erp_Pos_IX5");

                entity.HasIndex(e => e.CostCenterId, "Erp_Pos_IX6");

                entity.HasIndex(e => e.DealerId, "Erp_Pos_IX7");

                entity.HasIndex(e => e.EmployeeId, "Erp_Pos_IX8");

                entity.HasIndex(e => e.TransporterId, "Erp_Pos_IX9");

                entity.HasIndex(e => e.InvoiceAddressId, "Erp_Pos_IX_InvoiceAddressId");

                entity.HasIndex(e => e.ShipToAddressId, "Erp_Pos_IX_ShipToAddressId");

                entity.HasIndex(e => e.UserAddressId, "Erp_Pos_IX_UserAddressId");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Amount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount4).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancellationExplanation).HasMaxLength(1000);

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CashRegisterReceiptNo).HasMaxLength(30);

                entity.Property(e => e.CashRegisterTransactionId).HasMaxLength(30);

                entity.Property(e => e.ClosedSalesComputer).HasMaxLength(30);

                entity.Property(e => e.ClosingTime).HasColumnType("datetime");

                entity.Property(e => e.Commission).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveredTime).HasColumnType("datetime");

                entity.Property(e => e.DeliveryExplanation).HasMaxLength(1000);

                entity.Property(e => e.DeliveryNotes).HasMaxLength(1000);

                entity.Property(e => e.DeliveryRequestTime).HasColumnType("datetime");

                entity.Property(e => e.DeliveryStartTime).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTime).HasColumnType("datetime");

                entity.Property(e => e.DepartureTime).HasColumnType("datetime");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGross).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalGrossForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.EguestCheckGuid)
                    .HasMaxLength(50)
                    .HasColumnName("EGuestCheckGuid");

                entity.Property(e => e.EguestCheckNo).HasColumnName("EGuestCheckNo");

                entity.Property(e => e.EguestCheckStatus).HasColumnName("EGuestCheckStatus");

                entity.Property(e => e.EinvoiceGuid)
                    .HasMaxLength(50)
                    .HasColumnName("EInvoiceGuid");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForexVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IntegratorEguestCheckId)
                    .HasMaxLength(50)
                    .HasColumnName("IntegratorEGuestCheckId");

                entity.Property(e => e.IsEguestCheck).HasColumnName("IsEGuestCheck");

                entity.Property(e => e.KitchenExplanation).HasMaxLength(1000);

                entity.Property(e => e.LastAddProductTime).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.OkcserialNo)
                    .HasMaxLength(4000)
                    .HasColumnName("OKCSerialNo");

                entity.Property(e => e.OpenSalesComputer).HasMaxLength(30);

                entity.Property(e => e.PackedTime).HasColumnType("datetime");

                entity.Property(e => e.PackingStartTime).HasColumnType("datetime");

                entity.Property(e => e.PosMacAddress).HasMaxLength(50);

                entity.Property(e => e.PosUniqueId).HasMaxLength(50);

                entity.Property(e => e.PromotionCode).HasMaxLength(25);

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveExplanation).HasMaxLength(1000);

                entity.Property(e => e.ReturnDate).HasColumnType("datetime");

                entity.Property(e => e.SalesDate).HasColumnType("datetime");

                entity.Property(e => e.ShopperName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TaxFreeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpPoAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Address");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Cash");

                entity.HasOne(d => d.Cashier)
                    .WithMany(p => p.ErpPoCashiers)
                    .HasForeignKey(d => d.CashierId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Employee2");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Pos_Erp_CostCenter");

                entity.HasOne(d => d.Courier)
                    .WithMany(p => p.ErpPoCouriers)
                    .HasForeignKey(d => d.CourierId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Employee1");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpPoCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Pos_Erp_CurrentAccount");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpPoDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_Pos_Erp_CurrentAccount1");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpPoEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Pos_Meta_Forex");

                entity.HasOne(d => d.InvoiceAddress)
                    .WithMany(p => p.ErpPoInvoiceAddresses)
                    .HasForeignKey(d => d.InvoiceAddressId);

                entity.HasOne(d => d.LoyalityCard)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.LoyalityCardId)
                    .HasConstraintName("FK_Erp_Pos_Erp_LoyalityCard");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Pos_Erp_PosParentId_DBOnly");

                entity.HasOne(d => d.PosEndOfDateRaport)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.PosEndOfDateRaportId)
                    .HasConstraintName("FK_Erp_Pos_Erp_PosEndOfDateRaports");

                entity.HasOne(d => d.Shifts)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.ShiftsId)
                    .HasConstraintName("FK_Erp_Pos_Pos_Shifts");

                entity.HasOne(d => d.ShipToAddress)
                    .WithMany(p => p.ErpPoShipToAddresses)
                    .HasForeignKey(d => d.ShipToAddressId);

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.TableId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Resource");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Transporter");

                entity.HasOne(d => d.UserAddress)
                    .WithMany(p => p.ErpPoUserAddresses)
                    .HasForeignKey(d => d.UserAddressId);

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Vehicle");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Warehouse");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_Pos_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpPos)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Pos_Erp_Workplace");
            });

            modelBuilder.Entity<ErpPoll>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Poll");

                entity.HasIndex(e => new { e.CompanyId, e.PollCode }, "Erp_Poll_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.WorkplaceId, "Erp_Poll_IX1");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Caption).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PollCode).HasMaxLength(25);

                entity.Property(e => e.PollGraphic).HasColumnType("image");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPolls)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Poll_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpPolls)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Poll_Erp_Workplace");
            });

            modelBuilder.Entity<ErpPollAnswer>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PollAnswer");

                entity.HasIndex(e => e.PollId, "Erp_PollAnswer_IX0");

                entity.HasIndex(e => e.PollItemId, "Erp_PollAnswer_IX1");

                entity.HasIndex(e => e.UserId, "Erp_PollAnswer_IX2");

                entity.HasIndex(e => e.UserGroupId, "Erp_PollAnswer_IX3");

                entity.HasIndex(e => e.ContactId, "Erp_PollAnswer_IX4");

                entity.Property(e => e.AnswerGraphic).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpPollAnswers)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_PollAnswer_Erp_CurrentAccountContact");

                entity.HasOne(d => d.Poll)
                    .WithMany(p => p.ErpPollAnswers)
                    .HasForeignKey(d => d.PollId)
                    .HasConstraintName("FK_Erp_PollAnswer_Erp_Poll");

                entity.HasOne(d => d.PollItem)
                    .WithMany(p => p.ErpPollAnswers)
                    .HasForeignKey(d => d.PollItemId)
                    .HasConstraintName("FK_Erp_PollAnswer_Erp_PollQuestion");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpPollAnswers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_PollAnswer_Meta_User");
            });

            modelBuilder.Entity<ErpPollQuestion>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PollQuestion");

                entity.HasIndex(e => e.PollId, "Erp_PollQuestion_IX0");

                entity.Property(e => e.Caption).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.QuestionGraphic).HasColumnType("image");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Poll)
                    .WithMany(p => p.ErpPollQuestions)
                    .HasForeignKey(d => d.PollId)
                    .HasConstraintName("FK_Erp_PollQuestion_Erp_Poll");
            });

            modelBuilder.Entity<ErpPollUserAnswer>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PollUserAnswer");

                entity.HasIndex(e => e.PollId, "Erp_PollUserAnswer_IX0");

                entity.HasIndex(e => e.PollItemId, "Erp_PollUserAnswer_IX1");

                entity.HasIndex(e => e.UserId, "Erp_PollUserAnswer_IX2");

                entity.HasIndex(e => e.UserGroupId, "Erp_PollUserAnswer_IX3");

                entity.HasIndex(e => e.ContactId, "Erp_PollUserAnswer_IX4");

                entity.HasIndex(e => new { e.SourceType, e.SourceId }, "Erp_PollUserAnswer_IX5");

                entity.HasIndex(e => e.WorkOrderId, "Erp_PollUserAnswer_IXW1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpPollUserAnswers)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_PollUserAnswer_Erp_CurrentAccountContact");

                entity.HasOne(d => d.Poll)
                    .WithMany(p => p.ErpPollUserAnswers)
                    .HasForeignKey(d => d.PollId)
                    .HasConstraintName("FK_Erp_PollUserAnswer_Erp_Poll");

                entity.HasOne(d => d.PollItem)
                    .WithMany(p => p.ErpPollUserAnswers)
                    .HasForeignKey(d => d.PollItemId)
                    .HasConstraintName("FK_Erp_PollUserAnswer_Erp_PollQuestion");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpPollUserAnswers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_PollUserAnswer_Meta_User");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpPollUserAnswers)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_PollUserAnswer_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpPosEndOfDateRaport>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PosEndOfDateRaports");

                entity.HasIndex(e => new { e.CompanyId, e.EndOfDateType, e.EndOfDateNo }, "Erp_PosEndOfDateRaports_IX0");

                entity.HasIndex(e => new { e.CompanyId, e.EndOfDate }, "Erp_PosEndOfDateRaports_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndOfDate).HasColumnType("datetime");

                entity.Property(e => e.EndOfDateTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PosMacAddress).HasMaxLength(50);

                entity.Property(e => e.ReceiptCount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnReceiptCount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.ErpPosEndOfDateRaports)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Erp_PosEndOfDateRaports_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPosEndOfDateRaports)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_PosEndOfDateRaports_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpPosEndOfDateRaports)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_PosEndOfDateRaports_Erp_Department");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpPosEndOfDateRaports)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_PosEndOfDateRaports_Erp_Workplace");
            });

            modelBuilder.Entity<ErpPosTransferDetail>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PosTransferDetail");

                entity.HasIndex(e => new { e.TransferType, e.TransferDate }, "Erp_PosTransferDetail_IX0");

                entity.HasIndex(e => e.OldPosReceiptId, "Erp_PosTransferDetail_IX1");

                entity.HasIndex(e => e.NewPosReceiptId, "Erp_PosTransferDetail_IX2");

                entity.HasIndex(e => e.OldInventoryReceiptItemId, "Erp_PosTransferDetail_IX3");

                entity.HasIndex(e => e.NewInventoryReceiptItemId, "Erp_PosTransferDetail_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TransferDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<ErpPredecessor>(entity =>
            {
                entity.HasKey(e => new { e.DependentPlanningId, e.PredecessorPlanningId });

                entity.ToTable("Erp_Predecessors");

                entity.HasOne(d => d.DependentPlanning)
                    .WithMany(p => p.ErpPredecessorDependentPlannings)
                    .HasForeignKey(d => d.DependentPlanningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Erp_PredecessorHosts_Erp_Planning");

                entity.HasOne(d => d.PredecessorPlanning)
                    .WithMany(p => p.ErpPredecessorPredecessorPlannings)
                    .HasForeignKey(d => d.PredecessorPlanningId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Erp_Predecessors_Erp_Planning");
            });

            modelBuilder.Entity<ErpProcess>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Process");

                entity.HasIndex(e => new { e.CompanyId, e.ProcessCode }, "Erp_Process_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.ProxyNo }, "Erp_Process_IX1");

                entity.HasIndex(e => e.ParentId, "Erp_Process_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ComingTransactionType1).HasMaxLength(25);

                entity.Property(e => e.ComingTransactionType2).HasMaxLength(25);

                entity.Property(e => e.ComingTransactionType3).HasMaxLength(25);

                entity.Property(e => e.ComingTransactionType4).HasMaxLength(25);

                entity.Property(e => e.ComingTransactionType5).HasMaxLength(25);

                entity.Property(e => e.CompetencyPoints).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CrewCount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DefaultPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ProcessCode).HasMaxLength(25);

                entity.Property(e => e.ProcessExplanation).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProxyNo).HasMaxLength(50);

                entity.Property(e => e.Segment).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StandartTime).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTimeActual).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTimeDistribution).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StandartTimeInitial).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WarningAdress).HasMaxLength(1000);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpProcesses)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Process_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpProcesses)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_Process_Erp_CostCenter");

                entity.HasOne(d => d.InitialCostCard)
                    .WithMany(p => p.ErpProcesses)
                    .HasForeignKey(d => d.InitialCostCardId)
                    .HasConstraintName("FK_Erp_Process_Erp_InitialCostCard");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Process_Erp_Process_DBOnly");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpProcesses)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_Process_Erp_Resource");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpProcesses)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_Process_Erp_Service");

                entity.HasOne(d => d.Symbol)
                    .WithMany(p => p.ErpProcesses)
                    .HasForeignKey(d => d.SymbolId)
                    .HasConstraintName("FK_Erp_Process_Meta_Symbol");
            });

            modelBuilder.Entity<ErpProcessAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ProcessAttachment");

                entity.HasIndex(e => e.ProcessId, "Erp_ProcessAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpProcessAttachments)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_ProcessAttachment_Erp_Process");
            });

            modelBuilder.Entity<ErpProcessResource>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ProcessResource");

                entity.HasIndex(e => e.ProcessId, "Erp_ProcessResource_IX0");

                entity.HasIndex(e => e.ResourceId, "Erp_ProcessResource_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MaximumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinimumQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProcessParameters).HasMaxLength(1000);

                entity.Property(e => e.Qctime).HasColumnName("QCTime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpProcessResources)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ProcessResource_Erp_CurrentAccount");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpProcessResources)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_ProcessResource_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpProcessResources)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ProcessResource_Erp_Inventory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpProcessResources)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_ProcessResource_Erp_Process");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpProcessResources)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_ProcessResource_Erp_Resource");

                entity.HasOne(d => d.SetupReason)
                    .WithMany(p => p.ErpProcessResources)
                    .HasForeignKey(d => d.SetupReasonId)
                    .HasConstraintName("FK_Erp_ProcessResource_Erp_ResourceOutOfUseReason");
            });

            modelBuilder.Entity<ErpProductConfigurator>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ProductConfigurator");

                entity.HasIndex(e => new { e.CompanyId, e.Type, e.Code }, "Erp_ProductConfigurator_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CompanyId, "Erp_ProductConfigurator_IX1");

                entity.HasIndex(e => e.WorkplaceId, "Erp_ProductConfigurator_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpProductConfigurators)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ProductConfigurator_Erp_Company");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpProductConfigurators)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ProductConfigurator_Erp_Inventory");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpProductConfigurators)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ProductConfigurator_Erp_Workplace");
            });

            modelBuilder.Entity<ErpProductConfiguratorItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ProductConfiguratorItem");

                entity.HasIndex(e => e.ProductConfiguratorId, "Erp_ProductConfiguratorItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_ProductConfiguratorItem_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_ProductConfiguratorItem_IX2");

                entity.HasIndex(e => e.UnitId, "Erp_ProductConfiguratorItem_IX3");

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.FieldName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Wastage).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_InventoryVariant");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_Warehouse");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_ProductConfiguratorItem");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_Process");

                entity.HasOne(d => d.ProductConfigurator)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.ProductConfiguratorId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_ProductConfigurator");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Erp_Route");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpProductConfiguratorItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_ProductConfiguratorItem_Meta_UnitSetItem");
            });

            modelBuilder.Entity<ErpProject>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Project");

                entity.HasIndex(e => new { e.CompanyId, e.ProjectType, e.ProjectCode }, "Erp_Project_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Project_IX1");

                entity.HasIndex(e => e.AddressId, "Erp_Project_IX2");

                entity.HasIndex(e => e.RouteId, "Erp_Project_IX3");

                entity.HasIndex(e => e.EmployeeId, "Erp_Project_IX4");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedEndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedStartDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.ProjectCode).HasMaxLength(25);

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.ProjectType).HasDefaultValueSql("((1))");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_Project_Erp_Address");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Project_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Project_Erp_CurrentAccount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Project_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_Project_Erp_Inventory");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_Project_Erp_Route");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Project_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpProjects)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Project_Erp_Workplace");
            });

            modelBuilder.Entity<ErpProjectAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ProjectAttachment");

                entity.HasIndex(e => e.ProjectId, "Erp_ProjectAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpProjectAttachments)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_ProjectAttachment_Erp_Project");
            });

            modelBuilder.Entity<ErpPublishDocument>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PublishDocument");

                entity.HasIndex(e => new { e.CompanyId, e.DocumentType, e.DocumentCode }, "Erp_PublishDocument_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.Content).HasColumnType("image");

                entity.Property(e => e.ContentUrl).HasColumnName("ContentURL");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentCode).HasMaxLength(25);

                entity.Property(e => e.DocumentName).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPublishDocuments)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_PublishDocument_Erp_Company");
            });

            modelBuilder.Entity<ErpPurchaseContract>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_PurchaseContract");

                entity.HasIndex(e => new { e.CompanyId, e.ContractCode }, "Erp_PurchaseContract_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_PurchaseContract_IX1");

                entity.Property(e => e.Amount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Code1).HasMaxLength(25);

                entity.Property(e => e.Code2).HasMaxLength(25);

                entity.Property(e => e.ContractCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpPurchaseContracts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_PurchaseContract_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpPurchaseContracts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_PurchaseContract_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpQualityControl>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QualityControl");

                entity.ToTable("Erp_QualityControl");

                entity.HasIndex(e => new { e.CompanyId, e.QualityControlType, e.QualityControlNo }, "Erp_QualityControl_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ControlQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FastnessDryCleaning).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessDryRubbing).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessLight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessMarineWater).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessMoisture).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessWashing).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessWater).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessWaterWidthChlorine).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FastnessWetRubbing).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingFlammabilityTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingNonWrinkleTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingOilYmpulseTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingPhvalue)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("FinishingPHValue");

                entity.Property(e => e.FinishingPillingTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingStrenghtTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingWaleSpirality).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingWaterproofTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinishingWoolFeltingTest).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LibleachingSymbol).HasColumnName("LIBleachingSymbol");

                entity.Property(e => e.LichemicalCleaningSymbol).HasColumnName("LIChemicalCleaningSymbol");

                entity.Property(e => e.LielestaneDirectionSymbol).HasColumnName("LIElestaneDirectionSymbol");

                entity.Property(e => e.LiironingSymbol).HasColumnName("LIIroningSymbol");

                entity.Property(e => e.LinaturalDryingSymbol).HasColumnName("LINaturalDryingSymbol");

                entity.Property(e => e.LitumbleDryingSymbol).HasColumnName("LITumbleDryingSymbol");

                entity.Property(e => e.LiwashingSymbol).HasColumnName("LIWashingSymbol");

                entity.Property(e => e.LiwetCleaningSymbol).HasColumnName("LIWetCleaningSymbol");

                entity.Property(e => e.ProductGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProductShirinkingLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProductShirinkingRotation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProductShirinkingWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProductWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QualityControlDate).HasColumnType("datetime");

                entity.Property(e => e.QualityControlNo).HasMaxLength(25);

                entity.Property(e => e.RamGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RamQualityControlDate).HasColumnType("datetime");

                entity.Property(e => e.RamShrinkingLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RamShrinkingRotation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RamShrinkingWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RamWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RawGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RawWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RejectedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RequestGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RequestShirinkingLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RequestShirinkingRotation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RequestShirinkingWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RequestWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SanforizeGsanforize)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("SanforizeGSanforize");

                entity.Property(e => e.SanforizeQualityControlDate).HasColumnType("datetime");

                entity.Property(e => e.SanforizeShrinkingLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SanforizeShrinkingRotation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SanforizeShrinkingWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SanforizeWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_CurrentAccount");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_LabRecipe");

                entity.HasOne(d => d.QualityController)
                    .WithMany(p => p.ErpQualityControlQualityControllers)
                    .HasForeignKey(d => d.QualityControllerId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Employee");

                entity.HasOne(d => d.RamQualityController)
                    .WithMany(p => p.ErpQualityControlRamQualityControllers)
                    .HasForeignKey(d => d.RamQualityControllerId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Employee1");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Route");

                entity.HasOne(d => d.SanforizeQualityController)
                    .WithMany(p => p.ErpQualityControlSanforizeQualityControllers)
                    .HasForeignKey(d => d.SanforizeQualityControllerId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Employee2");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.InverseTemplate)
                    .HasForeignKey(d => d.TemplateId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_QualityControl_DBOnly");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpQualityControls)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_QualityControl_Erp_Workplace");
            });

            modelBuilder.Entity<ErpQualityControlAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_QualityControlAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.QualityControl)
                    .WithMany(p => p.ErpQualityControlAttachments)
                    .HasForeignKey(d => d.QualityControlId)
                    .HasConstraintName("FK_Erp_QualityControlAttachment_Erp_QualityControl");
            });

            modelBuilder.Entity<ErpQualityControlProcessDetail>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QualityControlProcessDetail");

                entity.ToTable("Erp_QualityControlProcessDetail");

                entity.HasIndex(e => new { e.QualityControlId, e.ProcessId, e.DetailType, e.ItemOrderNo }, "Erp_QualityControlProcessDetail_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Actual).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscardQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Gram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Method).HasMaxLength(50);

                entity.Property(e => e.QualityControlTestDate).HasColumnType("datetime");

                entity.Property(e => e.QualityTestExplanation).HasMaxLength(100);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Required).HasMaxLength(50);

                entity.Property(e => e.ShirinkingLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShirinkingRotation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShirinkingWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.Standart).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Width).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Erp_Department");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Erp_Process");

                entity.HasOne(d => d.QualityControl)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.QualityControlId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Erp_QualityControl");

                entity.HasOne(d => d.QualityControlTestCard)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.QualityControlTestCardId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Erp_QualityControlTestCard");

                entity.HasOne(d => d.QualityController)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.QualityControllerId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Erp_Employee");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Erp_Resource");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpQualityControlProcessDetails)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_QualityControlProcessDetail_Meta_UnitSetItem");
            });

            modelBuilder.Entity<ErpQualityControlReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_QualityControlReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_QualityControlReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CurrentAccountId, e.ReceiptDate }, "Erp_QualityControlReceipt_IX1");

                entity.HasIndex(e => e.ProjectId, "Erp_QualityControlReceipt_IX2");

                entity.HasIndex(e => e.EmployeeId, "Erp_QualityControlReceipt_IX3");

                entity.HasIndex(e => e.WorkOrderId, "Erp_QualityControlReceipt_IX4");

                entity.HasIndex(e => e.InventoryId, "Erp_QualityControlReceipt_IX5");

                entity.HasIndex(e => new { e.ProcessId, e.ReceiptDate }, "Erp_QualityControlReceipt_IX6");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledExplanation).HasMaxLength(4000);

                entity.Property(e => e.ControlQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CriticalQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.MajorQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinorQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_CurrentAccount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_InventoryReceipt");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_Project");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpQualityControlReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_QualityControlReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpQualityControlReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_QualityControlReceiptAttachment");

                entity.HasIndex(e => e.QualityControlReceiptId, "Erp_QualityControlReceiptAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.QualityControlReceipt)
                    .WithMany(p => p.ErpQualityControlReceiptAttachments)
                    .HasForeignKey(d => d.QualityControlReceiptId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptAttachment_Erp_QualityControlReceipt");
            });

            modelBuilder.Entity<ErpQualityControlReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_QualityControlReceiptItem");

                entity.HasIndex(e => e.QualityControlReceiptId, "Erp_QualityControlReceiptItem_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FaultyPlace).HasMaxLength(25);

                entity.Property(e => e.FaultyQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_Employee");

                entity.HasOne(d => d.FaultyCard)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.FaultyCardId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_FaultyCard");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Inventory");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_QualityControlReceiptItem");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_Project");

                entity.HasOne(d => d.QualityControlReceipt)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.QualityControlReceiptId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_QualityControlReceipt");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpQualityControlReceiptItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_QualityControlReceiptItem_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpQualityControlTestCard>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QualityControlTestCard");

                entity.ToTable("Erp_QualityControlTestCard");

                entity.HasIndex(e => new { e.CompanyId, e.TestCode }, "Erp_QualityControlTestCard_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Method).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.Standart).HasMaxLength(50);

                entity.Property(e => e.TestCode).HasMaxLength(25);

                entity.Property(e => e.TestName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpQualityControlTestCards)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Erp_QualityControlTestCard_Erp_Company");
            });

            modelBuilder.Entity<ErpQualityControlTestDetail>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QualityControlTestDetail");

                entity.ToTable("Erp_QualityControlTestDetail");

                entity.HasIndex(e => new { e.QualityControlId, e.ProcessId, e.QualityControlTestDate }, "Erp_QualityControlTestDetail_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation1).HasMaxLength(100);

                entity.Property(e => e.Explanation2).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.QualityControlTestDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpQualityControlTestDetails)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_QualityControlTestDetail_Erp_Process");

                entity.HasOne(d => d.QualityControl)
                    .WithMany(p => p.ErpQualityControlTestDetails)
                    .HasForeignKey(d => d.QualityControlId)
                    .HasConstraintName("FK_Erp_QualityControlTestDetail_Erp_QualityControl");

                entity.HasOne(d => d.QualityController)
                    .WithMany(p => p.ErpQualityControlTestDetails)
                    .HasForeignKey(d => d.QualityControllerId)
                    .HasConstraintName("FK_Erp_QualityControlTestDetail_Erp_Employee");
            });

            modelBuilder.Entity<ErpQualityType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_QualityType");

                entity.HasIndex(e => new { e.CompanyId, e.QualityCode }, "Erp_QualityType_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MaxFaultyLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MaxRollLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinPartLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinRollLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QualityCode).HasMaxLength(25);

                entity.Property(e => e.QualityName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartAndEndCleanLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpQualityTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_QualityType_Erp_Company");
            });

            modelBuilder.Entity<ErpQuotationReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QuotationReceipt");

                entity.ToTable("Erp_QuotationReceipt");

                entity.HasIndex(e => new { e.CompanyId, e.ReceiptType, e.ReceiptNo }, "Erp_QuotationReceipt_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_QuotationReceipt_IX1");

                entity.HasIndex(e => e.TransporterId, "Erp_QuotationReceipt_IX10");

                entity.HasIndex(e => e.WorkOrderReceiptId, "Erp_QuotationReceipt_IX11");

                entity.HasIndex(e => e.GlreceiptId, "Erp_QuotationReceipt_IX12");

                entity.HasIndex(e => e.CurrentAccountReceiptId, "Erp_QuotationReceipt_IX13");

                entity.HasIndex(e => e.RevisedReceiptId, "Erp_QuotationReceipt_IX14");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_QuotationReceipt_IX15");

                entity.HasIndex(e => e.VehicleId, "Erp_QuotationReceipt_IX16");

                entity.HasIndex(e => e.AddressId, "Erp_QuotationReceipt_IX2");

                entity.HasIndex(e => e.ShippingAddressId, "Erp_QuotationReceipt_IX3");

                entity.HasIndex(e => e.WarehouseId, "Erp_QuotationReceipt_IX4");

                entity.HasIndex(e => e.CostCenterId, "Erp_QuotationReceipt_IX5");

                entity.HasIndex(e => e.DealerId, "Erp_QuotationReceipt_IX6");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_QuotationReceipt_IX7");

                entity.HasIndex(e => e.ProjectId, "Erp_QuotationReceipt_IX8");

                entity.HasIndex(e => e.EmployeeId, "Erp_QuotationReceipt_IX9");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.GrandTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrandTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.PeriodEndDate).HasColumnType("datetime");

                entity.Property(e => e.PeriodStartDate).HasColumnType("datetime");

                entity.Property(e => e.PriceCode).HasMaxLength(25);

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ReceiptTime).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SubTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountCurrency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount1Currency3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WithholdingAmount2Currency3).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpQuotationReceiptAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Address");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Company");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_CurrentAccountContact");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_CostCenter");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpQuotationReceiptCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_CurrentAccount");

                entity.HasOne(d => d.CurrentAccountReceipt)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.CurrentAccountReceiptId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_CurrentAccountReceipt");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_CustomerTransaction");

                entity.HasOne(d => d.Dealer)
                    .WithMany(p => p.ErpQuotationReceiptDealers)
                    .HasForeignKey(d => d.DealerId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_CurrentAccount1");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_GLReceipt");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Crm_Lead");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Project");

                entity.HasOne(d => d.RevisedReceipt)
                    .WithMany(p => p.InverseRevisedReceipt)
                    .HasForeignKey(d => d.RevisedReceiptId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_QuotationReceipt_DBOnly");

                entity.HasOne(d => d.ShippingAddress)
                    .WithMany(p => p.ErpQuotationReceiptShippingAddresses)
                    .HasForeignKey(d => d.ShippingAddressId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Address1");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Transporter");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Vehicle");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Warehouse");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_WarehouseLocation");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_WorkOrder");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpQuotationReceipts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_QuotationReceipt_Erp_Workplace");
            });

            modelBuilder.Entity<ErpQuotationReceiptAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_QuotationReceiptAttachment");

                entity.HasIndex(e => e.QuotationReceiptId, "Erp_QuotationReceiptAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.QuotationReceipt)
                    .WithMany(p => p.ErpQuotationReceiptAttachments)
                    .HasForeignKey(d => d.QuotationReceiptId)
                    .HasConstraintName("FK_Erp_QuotationReceiptAttachment_Erp_QuotationReceipt");
            });

            modelBuilder.Entity<ErpQuotationReceiptItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QuotationReceiptItem");

                entity.ToTable("Erp_QuotationReceiptItem");

                entity.HasIndex(e => e.QuotationReceiptId, "Erp_QuotationReceiptItem_IX0");

                entity.HasIndex(e => e.ParentItemId, "Erp_QuotationReceiptItem_IX1");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_QuotationReceiptItem_IX10");

                entity.HasIndex(e => e.DiscountId, "Erp_QuotationReceiptItem_IX11");

                entity.HasIndex(e => e.ExpenseId, "Erp_QuotationReceiptItem_IX12");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_QuotationReceiptItem_IX13");

                entity.HasIndex(e => e.DemandReceiptItemId, "Erp_QuotationReceiptItem_IX14");

                entity.HasIndex(e => e.DemandReceiptItemId, "Erp_QuotationReceiptItem_IX15");

                entity.HasIndex(e => e.UsedEmployeeId, "Erp_QuotationReceiptItem_IX17");

                entity.HasIndex(e => e.InitialCostId, "Erp_QuotationReceiptItem_IX18");

                entity.HasIndex(e => e.InventoryCampaignId, "Erp_QuotationReceiptItem_IX19");

                entity.HasIndex(e => e.WarehouseId, "Erp_QuotationReceiptItem_IX2");

                entity.HasIndex(e => e.InventoryId, "Erp_QuotationReceiptItem_IX3");

                entity.HasIndex(e => e.UnitId, "Erp_QuotationReceiptItem_IX4");

                entity.HasIndex(e => e.ServiceCardId, "Erp_QuotationReceiptItem_IX5");

                entity.HasIndex(e => e.ProjectId, "Erp_QuotationReceiptItem_IX6");

                entity.HasIndex(e => e.EmployeeId, "Erp_QuotationReceiptItem_IX7");

                entity.HasIndex(e => e.PackagingId, "Erp_QuotationReceiptItem_IX8");

                entity.HasIndex(e => e.CostCenterId, "Erp_QuotationReceiptItem_IX9");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CommunicationTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommunicationTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CostPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DiscountAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DiscountsTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedDiscountVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DistributedExpenseForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExciseTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpenseRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExpensesTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex2Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Forex3Rate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotal3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncluded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ItemTotalVatIncludedForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetItemTotalForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetQuantityEntry).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetUnitPriceForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OrderedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PartyNo).HasMaxLength(25);

                entity.Property(e => e.PeriodEndDate).HasColumnType("datetime");

                entity.Property(e => e.PeriodStartDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VatAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountAccommodationForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatBaseAmountForex).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.VatRateAccommodation).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_CostCenter");

                entity.HasOne(d => d.DemandReceiptItem)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.DemandReceiptItemId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_DemandReceiptItem");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Discount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpQuotationReceiptItemEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Employee");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Meta_Forex");

                entity.HasOne(d => d.InitialCost)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.InitialCostId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_InitialCost");

                entity.HasOne(d => d.InventoryCampaign)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.InventoryCampaignId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_InventoryCampaign");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Inventory");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Model");

                entity.HasOne(d => d.Packaging)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.PackagingId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Packaging");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_QuotationReceiptItem");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Project");

                entity.HasOne(d => d.QuotationReceipt)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.QuotationReceiptId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_QuotationReceipt");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Resource");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Service");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Meta_UnitSetItem");

                entity.HasOne(d => d.UsedEmployee)
                    .WithMany(p => p.ErpQuotationReceiptItemUsedEmployees)
                    .HasForeignKey(d => d.UsedEmployeeId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Employee1");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Warehouse");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_WarehouseLocation");

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_WorkOrderItem");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpQuotationReceiptItems)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItem_Erp_Workplace");
            });

            modelBuilder.Entity<ErpQuotationReceiptItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_QuotationReceiptItemVariant");

                entity.ToTable("Erp_QuotationReceiptItemVariant");

                entity.HasIndex(e => e.QuotationReceiptItemId, "Erp_QuotationReceiptItemVariant_IX0");

                entity.HasIndex(e => e.WarehouseId, "Erp_QuotationReceiptItemVariant_IX1");

                entity.HasIndex(e => e.InventoryId, "Erp_QuotationReceiptItemVariant_IX2");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_QuotationReceiptItemVariant_IX3");

                entity.HasIndex(e => e.DemandReceiptItemVariantId, "Erp_QuotationReceiptItemVariant_IX4");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.NetUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OrderedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.DemandReceiptItemVariant)
                    .WithMany(p => p.ErpQuotationReceiptItemVariants)
                    .HasForeignKey(d => d.DemandReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItemVariant_Erp_DemandReceiptItemVariant");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpQuotationReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpQuotationReceiptItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.QuotationReceiptItem)
                    .WithMany(p => p.ErpQuotationReceiptItemVariants)
                    .HasForeignKey(d => d.QuotationReceiptItemId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItemVariant_Erp_QuotationReceiptItem");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpQuotationReceiptItemVariants)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_QuotationReceiptItemVariant_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpReceiptPaymentItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ReceiptPaymentItem");

                entity.ToTable("Erp_ReceiptPaymentItem");

                entity.HasIndex(e => new { e.SourceModule, e.SourceId }, "Erp_ReceiptPaymentItem_IX0");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_ReceiptPaymentItem_IX1");

                entity.HasIndex(e => e.ParentId, "Erp_ReceiptPaymentItem_IX2");

                entity.HasIndex(e => e.GlreceiptId, "Erp_ReceiptPaymentItem_IX3");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Cdtype).HasColumnName("CDType");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InstalmentDate).HasColumnType("datetime");

                entity.Property(e => e.InterestAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InterestRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.PaidAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PaidDate).HasColumnType("datetime");

                entity.Property(e => e.PaidForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpReceiptPaymentItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_ReceiptPaymentItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpReceiptPaymentItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ReceiptPaymentItem_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpReceiptPaymentItems)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_ReceiptPaymentItem_Erp_GLReceipt");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_ReceiptPaymentItem_Erp_ReceiptPaymentItem_DBOnly");
            });

            modelBuilder.Entity<ErpRecipe>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Recipe");

                entity.HasIndex(e => new { e.CompanyId, e.RecipeType, e.RecipeCode }, "Erp_Recipe_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.InventoryId, "Erp_Recipe_IX1");

                entity.HasIndex(e => e.ServiceId, "Erp_Recipe_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Recipe_IX3");

                entity.HasIndex(e => e.RouteId, "Erp_Recipe_IX4");

                entity.HasIndex(e => e.InventoryGroupId, "Erp_Recipe_IX5");

                entity.HasIndex(e => e.CategoryId, "Erp_Recipe_IX6");

                entity.HasIndex(e => e.MarkId, "Erp_Recipe_IX7");

                entity.HasIndex(e => e.ModelId, "Erp_Recipe_IX8");

                entity.HasIndex(e => new { e.UniqueId, e.CompanyId }, "UniqueId_Index");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.AutomationProcessNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DyeSolutions).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeCode).HasMaxLength(25);

                entity.Property(e => e.RecipeDate).HasColumnType("datetime");

                entity.Property(e => e.RecipeTime).HasColumnType("datetime");

                entity.Property(e => e.RevisionDate).HasColumnType("datetime");

                entity.Property(e => e.RevisionExplanation).HasMaxLength(100);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WetPickRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Category");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_CurrentAccount");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_InventoryVariant");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpRecipeLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_LabRecipe");

                entity.HasOne(d => d.LabRecipeRev2)
                    .WithMany(p => p.ErpRecipeLabRecipeRev2s)
                    .HasForeignKey(d => d.LabRecipeRev2Id)
                    .HasConstraintName("FK_Erp_Recipe_Erp_LabRecipeRev1");

                entity.HasOne(d => d.LabRecipeRev)
                    .WithMany(p => p.ErpRecipeLabRecipeRevs)
                    .HasForeignKey(d => d.LabRecipeRevId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_LabRecipeRev");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Mark");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Model");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpRecipePatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_LabRecipe2");

                entity.HasOne(d => d.RevisedRecipe)
                    .WithMany(p => p.InverseRevisedRecipe)
                    .HasForeignKey(d => d.RevisedRecipeId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Recipe_DBOnly");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Route");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Service");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_InventoryUnitItemSize_DBOnly");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpRecipes)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Recipe_Erp_Workplace");
            });

            modelBuilder.Entity<ErpRecipeAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RecipeAttachment");

                entity.HasIndex(e => e.RecipeId, "Erp_RecipeAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpRecipeAttachments)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_RecipeAttachment_Erp_Recipe");
            });

            modelBuilder.Entity<ErpRecipeItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RecipeItem");

                entity.HasIndex(e => e.RecipeId, "Erp_RecipeItem_IX0");

                entity.HasIndex(e => e.OwnerInventoryId, "Erp_RecipeItem_IX1");

                entity.HasIndex(e => e.ProjectId, "Erp_RecipeItem_IX10");

                entity.HasIndex(e => e.ServiceCardId, "Erp_RecipeItem_IX11");

                entity.HasIndex(e => e.OwnerServiceId, "Erp_RecipeItem_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_RecipeItem_IX3");

                entity.HasIndex(e => e.InventoryId, "Erp_RecipeItem_IX4");

                entity.HasIndex(e => e.UnitId, "Erp_RecipeItem_IX5");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_RecipeItem_IX6");

                entity.HasIndex(e => e.ExpenseId, "Erp_RecipeItem_IX7");

                entity.HasIndex(e => e.ProcessId, "Erp_RecipeItem_IX8");

                entity.HasIndex(e => e.RouteId, "Erp_RecipeItem_IX9");

                entity.HasIndex(e => e.UniqueId, "UniqueId_Index");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.CutWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DyeGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DyeSolutions).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DyeWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DyeWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Fein).HasMaxLength(25);

                entity.Property(e => e.Filters).HasMaxLength(50);

                entity.Property(e => e.FinalGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FinalWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MarkerLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerM2gram)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("MarkerM2Gram");

                entity.Property(e => e.MarkerPieces).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MatrixDefinition).HasMaxLength(25);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinimumWastage).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProgramGraphics).HasColumnType("image");

                entity.Property(e => e.Pus).HasMaxLength(25);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RawGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RawWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialLiquor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Variant1).HasMaxLength(25);

                entity.Property(e => e.Variant2).HasMaxLength(25);

                entity.Property(e => e.Variant3).HasMaxLength(25);

                entity.Property(e => e.Variant4).HasMaxLength(25);

                entity.Property(e => e.Variant5).HasMaxLength(25);

                entity.Property(e => e.Wastage).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.WetPickRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_RecipeItem_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpRecipeItemInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Inventory_DbOnly");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_InventoryVariant_DBOnly");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpRecipeItemOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Warehouse");

                entity.HasOne(d => d.OwnerInventory)
                    .WithMany(p => p.ErpRecipeItemOwnerInventories)
                    .HasForeignKey(d => d.OwnerInventoryId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Inventory1");

                entity.HasOne(d => d.OwnerService)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.OwnerServiceId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Service");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_RecipeItem_DBOnly");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Project");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Recipe");

                entity.HasOne(d => d.RecipeProgram)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.RecipeProgramId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_RecipeProgram");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Resource");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Route");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_InventoryUnitItemSize_DBOnly");

                entity.HasOne(d => d.WastageWarehouse)
                    .WithMany(p => p.ErpRecipeItemWastageWarehouses)
                    .HasForeignKey(d => d.WastageWarehouseId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_Warehouse2");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpRecipeItems)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_RecipeItem_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpRecipeItemWastageWarehouse>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RecipeItemWastageWarehouse");

                entity.HasIndex(e => e.RecipeItemId, "Erp_RecipeItemWastageWarehouse_IX0");

                entity.HasIndex(e => e.DepartmentId, "Erp_RecipeItemWastageWarehouse_IX1");

                entity.HasIndex(e => e.WarehouseId, "Erp_RecipeItemWastageWarehouse_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpRecipeItemWastageWarehouses)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_RecipeItemWastageWarehouse_Erp_Department");

                entity.HasOne(d => d.RecipeItem)
                    .WithMany(p => p.ErpRecipeItemWastageWarehouses)
                    .HasForeignKey(d => d.RecipeItemId)
                    .HasConstraintName("FK_Erp_RecipeItemWastageWarehouse_Erp_RecipeItem");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpRecipeItemWastageWarehousesNavigation)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_RecipeItemWastageWarehouse_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpRecipeOpr>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Erp_RecipeProgramOpr");

                entity.ToTable("Erp_RecipeOpr");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DyeSolutions).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProcessingTime).HasColumnType("datetime");

                entity.Property(e => e.RecipeDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialLiquor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WetPickRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.LabRecipeRev)
                    .WithMany(p => p.ErpRecipeOprs)
                    .HasForeignKey(d => d.LabRecipeRevId)
                    .HasConstraintName("Erp_RecipeOpr_Erp_LabRecipeRev");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpRecipeOprs)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("Erp_RecipeOpr_Erp_Process");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpRecipeOprs)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_RecipeOpr_Erp_Recipe");

                entity.HasOne(d => d.RecipeProgram2)
                    .WithMany(p => p.ErpRecipeOprRecipeProgram2s)
                    .HasForeignKey(d => d.RecipeProgram2Id)
                    .HasConstraintName("FK_Erp_RecipeOpr_Erp_RecipeProgram1");

                entity.HasOne(d => d.RecipeProgram)
                    .WithMany(p => p.ErpRecipeOprRecipePrograms)
                    .HasForeignKey(d => d.RecipeProgramId)
                    .HasConstraintName("FK_Erp_RecipeOpr_Erp_RecipeProgram");

                entity.HasOne(d => d.RecipeProgramType)
                    .WithMany(p => p.ErpRecipeOprs)
                    .HasForeignKey(d => d.RecipeProgramTypeId)
                    .HasConstraintName("FK_Erp_RecipeOpr_Erp_RecipeProgramType");

                entity.HasOne(d => d.RouteItem)
                    .WithMany(p => p.ErpRecipeOprs)
                    .HasForeignKey(d => d.RouteItemId)
                    .HasConstraintName("FK_Erp_RecipeOpr_Erp_RouteItem");
            });

            modelBuilder.Entity<ErpRecipeProgram>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RecipeProgram");

                entity.HasIndex(e => new { e.CompanyId, e.ProgramType, e.ProgramTypeId, e.ProgramCode }, "Erp_RecipeProgram_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AutomationCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DyeSolutions).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProcessingTime).HasColumnType("datetime");

                entity.Property(e => e.ProgramCode).HasMaxLength(25);

                entity.Property(e => e.ProgramGraphics).HasColumnType("image");

                entity.Property(e => e.ProgramName).HasMaxLength(50);

                entity.Property(e => e.RecipeDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SpecialLiquor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WetPickRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpRecipePrograms)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_RecipeProgram_Erp_Company");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpRecipePrograms)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_RecipeProgram_Erp_Inventory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpRecipePrograms)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_RecipeProgram_Erp_Process");

                entity.HasOne(d => d.ProgramTypeNavigation)
                    .WithMany(p => p.ErpRecipePrograms)
                    .HasForeignKey(d => d.ProgramTypeId)
                    .HasConstraintName("FK_Erp_RecipeProgram_Erp_RecipeProgramType");
            });

            modelBuilder.Entity<ErpRecipeProgramItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RecipeProgramItem");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DyeSolutions).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SpecialLiquor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WetPickRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpRecipeProgramItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_RecipeProgramItem_Erp_Inventory");

                entity.HasOne(d => d.RecipeProgram)
                    .WithMany(p => p.ErpRecipeProgramItems)
                    .HasForeignKey(d => d.RecipeProgramId)
                    .HasConstraintName("FK_Erp_RecipeProgramItem_Erp_RecipeProgram");
            });

            modelBuilder.Entity<ErpRecipeProgramType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RecipeProgramType");

                entity.HasIndex(e => new { e.CompanyId, e.TypeName }, "Erp_RecipeProgramType_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpRecipeProgramTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_RecipeProgramType_Erp_Company");

                entity.HasOne(d => d.Process2)
                    .WithMany(p => p.ErpRecipeProgramTypeProcess2s)
                    .HasForeignKey(d => d.Process2Id)
                    .HasConstraintName("FK_Erp_RecipeProgramType_Erp_Process2");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpRecipeProgramTypeProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_RecipeProgramType_Erp_Process");
            });

            modelBuilder.Entity<ErpRefundCheque>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_RefundCheque");

                entity.ToTable("Erp_RefundCheque");

                entity.HasIndex(e => new { e.CompanyId, e.ChequeCode }, "Erp_RefundCheque_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.PosReceiptId, "Erp_RefundCheque_IX1");

                entity.HasIndex(e => e.ReceivedPosReceiptId, "Erp_RefundCheque_IX2");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ChequeCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PosReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.ReceivedPosReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.SerialNo).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpRefundCheques)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_RefundCheque_Erp_Company");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpRefundCheques)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_RefundCheque_Meta_Forex");

                entity.HasOne(d => d.PosReceipt)
                    .WithMany(p => p.ErpRefundChequePosReceipts)
                    .HasForeignKey(d => d.PosReceiptId)
                    .HasConstraintName("FK_Erp_RefundCheque_Erp_Pos");

                entity.HasOne(d => d.ReceivedPosReceipt)
                    .WithMany(p => p.ErpRefundChequeReceivedPosReceipts)
                    .HasForeignKey(d => d.ReceivedPosReceiptId)
                    .HasConstraintName("FK_Erp_RefundCheque_Erp_Pos1");
            });

            modelBuilder.Entity<ErpRegimeType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RegimeType");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RegimeCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<ErpRequirement>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Requirement");

                entity.ToTable("Erp_Requirement");

                entity.HasIndex(e => e.WorkOrderId, "Erp_Requirement_IX0");

                entity.HasIndex(e => new { e.WorkOrderId, e.StyleId, e.InventoryId, e.InventoryVariantId }, "Erp_Requirement_IX1");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_Requirement_IX2");

                entity.HasIndex(e => e.StyleId, "Erp_Requirement_IX3");

                entity.HasIndex(e => e.InventoryId, "Erp_Requirement_IX4");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_Requirement_IX5");

                entity.HasIndex(e => e.UnitId, "Erp_Requirement_IX6");

                entity.HasIndex(e => e.ParentId, "Erp_Requirement_IX7");

                entity.HasIndex(e => e.OrderReceiptId, "Erp_Requirement_IX8");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_Requirement_IX9");

                entity.Property(e => e.CutWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DyeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DyeWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrintWastage).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn0).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn12).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn13).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn14).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn15).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn4).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn5).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn6).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn7).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn8).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorIn9).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut0).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut12).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut13).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut14).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut15).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut4).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut5).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut6).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut7).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut8).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SubContractorOut9).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Variant1).HasMaxLength(25);

                entity.Property(e => e.Variant2).HasMaxLength(25);

                entity.Property(e => e.Wastage).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_Requirement_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpRequirementInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_InventoryVariant");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_OrderReceipt");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_OrderReceiptItem");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpRequirementOutWarehouses)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Warehouse");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Requirement");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Process");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Recipe");

                entity.HasOne(d => d.Style)
                    .WithMany(p => p.ErpRequirementStyles)
                    .HasForeignKey(d => d.StyleId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Inventory1");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_InventoryUnitItemSize");

                entity.HasOne(d => d.Variant1Navigation)
                    .WithMany(p => p.ErpRequirementVariant1Navigations)
                    .HasForeignKey(d => d.Variant1Id)
                    .HasConstraintName("FK_Erp_Requirement_Erp_VariantItem1");

                entity.HasOne(d => d.Variant2Navigation)
                    .WithMany(p => p.ErpRequirementVariant2Navigations)
                    .HasForeignKey(d => d.Variant2Id)
                    .HasConstraintName("FK_Erp_Requirement_Erp_VariantItem2");

                entity.HasOne(d => d.Variant3)
                    .WithMany(p => p.ErpRequirementVariant3s)
                    .HasForeignKey(d => d.Variant3Id)
                    .HasConstraintName("FK_Erp_Requirement_Erp_VariantItem3");

                entity.HasOne(d => d.Variant4)
                    .WithMany(p => p.ErpRequirementVariant4s)
                    .HasForeignKey(d => d.Variant4Id)
                    .HasConstraintName("FK_Erp_Requirement_Erp_VariantItem4");

                entity.HasOne(d => d.Variant5)
                    .WithMany(p => p.ErpRequirementVariant5s)
                    .HasForeignKey(d => d.Variant5Id)
                    .HasConstraintName("FK_Erp_Requirement_Erp_VariantItem5");

                entity.HasOne(d => d.WastageWarehouse)
                    .WithMany(p => p.ErpRequirementWastageWarehouses)
                    .HasForeignKey(d => d.WastageWarehouseId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_Warehouse2");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpRequirements)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_Requirement_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpResource>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Resource");

                entity.HasIndex(e => new { e.CompanyId, e.ResourceCode }, "Erp_Resource_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.DepartmentId, "Erp_Resource_IX1");

                entity.HasIndex(e => e.EmployeeId, "Erp_Resource_IX2");

                entity.HasIndex(e => e.VehicleId, "Erp_Resource_IX3");

                entity.HasIndex(e => e.ServiceId, "Erp_Resource_IX4");

                entity.HasIndex(e => e.InventoryId, "Erp_Resource_IX5");

                entity.HasIndex(e => e.ParentResourceId, "Erp_Resource_IX6");

                entity.HasIndex(e => e.SupplierId, "Erp_Resource_IX7");

                entity.HasIndex(e => e.ProcessId, "Erp_Resource_IX8");

                entity.HasIndex(e => new { e.CompanyId, e.ResourceType, e.ResourceCode }, "Erp_Resource_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AutomationCode).HasMaxLength(25);

                entity.Property(e => e.Brand).HasMaxLength(100);

                entity.Property(e => e.Capacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CompetencyPoints).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndUsing).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ExtraCapacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Flote).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MachineName).HasMaxLength(100);

                entity.Property(e => e.ModelName).HasMaxLength(100);

                entity.Property(e => e.ProxyNo).HasMaxLength(50);

                entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

                entity.Property(e => e.ResourceCode).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartUsing).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WarrantyDocNo).HasMaxLength(100);

                entity.Property(e => e.WarrantyExpiration).HasColumnType("datetime");

                entity.Property(e => e.WarrantyStart).HasColumnType("datetime");

                entity.HasOne(d => d.Calendar)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.CalendarId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Calendar");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Employee");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Inventory");

                entity.HasOne(d => d.ParentResource)
                    .WithMany(p => p.InverseParentResource)
                    .HasForeignKey(d => d.ParentResourceId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Resource_DBOnly");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Process");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Service");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_Erp_Resource_Erp_CurrentAccount");

                entity.HasOne(d => d.Symbol)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.SymbolId)
                    .HasConstraintName("FK_Erp_Resource_Meta_Symbol");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Vehicle");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpResources)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Resource_Erp_Workplace");
            });

            modelBuilder.Entity<ErpResourceAttribute>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ResourceAttribute");

                entity.ToTable("Erp_ResourceAttribute");

                entity.HasIndex(e => e.ResourceId, "Erp_ResourceAttribute_IX0");

                entity.HasIndex(e => e.AttributeSetId, "Erp_ResourceAttribute_IX1");

                entity.HasIndex(e => e.AttributeSetItemId, "Erp_ResourceAttribute_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.ErpResourceAttributes)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Erp_ResourceAttribute_Erp_ResourceAttributeSet");

                entity.HasOne(d => d.AttributeSetItem)
                    .WithMany(p => p.ErpResourceAttributes)
                    .HasForeignKey(d => d.AttributeSetItemId)
                    .HasConstraintName("FK_Erp_ResourceAttribute_Erp_ResourceAttributeSetItem");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpResourceAttributes)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_ResourceAttribute_Erp_Resource");
            });

            modelBuilder.Entity<ErpResourceAttributeSet>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ResourceAttributeSet");

                entity.ToTable("Erp_ResourceAttributeSet");

                entity.HasIndex(e => new { e.CompanyId, e.AttributeCode }, "Erp_ResourceAttributeSet_IX0")
                    .IsUnique();

                entity.Property(e => e.AttributeCode).HasMaxLength(25);

                entity.Property(e => e.AttributeName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpResourceAttributeSets)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ResourceAttributeSet_Erp_Company");
            });

            modelBuilder.Entity<ErpResourceAttributeSetItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ResourceAttributeCard");

                entity.ToTable("Erp_ResourceAttributeSetItem");

                entity.HasIndex(e => e.AttributeSetId, "Erp_ResourceAttributeSetItem_IX0");

                entity.HasIndex(e => new { e.AttributeSetId, e.AttributeItemCode }, "Erp_ResourceAttributeSetItem_IX1")
                    .IsUnique();

                entity.Property(e => e.AttributeItemCode).HasMaxLength(25);

                entity.Property(e => e.AttributeItemName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.ErpResourceAttributeSetItems)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Erp_ResourceAttributeSetItem_Erp_ResourceAttributeSet");
            });

            modelBuilder.Entity<ErpResourceInventory>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ResourceInventory");

                entity.HasIndex(e => e.ResourceId, "Erp_ResourceInventory_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_ResourceInventory_IX1");

                entity.HasIndex(e => e.InventoryGroupId, "Erp_ResourceInventory_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.ErpResourceInventories)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Erp_ResourceInventory_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpResourceInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_ResourceInventory_Erp_Inventory");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpResourceInventories)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_ResourceInventory_Erp_Resource");
            });

            modelBuilder.Entity<ErpResourceOutOfUse>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ResourceOutOfUse");

                entity.HasIndex(e => e.ResourceId, "Erp_ResourceOutOfUse_IX0");

                entity.HasIndex(e => e.ReasonId, "Erp_ResourceOutOfUse_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Planning)
                    .WithMany(p => p.ErpResourceOutOfUses)
                    .HasForeignKey(d => d.PlanningId)
                    .HasConstraintName("FK_Erp_ResourceOutOfUse_Erp_Planning");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.ErpResourceOutOfUses)
                    .HasForeignKey(d => d.ReasonId)
                    .HasConstraintName("FK_Erp_ResourceOutOfUse_Erp_ResourceOutOfUseReason");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpResourceOutOfUses)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_ResourceOutOfUse_Erp_Resource");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpResourceOutOfUses)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_ResourceOutOfUse_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpResourceOutOfUseReason>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ResourceOutOfUseReason");

                entity.HasIndex(e => new { e.CompanyId, e.ReasonCode }, "Erp_ResourceOutOfUseReason_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReasonCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpResourceOutOfUseReasons)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ResourceOutOfUseReason_Erp_Company");
            });

            modelBuilder.Entity<ErpReturnType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ReturnType");

                entity.HasIndex(e => new { e.CompanyId, e.ReturnTypeCode }, "Erp_ReturnType_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReturnTypeCode).HasMaxLength(25);

                entity.Property(e => e.ReturnTypeName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpReturnTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ReturnType_Erp_Company");
            });

            modelBuilder.Entity<ErpRoute>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Route");

                entity.HasIndex(e => new { e.CompanyId, e.RouteCode }, "Erp_Route_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RouteCode).HasMaxLength(25);

                entity.Property(e => e.RouteName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WastageRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpRoutes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Route_Erp_Company");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpRoutes)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_Route_Erp_Inventory");

                entity.HasOne(d => d.QualityControl)
                    .WithMany(p => p.ErpRoutes)
                    .HasForeignKey(d => d.QualityControlId)
                    .HasConstraintName("FK_Erp_Route_Erp_QualityControl");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpRoutes)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Route_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpRouteItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RouteItem");

                entity.HasIndex(e => e.RouteId, "Erp_RouteItem_IX0");

                entity.HasIndex(e => e.ParentProcessId, "Erp_RouteItem_IX1");

                entity.HasIndex(e => e.ProcessId, "Erp_RouteItem_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_RouteItem_IX3");

                entity.HasIndex(e => e.ResourceId, "Erp_RouteItem_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProcessTime).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpRouteItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_RouteItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpRouteItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_RouteItem_Meta_Forex");

                entity.HasOne(d => d.ParentProcess)
                    .WithMany(p => p.ErpRouteItemParentProcesses)
                    .HasForeignKey(d => d.ParentProcessId)
                    .HasConstraintName("FK_Erp_RouteItem_Erp_Process");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpRouteItemProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_RouteItem_Erp_Process1");

                entity.HasOne(d => d.RecipeProgram)
                    .WithMany(p => p.ErpRouteItems)
                    .HasForeignKey(d => d.RecipeProgramId)
                    .HasConstraintName("FK_Erp_RouteItem_Erp_RecipeProgram");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpRouteItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_RouteItem_Erp_Resource");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpRouteItems)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_RouteItem_Erp_Route");
            });

            modelBuilder.Entity<ErpRoutePrecessor>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_RoutePrecessor");

                entity.HasIndex(e => e.RouteItemId, "Erp_RoutePrecessor_IX0");

                entity.HasIndex(e => e.OverlapRouteItemId, "Erp_RoutePrecessor_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.OverlapRouteItem)
                    .WithMany(p => p.ErpRoutePrecessorOverlapRouteItems)
                    .HasForeignKey(d => d.OverlapRouteItemId)
                    .HasConstraintName("FK_Erp_RoutePrecessor_Erp_RouteItem1");

                entity.HasOne(d => d.RouteItem)
                    .WithMany(p => p.ErpRoutePrecessorRouteItems)
                    .HasForeignKey(d => d.RouteItemId)
                    .HasConstraintName("FK_Erp_RoutePrecessor_Erp_RouteItem");
            });

            modelBuilder.Entity<ErpSalesContract>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_SalesContract");

                entity.HasIndex(e => new { e.CompanyId, e.ContractCode }, "Erp_SalesContract_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CurrentAccountId, "Erp_SalesContract_IX1");

                entity.Property(e => e.Amount1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Code1).HasMaxLength(25);

                entity.Property(e => e.Code2).HasMaxLength(25);

                entity.Property(e => e.ContractCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpSalesContracts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_SalesContract_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpSalesContracts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_SalesContract_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpSeason>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Season");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SeasonName).HasMaxLength(50);

                entity.Property(e => e.ShortCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpSeasons)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Season_Erp_Company");
            });

            modelBuilder.Entity<ErpService>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Service");

                entity.ToTable("Erp_Service");

                entity.HasIndex(e => new { e.CompanyId, e.ServiceCode }, "Erp_Service_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.GroupId, "Erp_Service_IX1");

                entity.HasIndex(e => e.ParentId, "Erp_Service_IX2");

                entity.HasIndex(e => e.UnitId, "Erp_Service_IX3");

                entity.HasIndex(e => e.TaxId, "Erp_Service_IX4");

                entity.HasIndex(e => e.PurchaseVatId, "Erp_Service_IX5");

                entity.HasIndex(e => e.PurchaseReturnVatId, "Erp_Service_IX6");

                entity.HasIndex(e => e.SalesVatId, "Erp_Service_IX7");

                entity.HasIndex(e => e.SalesReturnVatId, "Erp_Service_IX8");

                entity.HasIndex(e => e.CategoryId, "Erp_Service_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AccvatId).HasColumnName("ACCVatId");

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.CampaignGroup).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExtvatId).HasColumnName("EXTVatId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IsKkegmasterAccountsEffective).HasColumnName("IsKKEGMasterAccountsEffective");

                entity.Property(e => e.IsoDocumentNo).HasMaxLength(50);

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.PriceGroup).HasMaxLength(25);

                entity.Property(e => e.SctvatId).HasColumnName("SCTVatId");

                entity.Property(e => e.ServiceCode).HasMaxLength(25);

                entity.Property(e => e.ServiceName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WebContent).HasMaxLength(100);

                entity.HasOne(d => d.Accvat)
                    .WithMany(p => p.ErpServiceAccvats)
                    .HasForeignKey(d => d.AccvatId)
                    .HasConstraintName("FK_Erp_Service_Erp_TaxACCVat");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ErpServices)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Erp_Service_Erp_Category");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpServices)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Service_Erp_Company");

                entity.HasOne(d => d.Extvat)
                    .WithMany(p => p.ErpServiceExtvats)
                    .HasForeignKey(d => d.ExtvatId)
                    .HasConstraintName("FK_Erp_Service_Erp_TaxEXTVat");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ErpServices)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_Erp_Service_Erp_ServiceGroup");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Service_Erp_Service");

                entity.HasOne(d => d.PurchaseReturnVat)
                    .WithMany(p => p.ErpServicePurchaseReturnVats)
                    .HasForeignKey(d => d.PurchaseReturnVatId)
                    .HasConstraintName("FK_Erp_Service_Erp_Tax2");

                entity.HasOne(d => d.PurchaseVat)
                    .WithMany(p => p.ErpServicePurchaseVats)
                    .HasForeignKey(d => d.PurchaseVatId)
                    .HasConstraintName("FK_Erp_Service_Erp_Tax1");

                entity.HasOne(d => d.SalesReturnVat)
                    .WithMany(p => p.ErpServiceSalesReturnVats)
                    .HasForeignKey(d => d.SalesReturnVatId)
                    .HasConstraintName("FK_Erp_Service_Erp_Tax4");

                entity.HasOne(d => d.SalesVat)
                    .WithMany(p => p.ErpServiceSalesVats)
                    .HasForeignKey(d => d.SalesVatId)
                    .HasConstraintName("FK_Erp_Service_Erp_Tax3");

                entity.HasOne(d => d.Sctvat)
                    .WithMany(p => p.ErpServiceSctvats)
                    .HasForeignKey(d => d.SctvatId)
                    .HasConstraintName("FK_Erp_Service_Erp_TaxSCTVat");

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.ErpServiceTaxes)
                    .HasForeignKey(d => d.TaxId)
                    .HasConstraintName("FK_Erp_Service_Erp_Tax");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpServices)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_Service_Erp_UnitSet");
            });

            modelBuilder.Entity<ErpServiceAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_ServiceAttachment");

                entity.HasIndex(e => e.ServiceCardId, "Erp_ServiceAttachment_IX0");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpServiceAttachments)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_ServiceAttachment_Erp_Service");
            });

            modelBuilder.Entity<ErpServiceExplanation>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServiceExplanation");

                entity.ToTable("Erp_ServiceExplanation");

                entity.HasIndex(e => e.ServiceId, "Erp_ServiceExplanation_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpServiceExplanations)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_ServiceExplanation_Erp_Service");
            });

            modelBuilder.Entity<ErpServiceGroup>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServiceGroup");

                entity.ToTable("Erp_ServiceGroup");

                entity.HasIndex(e => new { e.CompanyId, e.GroupCode }, "Erp_ServiceGroup_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpServiceGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_ServiceGroup_Erp_Company");
            });

            modelBuilder.Entity<ErpServiceIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServiceAccount");

                entity.ToTable("Erp_ServiceIA");

                entity.HasIndex(e => e.ServiceId, "Erp_ServiceIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_ServiceIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_ServiceIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpServiceIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_ServiceIA_Erp_CostCenter");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpServiceIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_ServiceIA_Erp_GLAccount");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpServiceIas)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_ServiceIA_Erp_Service");
            });

            modelBuilder.Entity<ErpServicePriceList>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServicePriceList");

                entity.ToTable("Erp_ServicePriceList");

                entity.HasIndex(e => e.ServiceId, "Erp_ServicePriceList_IX0");

                entity.HasIndex(e => e.ServiceGroupId, "Erp_ServicePriceList_IX1");

                entity.HasIndex(e => e.UnitSetItemId, "Erp_ServicePriceList_IX2");

                entity.HasIndex(e => e.CurrAccId, "Erp_ServicePriceList_IX3");

                entity.HasIndex(e => e.CurrAccGroupId, "Erp_ServicePriceList_IX4");

                entity.HasIndex(e => e.DepartmentId, "Erp_ServicePriceList_IX5");

                entity.HasIndex(e => e.PaymentPlanId, "Erp_ServicePriceList_IX6");

                entity.HasIndex(e => e.ProjectId, "Erp_ServicePriceList_IX7");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CampaignCode).HasMaxLength(25);

                entity.Property(e => e.CurrAccDiscountGroup).HasMaxLength(25);

                entity.Property(e => e.CurrAccGroupSpecial).HasMaxLength(15);

                entity.Property(e => e.CurrAccSpecial).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Discount).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.Formula).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PriceCode).HasMaxLength(25);

                entity.Property(e => e.ServiceCampaignCode).HasMaxLength(25);

                entity.Property(e => e.ServiceGroupSpecial).HasMaxLength(15);

                entity.Property(e => e.ServicePriceGroup).HasMaxLength(25);

                entity.Property(e => e.ServiceSpecial).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrAccGroup)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.CurrAccGroupId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_CurrentAccountGroup");

                entity.HasOne(d => d.CurrAcc)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.CurrAccId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_CurrentAccount");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_Department");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Meta_Forex");

                entity.HasOne(d => d.PaymentPlan)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.PaymentPlanId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_PaymentPlan");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_Project");

                entity.HasOne(d => d.ServiceGroup)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.ServiceGroupId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_ServiceGroup");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_Service");

                entity.HasOne(d => d.UnitSetItem)
                    .WithMany(p => p.ErpServicePriceLists)
                    .HasForeignKey(d => d.UnitSetItemId)
                    .HasConstraintName("FK_Erp_ServicePriceList_Erp_ServiceUnitItemSize");
            });

            modelBuilder.Entity<ErpServiceTotal>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServiceTotal");

                entity.ToTable("Erp_ServiceTotal");

                entity.HasIndex(e => e.ServiceId, "Erp_ServiceTotal_IX0");

                entity.HasIndex(e => new { e.ServiceId, e.TotalDate }, "Erp_ServiceTotal_IX1");

                entity.Property(e => e.ActualDemand).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AveragePrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CustomerOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastInDate).HasColumnType("datetime");

                entity.Property(e => e.LastInPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LastOutDate).HasColumnType("datetime");

                entity.Property(e => e.LastOutPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Planned).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PreCustomerOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PreCustomerOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrePurchaseOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrePurchaseOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Purchase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseOrder).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseOrderAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PurchaseReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Received).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceivedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Reserved).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Sale).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SaleAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SaleReturn).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SaleReturnAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Shipped).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShippedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalDate).HasColumnType("datetime");

                entity.Property(e => e.TotalInflow).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalInflowAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalOutflow).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalOutflowAmount).HasColumnType("decimal(28, 8)");
            });

            modelBuilder.Entity<ErpServiceUnitItemSize>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServiceUnitItemSize");

                entity.ToTable("Erp_ServiceUnitItemSize");

                entity.HasIndex(e => e.ServiceId, "Erp_ServiceUnitItemSize_IX0");

                entity.HasIndex(e => e.UnitItemId, "Erp_ServiceUnitItemSize_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpServiceUnitItemSizes)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_ServiceUnitItemSize_Erp_Service");

                entity.HasOne(d => d.UnitItem)
                    .WithMany(p => p.ErpServiceUnitItemSizes)
                    .HasForeignKey(d => d.UnitItemId)
                    .HasConstraintName("FK_Erp_ServiceUnitItemSize_Meta_UnitSetItem");
            });

            modelBuilder.Entity<ErpServiceWorkplace>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ServiceWorkplace");

                entity.ToTable("Erp_ServiceWorkplace");

                entity.HasIndex(e => e.ServiceId, "Erp_ServiceWorkplace_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ErpServiceWorkplaces)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Erp_ServiceWorkplace_Erp_Service");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpServiceWorkplaces)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_ServiceWorkplace_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpServiceWorkplaces)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_ServiceWorkplace_Erp_Workplace");
            });

            modelBuilder.Entity<ErpSizeSet>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_SizeSet");

                entity.ToTable("Erp_SizeSet");

                entity.HasIndex(e => new { e.CompanyId, e.Code }, "Erp_SizeSet_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.InventoryId, "Erp_SizeSet_IX1");

                entity.HasIndex(e => e.WorkOrderId, "Erp_SizeSet_IX2");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MasterSize).HasMaxLength(25);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.StyleGroupCode).HasMaxLength(25);

                entity.Property(e => e.SvalueText).HasColumnName("SValueText");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpSizeSets)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_SizeSet_Erp_Company");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpSizeSets)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_SizeSet_Erp_Inventory");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpSizeSets)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_SizeSet_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpSizeSetItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_SizeSetItem");

                entity.ToTable("Erp_SizeSetItem");

                entity.HasIndex(e => e.SizeSetId, "Erp_SizeSetItem_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_SizeSetItem_IX1");

                entity.HasIndex(e => e.SizeSetParameterId, "Erp_SizeSetItem_IX2");

                entity.HasIndex(e => e.WorkOrderId, "Erp_SizeSetItem_IX3");

                entity.HasIndex(e => e.ProcessId, "Erp_SizeSetItem_IX4");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Shrinkage).HasMaxLength(15);

                entity.Property(e => e.ShrinkageLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShrinkageWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SvalueText).HasColumnName("SValueText");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpSizeSetItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_SizeSetItem_Erp_Inventory");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpSizeSetItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_SizeSetItem_Erp_Process");

                entity.HasOne(d => d.SizeSet)
                    .WithMany(p => p.ErpSizeSetItems)
                    .HasForeignKey(d => d.SizeSetId)
                    .HasConstraintName("FK_Erp_SizeSetItem_Erp_SizeSet");

                entity.HasOne(d => d.SizeSetParameter)
                    .WithMany(p => p.ErpSizeSetItems)
                    .HasForeignKey(d => d.SizeSetParameterId)
                    .HasConstraintName("FK_Erp_SizeSetItem_Erp_SizeSetParameter");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpSizeSetItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_SizeSetItem_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpSizeSetItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_SizeSetItemVariant");

                entity.ToTable("Erp_SizeSetItemVariant");

                entity.HasIndex(e => e.SizeSetItemId, "Erp_SizeSetItemVariant_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_SizeSetItemVariant_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_SizeSetItemVariant_IX2");

                entity.HasIndex(e => e.VariantId, "Erp_SizeSetItemVariant_IX3");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SizeDescription).HasMaxLength(15);

                entity.Property(e => e.SvalueText).HasColumnName("SValueText");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpSizeSetItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_SizeSetItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpSizeSetItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_SizeSetItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.SizeSetItem)
                    .WithMany(p => p.ErpSizeSetItemVariants)
                    .HasForeignKey(d => d.SizeSetItemId)
                    .HasConstraintName("FK_Erp_SizeSetItemVariant_Erp_SizeSetItem");

                entity.HasOne(d => d.Variant)
                    .WithMany(p => p.ErpSizeSetItemVariants)
                    .HasForeignKey(d => d.VariantId)
                    .HasConstraintName("FK_Erp_SizeSetItemVariant_Erp_VariantItem");
            });

            modelBuilder.Entity<ErpSizeSetParameter>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_SizeSetParameter");

                entity.ToTable("Erp_SizeSetParameter");

                entity.HasIndex(e => new { e.CompanyId, e.Code }, "Erp_SizeSetParameter_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Code).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Name1).HasMaxLength(50);

                entity.Property(e => e.Name2).HasMaxLength(50);

                entity.Property(e => e.Name3).HasMaxLength(50);

                entity.Property(e => e.ShrinkageLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShrinkageWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpSizeSetParameters)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_SizeSetParameter_Erp_Company");
            });

            modelBuilder.Entity<ErpSubscription>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Subscription");

                entity.HasIndex(e => new { e.CompanyId, e.RecId }, "Erp_Subscriptiont_IX1");

                entity.HasIndex(e => e.UserId, "Erp_Subscriptiont_IX2");

                entity.HasIndex(e => e.ContactId, "Erp_Subscriptiont_IX3");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.Content).HasColumnType("image");

                entity.Property(e => e.ContentUrl).HasColumnName("ContentURL");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpSubscriptions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Subscription_Erp_Company");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ErpSubscriptions)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_Erp_Subscription_Erp_CurrentAccountContact");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpSubscriptions)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_Subscription_Meta_User");
            });

            modelBuilder.Entity<ErpTask>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Task");

                entity.HasIndex(e => e.ScheduleId, "Erp_Task_IX0");

                entity.HasIndex(e => e.UserId, "Erp_Task_IX1");

                entity.HasIndex(e => e.PreviousTaskId, "Erp_Task_IX2");

                entity.HasIndex(e => e.NextTaskId, "Erp_Task_IX3");

                entity.HasIndex(e => e.StartExpirationMsgId, "Erp_Task_IX4");

                entity.HasIndex(e => e.CompletionExpirationMsgId, "Erp_Task_IX5");

                entity.HasIndex(e => e.OnStartMsgId, "Erp_Task_IX6");

                entity.HasIndex(e => e.OnSuccessMsgId, "Erp_Task_IX7");

                entity.HasIndex(e => e.OnFailureMsgId, "Erp_Task_IX8");

                entity.HasIndex(e => e.OnCancelMsgId, "Erp_Task_IX9");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartingDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpTasks)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Task_Erp_Company");

                entity.HasOne(d => d.CompletionExpirationMsg)
                    .WithMany(p => p.ErpTaskCompletionExpirationMsgs)
                    .HasForeignKey(d => d.CompletionExpirationMsgId)
                    .HasConstraintName("FK_Erp_Task_Erp_WorkFlowMsgAddress1");

                entity.HasOne(d => d.NextTask)
                    .WithMany(p => p.InverseNextTask)
                    .HasForeignKey(d => d.NextTaskId)
                    .HasConstraintName("FK_Erp_Task_Erp_Task1");

                entity.HasOne(d => d.OnCancelMsg)
                    .WithMany(p => p.ErpTaskOnCancelMsgs)
                    .HasForeignKey(d => d.OnCancelMsgId)
                    .HasConstraintName("FK_Erp_Task_Erp_WorkFlowMsgAddress5");

                entity.HasOne(d => d.OnFailureMsg)
                    .WithMany(p => p.ErpTaskOnFailureMsgs)
                    .HasForeignKey(d => d.OnFailureMsgId)
                    .HasConstraintName("FK_Erp_Task_Erp_WorkFlowMsgAddress4");

                entity.HasOne(d => d.OnStartMsg)
                    .WithMany(p => p.ErpTaskOnStartMsgs)
                    .HasForeignKey(d => d.OnStartMsgId)
                    .HasConstraintName("FK_Erp_Task_Erp_WorkFlowMsgAddress2");

                entity.HasOne(d => d.OnSuccessMsg)
                    .WithMany(p => p.ErpTaskOnSuccessMsgs)
                    .HasForeignKey(d => d.OnSuccessMsgId)
                    .HasConstraintName("FK_Erp_Task_Erp_WorkFlowMsgAddress3");

                entity.HasOne(d => d.PreviousTask)
                    .WithMany(p => p.InversePreviousTask)
                    .HasForeignKey(d => d.PreviousTaskId)
                    .HasConstraintName("FK_Erp_Task_Erp_Task");

                entity.HasOne(d => d.Schedule)
                    .WithMany(p => p.ErpTasks)
                    .HasForeignKey(d => d.ScheduleId)
                    .HasConstraintName("FK_Erp_Task_Meta_Schedule");

                entity.HasOne(d => d.StartExpirationMsg)
                    .WithMany(p => p.ErpTaskStartExpirationMsgs)
                    .HasForeignKey(d => d.StartExpirationMsgId)
                    .HasConstraintName("FK_Erp_Task_Erp_WorkFlowMsgAddress");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ErpTasks)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Erp_Task_Meta_User");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpTasks)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Task_Erp_Workplace");
            });

            modelBuilder.Entity<ErpTax>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_TaxTable");

                entity.ToTable("Erp_Tax");

                entity.HasIndex(e => new { e.CompanyId, e.TaxType, e.TaxCode }, "Erp_Tax_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.TaxType }, "Erp_Tax_IX1");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TaxCode).HasMaxLength(25);

                entity.Property(e => e.UniversalCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpTaxes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Tax_Erp_Company");
            });

            modelBuilder.Entity<ErpTaxIa>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_TaxAccount");

                entity.ToTable("Erp_TaxIA");

                entity.HasIndex(e => e.TaxId, "Erp_TaxIA_IX0");

                entity.HasIndex(e => e.GlaccountId, "Erp_TaxIA_IX1");

                entity.HasIndex(e => e.CostCenterId, "Erp_TaxIA_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GlaccountId).HasColumnName("GLAccountId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpTaxIas)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_TaxIA_Erp_CostCenter");

                entity.HasOne(d => d.Glaccount)
                    .WithMany(p => p.ErpTaxIas)
                    .HasForeignKey(d => d.GlaccountId)
                    .HasConstraintName("FK_Erp_TaxIA_Erp_GLAccount");

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.ErpTaxIas)
                    .HasForeignKey(d => d.TaxId)
                    .HasConstraintName("FK_TaxAccount_TaxTable");
            });

            modelBuilder.Entity<ErpTest>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Test");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TestCode).HasMaxLength(25);

                entity.Property(e => e.TestName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpTests)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Test_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpTests)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Test_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpTestItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_TestItem");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpTestItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_TestItem_Erp_Inventory");

                entity.HasOne(d => d.Test)
                    .WithMany(p => p.ErpTestItems)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("FK_Erp_TestItem_Erp_Test");
            });

            modelBuilder.Entity<ErpTradingGroup>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_TradingGroup");

                entity.HasIndex(e => new { e.CompanyId, e.GroupCode }, "Erp_TradingGroup_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpTradingGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_TradingGroup_Erp_Company");
            });

            modelBuilder.Entity<ErpTransporter>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Transporter");

                entity.HasIndex(e => new { e.CompanyId, e.TransporterCode }, "Erp_Transporter_IX0");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Transporter_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TransporterCode).HasMaxLength(25);

                entity.Property(e => e.TransporterName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpTransporters)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Transporter_Erp_Company");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpTransporters)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Transporter_Erp_CurrentAccount");
            });

            modelBuilder.Entity<ErpVariantCard>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_VariantCard");

                entity.ToTable("Erp_VariantCard");

                entity.HasIndex(e => new { e.TypeId, e.VariantCardCode }, "Erp_VariantCard_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VariantCardCode).HasMaxLength(25);

                entity.Property(e => e.VariantCardName).HasMaxLength(50);

                entity.HasOne(d => d.RelatedType)
                    .WithMany(p => p.ErpVariantCardRelatedTypes)
                    .HasForeignKey(d => d.RelatedTypeId)
                    .HasConstraintName("FK_VariantCard_VariantType_DBOnly");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ErpVariantCardTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_VariantCard_VariantType");
            });

            modelBuilder.Entity<ErpVariantItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_VariantItem");

                entity.ToTable("Erp_VariantItem");

                entity.HasIndex(e => e.CardId, "Erp_VariantItem_IX0");

                entity.HasIndex(e => new { e.CardId, e.ItemCode }, "Erp_VariantItem_IX1")
                    .IsUnique();

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasMaxLength(25);

                entity.Property(e => e.ItemData).HasMaxLength(15);

                entity.Property(e => e.ItemName).HasMaxLength(50);

                entity.Property(e => e.LibleachingSymbol).HasColumnName("LIBleachingSymbol");

                entity.Property(e => e.LichemicalCleaningSymbol).HasColumnName("LIChemicalCleaningSymbol");

                entity.Property(e => e.LiironingSymbol).HasColumnName("LIIroningSymbol");

                entity.Property(e => e.LinaturalDryingSymbol).HasColumnName("LINaturalDryingSymbol");

                entity.Property(e => e.LitumbleDryingSymbol).HasColumnName("LITumbleDryingSymbol");

                entity.Property(e => e.LiwashingSymbol).HasColumnName("LIWashingSymbol");

                entity.Property(e => e.LiwetCleaningSymbol).HasColumnName("LIWetCleaningSymbol");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Card)
                    .WithMany(p => p.ErpVariantItems)
                    .HasForeignKey(d => d.CardId)
                    .HasConstraintName("FK_VariantItem_VariantCard");

                entity.HasOne(d => d.Related)
                    .WithMany(p => p.InverseRelated)
                    .HasForeignKey(d => d.RelatedId)
                    .HasConstraintName("FK_VariantItem_VariantItem_DBOnly");
            });

            modelBuilder.Entity<ErpVariantType>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_VariantType");

                entity.ToTable("Erp_VariantType");

                entity.HasIndex(e => new { e.CompanyId, e.TypeName }, "Erp_VariantType_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpVariantTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_VariantType_Erp_Company");
            });

            modelBuilder.Entity<ErpVehicle>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_Vehicle");

                entity.HasIndex(e => new { e.CompanyId, e.VehicleCode }, "Erp_Vehicle_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.WarehouseId, "Erp_Vehicle_IX1");

                entity.HasIndex(e => e.ConnectedWarehouseId, "Erp_Vehicle_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_Vehicle_IX3");

                entity.HasIndex(e => e.TransporterId, "Erp_Vehicle_IX4");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.CarInsuranceDate).HasColumnType("datetime");

                entity.Property(e => e.ChassisNo).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Height).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InspectionDate).HasColumnType("datetime");

                entity.Property(e => e.InsuranceDate).HasColumnType("datetime");

                entity.Property(e => e.Length).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Mark).HasMaxLength(100);

                entity.Property(e => e.Model).HasMaxLength(100);

                entity.Property(e => e.MotorNo).HasMaxLength(100);

                entity.Property(e => e.PlateNumber).HasMaxLength(100);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VehicleCode).HasMaxLength(25);

                entity.Property(e => e.VehicleName).HasMaxLength(50);

                entity.Property(e => e.VolumeCapacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WeightCapacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Width).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpVehicles)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_Vehicle_Erp_Company");

                entity.HasOne(d => d.ConnectedWarehouse)
                    .WithMany(p => p.ErpVehicleConnectedWarehouses)
                    .HasForeignKey(d => d.ConnectedWarehouseId)
                    .HasConstraintName("FK_Erp_Vehicle_Erp_Warehouse1");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpVehicles)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_Vehicle_Erp_CurrentAccount");

                entity.HasOne(d => d.Transporter)
                    .WithMany(p => p.ErpVehicles)
                    .HasForeignKey(d => d.TransporterId)
                    .HasConstraintName("FK_Erp_Vehicle_Erp_Transporter");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpVehicleWarehouses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_Vehicle_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpVehicleAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_VehicleAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpVehicleAttachments)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_VehicleAttachment_Erp_Vehicle");
            });

            modelBuilder.Entity<ErpWarehouse>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Warehouse");

                entity.ToTable("Erp_Warehouse");

                entity.HasIndex(e => new { e.CompanyId, e.WarehouseCode }, "Erp_Warehouse_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.McontrolType).HasColumnName("MControlType");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WarehouseCode).HasMaxLength(25);

                entity.Property(e => e.WarehouseName).HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_Warehouse_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Warehouse_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_Warehouse_Meta_District");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_Warehouse_Erp_Warehouse_DBOnly");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_Warehouse_Meta_State");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_Warehouse_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_Warehouse_Meta_Town");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpWarehouses)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_Warehouse_Erp_Workplace");
            });

            modelBuilder.Entity<ErpWarehouseInventoryAttribute>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_WarehouseInventoryAttribute");

                entity.ToTable("Erp_WarehouseInventoryAttribute");

                entity.HasIndex(e => e.WarehouseId, "Erp_WarehouseInventoryAttribute_IX0");

                entity.HasIndex(e => e.AttributeSetId, "Erp_WarehouseInventoryAttribute_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AttributeSet)
                    .WithMany(p => p.ErpWarehouseInventoryAttributes)
                    .HasForeignKey(d => d.AttributeSetId)
                    .HasConstraintName("FK_Erp_WarehouseInventoryAttribute_Erp_InventoryAttributeSet");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpWarehouseInventoryAttributes)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_WarehouseInventoryAttribute_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpWarehouseLocation>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_WarehouseLocation");

                entity.ToTable("Erp_WarehouseLocation");

                entity.HasIndex(e => new { e.WarehouseId, e.LocationCode }, "Erp_WarehouseLocation_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.WarehouseId, "Erp_WarehouseLocation_IX1");

                entity.HasIndex(e => e.InventoryId, "Erp_WarehouseLocation_IX2");

                entity.HasIndex(e => e.DepartmentId, "Erp_WarehouseLocation_IX3");

                entity.HasIndex(e => e.DepartmentId2, "Erp_WarehouseLocation_IX4");

                entity.HasIndex(e => e.InventoryWarehouseId, "Erp_WarehouseLocation_IX5");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.Corridor).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Division).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LocHeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocVolume).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LocationCode).HasMaxLength(25);

                entity.Property(e => e.MaxWeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Shelf).HasMaxLength(25);

                entity.Property(e => e.ShelfCompartment).HasMaxLength(25);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.ErpWarehouseLocationDepartments)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Erp_WarehouseLocation_Erp_Department");

                entity.HasOne(d => d.DepartmentId2Navigation)
                    .WithMany(p => p.ErpWarehouseLocationDepartmentId2Navigations)
                    .HasForeignKey(d => d.DepartmentId2)
                    .HasConstraintName("FK_Erp_WarehouseLocation_Erp_Department2");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWarehouseLocations)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WarehouseLocation_Erp_Inventory");

                entity.HasOne(d => d.InventoryWarehouse)
                    .WithMany(p => p.ErpWarehouseLocationInventoryWarehouses)
                    .HasForeignKey(d => d.InventoryWarehouseId);

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ErpWarehouseLocationWarehouses)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Erp_WarehouseLocation_Erp_Warehouse");
            });

            modelBuilder.Entity<ErpWarehouseLocationTotal>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_WarehouseLocationTotal");

                entity.ToTable("Erp_WarehouseLocationTotal");

                entity.HasIndex(e => e.WarehouseLocationId, "Erp_WarehouseLocationTotal_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_WarehouseLocationTotal_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_WarehouseLocationTotal_IX2");

                entity.Property(e => e.PlannedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWarehouseLocationTotals)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WarehouseLocationTotal_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpWarehouseLocationTotals)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_WarehouseLocationTotal_Erp_InventoryVariant");

                entity.HasOne(d => d.WarehouseLocation)
                    .WithMany(p => p.ErpWarehouseLocationTotals)
                    .HasForeignKey(d => d.WarehouseLocationId)
                    .HasConstraintName("FK_Erp_WarehouseLocationTotal_Erp_WarehouseLocation");
            });

            modelBuilder.Entity<ErpWorkFlowCard>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkFlowCard");

                entity.HasIndex(e => new { e.CompanyId, e.CardCode }, "Erp_WorkFlowCard_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.NextWorkFlowCardId, "Erp_WorkFlowCard_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.Boname)
                    .HasMaxLength(50)
                    .HasColumnName("BOName");

                entity.Property(e => e.CardCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FormFieldName).HasMaxLength(1000);

                entity.Property(e => e.FormFormDef).HasMaxLength(1000);

                entity.Property(e => e.FormName).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpWorkFlowCards)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_WorkFlowCard_Erp_Company");

                entity.HasOne(d => d.NextWorkFlowCard)
                    .WithMany(p => p.InverseNextWorkFlowCard)
                    .HasForeignKey(d => d.NextWorkFlowCardId)
                    .HasConstraintName("FK_Erp_WorkFlowCard_Erp_WorkFlowCard");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.ErpWorkFlowCards)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Erp_WorkFlowCard_Hrm_Position");
            });

            modelBuilder.Entity<ErpWorkFlowCardItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkFlowCardItem");

                entity.HasIndex(e => e.WorkFlowCardId, "Erp_WorkFlowCardItem_IX0");

                entity.HasIndex(e => e.WorkFlowRoleId, "Erp_WorkFlowCardItem_IX1");

                entity.HasIndex(e => e.WorkFlowRoleUserId, "Erp_WorkFlowCardItem_IX2");

                entity.HasIndex(e => e.StartExpirationMsgId, "Erp_WorkFlowCardItem_IX3");

                entity.HasIndex(e => e.CompletionExpirationMsgId, "Erp_WorkFlowCardItem_IX4");

                entity.HasIndex(e => e.OnStartMsgId, "Erp_WorkFlowCardItem_IX5");

                entity.HasIndex(e => e.OnSuccessMsgId, "Erp_WorkFlowCardItem_IX6");

                entity.HasIndex(e => e.OnFailureMsgId, "Erp_WorkFlowCardItem_IX7");

                entity.Property(e => e.Boname)
                    .HasMaxLength(50)
                    .HasColumnName("BOName");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemTableName).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CompletionExpirationMsg)
                    .WithMany(p => p.ErpWorkFlowCardItemCompletionExpirationMsgs)
                    .HasForeignKey(d => d.CompletionExpirationMsgId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Erp_WorkFlowMsgAddress1");

                entity.HasOne(d => d.OnFailureMsg)
                    .WithMany(p => p.ErpWorkFlowCardItemOnFailureMsgs)
                    .HasForeignKey(d => d.OnFailureMsgId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Erp_WorkFlowMsgAddress4");

                entity.HasOne(d => d.OnStartMsg)
                    .WithMany(p => p.ErpWorkFlowCardItemOnStartMsgs)
                    .HasForeignKey(d => d.OnStartMsgId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Erp_WorkFlowMsgAddress2");

                entity.HasOne(d => d.OnSuccessMsg)
                    .WithMany(p => p.ErpWorkFlowCardItemOnSuccessMsgs)
                    .HasForeignKey(d => d.OnSuccessMsgId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Erp_WorkFlowMsgAddress3");

                entity.HasOne(d => d.StartExpirationMsg)
                    .WithMany(p => p.ErpWorkFlowCardItemStartExpirationMsgs)
                    .HasForeignKey(d => d.StartExpirationMsgId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Erp_WorkFlowMsgAddress");

                entity.HasOne(d => d.WorkFlowCard)
                    .WithMany(p => p.ErpWorkFlowCardItems)
                    .HasForeignKey(d => d.WorkFlowCardId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Erp_WorkFlowCard");

                entity.HasOne(d => d.WorkFlowRoleUser)
                    .WithMany(p => p.ErpWorkFlowCardItems)
                    .HasForeignKey(d => d.WorkFlowRoleUserId)
                    .HasConstraintName("FK_Erp_WorkFlowCardItem_Meta_User");
            });

            modelBuilder.Entity<ErpWorkFlowMsgAddress>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkFlowMsgAddress");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MsgAddress).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpWorkFlowMsgAddresses)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_WorkFlowMsgAddress_Erp_Company");
            });

            modelBuilder.Entity<ErpWorkOrder>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_WorkOrder");

                entity.ToTable("Erp_WorkOrder");

                entity.HasIndex(e => e.AsserviceInvoiceId, "Erp_WorkOrderASServiceInvoice_Index");

                entity.HasIndex(e => e.OwnerId, "Erp_WorkOrderMachineOwner_Index");

                entity.HasIndex(e => e.SerialCardId, "Erp_WorkOrderSerialCard_Index");

                entity.HasIndex(e => new { e.CompanyId, e.WorkOrderType, e.WorkOrderNo }, "Erp_WorkOrder_IX0")
                    .IsUnique();

                entity.HasIndex(e => e.CostCenterId, "Erp_WorkOrder_IX1");

                entity.HasIndex(e => e.ServiceCardUnitId, "Erp_WorkOrder_IX10");

                entity.HasIndex(e => e.CustomerTransactionId, "Erp_WorkOrder_IX11");

                entity.HasIndex(e => e.RecipeId, "Erp_WorkOrder_IX12");

                entity.HasIndex(e => e.RouteId, "Erp_WorkOrder_IX13");

                entity.HasIndex(e => e.ParentId, "Erp_WorkOrder_IX14");

                entity.HasIndex(e => e.RouteItemId, "Erp_WorkOrder_IX15");

                entity.HasIndex(e => e.ProcessId, "Erp_WorkOrder_IX16");

                entity.HasIndex(e => e.GlreceiptId, "Erp_WorkOrder_IX17");

                entity.HasIndex(e => new { e.CompanyId, e.WorkOrderType, e.WorkOrderSubType }, "Erp_WorkOrder_IX18");

                entity.HasIndex(e => new { e.RecipeCombineWorkOrderNo, e.RecId }, "Erp_WorkOrder_IX19");

                entity.HasIndex(e => e.ProjectId, "Erp_WorkOrder_IX2");

                entity.HasIndex(e => e.ParentId2, "Erp_WorkOrder_IX20");

                entity.HasIndex(e => e.EmployeeId, "Erp_WorkOrder_IX3");

                entity.HasIndex(e => e.VehicleId, "Erp_WorkOrder_IX4");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_WorkOrder_IX5");

                entity.HasIndex(e => e.OrderItemId, "Erp_WorkOrder_IX6");

                entity.HasIndex(e => e.InventoryId, "Erp_WorkOrder_IX7");

                entity.HasIndex(e => e.InventoryUnitId, "Erp_WorkOrder_IX8");

                entity.HasIndex(e => e.ServiceCardId, "Erp_WorkOrder_IX9");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AdditionalQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Agent).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.AsserviceControl1).HasColumnName("ASServiceControl1");

                entity.Property(e => e.AsserviceControl2).HasColumnName("ASServiceControl2");

                entity.Property(e => e.AsserviceControl3).HasColumnName("ASServiceControl3");

                entity.Property(e => e.AsserviceInvoiceId).HasColumnName("ASServiceInvoiceId");

                entity.Property(e => e.AsserviceIssueCode)
                    .HasMaxLength(100)
                    .HasColumnName("ASServiceIssueCode");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.Capacity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ChassisSerialNo).HasMaxLength(100);

                entity.Property(e => e.CheckDescription).HasMaxLength(1000);

                entity.Property(e => e.ClosedAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedExplanation).HasMaxLength(1000);

                entity.Property(e => e.CommissionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CommissionRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Country).HasMaxLength(100);

                entity.Property(e => e.Ctext).HasColumnName("CText");

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.CuttingExtra).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CuttingUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.EmergencyTermDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Expense).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Factory).HasMaxLength(15);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterimChassisSerialNo).HasMaxLength(100);

                entity.Property(e => e.LeftoverGoodsPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.LockedAt).HasColumnType("datetime");

                entity.Property(e => e.MachineWorkingHour).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MaintenanceDescription).HasMaxLength(1000);

                entity.Property(e => e.MalfunctionDescription).HasMaxLength(1000);

                entity.Property(e => e.OverheadCostAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OverheadCostForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OverheadCostRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackingDate).HasColumnType("datetime");

                entity.Property(e => e.PackingExplanation).HasMaxLength(100);

                entity.Property(e => e.PackingQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackingType).HasMaxLength(100);

                entity.Property(e => e.PatternRecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Phone).HasMaxLength(100);

                entity.Property(e => e.PlanDate).HasColumnType("datetime");

                entity.Property(e => e.ProxyNo).HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QuantityPerLot).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeCombineWorkOrderNo).HasMaxLength(25);

                entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReducedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RepairAt).HasColumnType("datetime");

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SpecialCode1).HasMaxLength(25);

                entity.Property(e => e.SpecialCode2).HasMaxLength(25);

                entity.Property(e => e.Stext).HasColumnName("SText");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalDistance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalDuration).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.V1).HasMaxLength(15);

                entity.Property(e => e.V2).HasMaxLength(15);

                entity.Property(e => e.V3).HasMaxLength(15);

                entity.Property(e => e.V4).HasMaxLength(15);

                entity.Property(e => e.V5).HasMaxLength(15);

                entity.Property(e => e.V6).HasMaxLength(15);

                entity.Property(e => e.V7).HasMaxLength(15);

                entity.Property(e => e.V8).HasMaxLength(15);

                entity.Property(e => e.WorkOrderDate).HasColumnType("datetime");

                entity.Property(e => e.WorkOrderNo).HasMaxLength(25);

                entity.Property(e => e.WorkOrderTime).HasColumnType("datetime");

                entity.HasOne(d => d.AsserviceInvoice)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.AsserviceInvoiceId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Invoice");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_WorkOrder_Meta_City");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Company");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_CostCenter");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_WorkOrder_Meta_Country");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpWorkOrderCurrentAccounts)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_CurrentAccount");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ErpWorkOrderCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_CurrentAccount2");

                entity.HasOne(d => d.CustomerTransaction)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.CustomerTransactionId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_CustomerTransaction");

                entity.HasOne(d => d.DespatchContact)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.DespatchContactId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_DespatchContact");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_WorkOrder_Meta_District");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_WorkOrder_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_GLReceipt");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Inventory");

                entity.HasOne(d => d.InventoryUnit)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.InventoryUnitId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_InventoryUnitItemSize");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpWorkOrderLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_LabRecipe");

                entity.HasOne(d => d.ManufacturingType)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ManufacturingTypeId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_ManufacturingType");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.OrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_OrderReceiptItem");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_MachineOwner");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_WorkOrder_DBOnly");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpWorkOrderPatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_LabRecipe2");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Project");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Recipe");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Resource");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Route");

                entity.HasOne(d => d.RouteItem)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.RouteItemId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_RouteItem");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_InventorySerialCard");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Service");

                entity.HasOne(d => d.ServiceCardUnit)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.ServiceCardUnitId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_ServiceUnitItemSize");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_WorkOrder_Meta_State");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Vehicle");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.ErpWorkOrders)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Erp_WorkOrder_Erp_Workplace");
            });

            modelBuilder.Entity<ErpWorkOrderAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderAttachment");

                entity.HasIndex(e => e.WorkOrderId, "Erp_WorkOrderAttachment_IX0");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_WorkOrderAttachment_IX1");

                entity.HasIndex(e => new { e.WorkOrderId, e.Type }, "Erp_WorkOrderAttachment_IX2");

                entity.HasIndex(e => new { e.WorkOrderItemId, e.Type }, "Erp_WorkOrderAttachment_IX3");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderAttachments)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderAttachment_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderAttachments)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderAttachment_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpWorkOrderCostDistribution>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderCostDistribution");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CostDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderCostDistributions)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderCostDistribution_Erp_Inventory");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderCostDistributions)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderCostDistribution_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpWorkOrderExplanation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderExplanation");

                entity.HasIndex(e => e.WorkOrderId, "Erp_WorkOrderExplanation_IX0");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_WorkOrderExplanation_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExplanationDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpWorkOrderExplanations)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderExplanation_Erp_Process");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpWorkOrderExplanations)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_WorkOrderExplanation_Erp_Resource");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderExplanations)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderExplanation_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderExplanations)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderExplanation_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpWorkOrderItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_WorkOrderItem");

                entity.ToTable("Erp_WorkOrderItem");

                entity.HasIndex(e => e.WorkOrderId, "Erp_WorkOrderItem_IX0");

                entity.HasIndex(e => e.OrderItemId, "Erp_WorkOrderItem_IX1");

                entity.HasIndex(e => e.RouteItemId, "Erp_WorkOrderItem_IX10");

                entity.HasIndex(e => e.GlreceiptId, "Erp_WorkOrderItem_IX11");

                entity.HasIndex(e => e.ParentItemId, "Erp_WorkOrderItem_IX12");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_WorkOrderItem_IX13");

                entity.HasIndex(e => e.InventoryId, "Erp_WorkOrderItem_IX2");

                entity.HasIndex(e => e.ServiceCardId, "Erp_WorkOrderItem_IX3");

                entity.HasIndex(e => e.ProjectId, "Erp_WorkOrderItem_IX4");

                entity.HasIndex(e => e.InventoryUnitId, "Erp_WorkOrderItem_IX5");

                entity.HasIndex(e => e.ServiceCardUnitId, "Erp_WorkOrderItem_IX6");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_WorkOrderItem_IX7");

                entity.HasIndex(e => e.RouteId, "Erp_WorkOrderItem_IX8");

                entity.HasIndex(e => e.ProcessId, "Erp_WorkOrderItem_IX9");

                entity.Property(e => e.ActualArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.ActualDepartureDate).HasColumnType("datetime");

                entity.Property(e => e.AdditionalQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedAt).HasColumnType("datetime");

                entity.Property(e => e.ClosedExplanation).HasMaxLength(1000);

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepartureDate).HasColumnType("datetime");

                entity.Property(e => e.Distance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Duration).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FabricTermDate).HasColumnType("datetime");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GlreceiptId).HasColumnName("GLReceiptId");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryVariantIds).HasMaxLength(1000);

                entity.Property(e => e.OperationCode).HasMaxLength(25);

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PlannedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProxyNo).HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReducedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SecondQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShippedGrossQty).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShippedNetQty).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WastageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Weight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WeightMt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Width).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Meta_Forex");

                entity.HasOne(d => d.Glreceipt)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.GlreceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_GLReceipt");

                entity.HasOne(d => d.InitialCost)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.InitialCostId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_InitialCost");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Inventory");

                entity.HasOne(d => d.InventoryUnit)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.InventoryUnitId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_InventoryUnitItemSize");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_InventoryVariant");

                entity.HasOne(d => d.LabRecipe)
                    .WithMany(p => p.ErpWorkOrderItemLabRecipes)
                    .HasForeignKey(d => d.LabRecipeId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_LabRecipe");

                entity.HasOne(d => d.OrderItem)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.OrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_OrderReceiptItem");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_WorkOrderItem");

                entity.HasOne(d => d.PatternRecipe)
                    .WithMany(p => p.ErpWorkOrderItemPatternRecipes)
                    .HasForeignKey(d => d.PatternRecipeId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_LabRecipe2");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Process");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Project");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Recipe");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Resource");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Route");

                entity.HasOne(d => d.RouteItem)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.RouteItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_RouteItem");

                entity.HasOne(d => d.ServiceCard)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.ServiceCardId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_Service");

                entity.HasOne(d => d.ServiceCardUnit)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.ServiceCardUnitId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_ServiceUnitItemSize");

                entity.HasOne(d => d.V1Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV1Navigations)
                    .HasForeignKey(d => d.V1)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem1");

                entity.HasOne(d => d.V2Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV2Navigations)
                    .HasForeignKey(d => d.V2)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem2");

                entity.HasOne(d => d.V3Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV3Navigations)
                    .HasForeignKey(d => d.V3)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem3");

                entity.HasOne(d => d.V4Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV4Navigations)
                    .HasForeignKey(d => d.V4)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem4");

                entity.HasOne(d => d.V5Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV5Navigations)
                    .HasForeignKey(d => d.V5)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem5");

                entity.HasOne(d => d.V6Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV6Navigations)
                    .HasForeignKey(d => d.V6)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem6");

                entity.HasOne(d => d.V7Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV7Navigations)
                    .HasForeignKey(d => d.V7)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem7");

                entity.HasOne(d => d.V8Navigation)
                    .WithMany(p => p.ErpWorkOrderItemV8Navigations)
                    .HasForeignKey(d => d.V8)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem8");

                entity.HasOne(d => d.Variant1)
                    .WithMany(p => p.ErpWorkOrderItemVariant1s)
                    .HasForeignKey(d => d.Variant1Id)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem11");

                entity.HasOne(d => d.Variant2)
                    .WithMany(p => p.ErpWorkOrderItemVariant2s)
                    .HasForeignKey(d => d.Variant2Id)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem12");

                entity.HasOne(d => d.Variant3)
                    .WithMany(p => p.ErpWorkOrderItemVariant3s)
                    .HasForeignKey(d => d.Variant3Id)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem13");

                entity.HasOne(d => d.Variant4)
                    .WithMany(p => p.ErpWorkOrderItemVariant4s)
                    .HasForeignKey(d => d.Variant4Id)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem14");

                entity.HasOne(d => d.Variant5)
                    .WithMany(p => p.ErpWorkOrderItemVariant5s)
                    .HasForeignKey(d => d.Variant5Id)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_VariantItem15");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderItem_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpWorkOrderItemProcess>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderItemProcess");

                entity.HasIndex(e => new { e.WorkOrderId, e.WorkOrderItemId }, "Erp_WorkOrderItemProcess_IX0");

                entity.HasIndex(e => new { e.WorkOrderId, e.WorkOrderItemId, e.ParentProcessId }, "Erp_WorkOrderItemProcess_IX1");

                entity.HasIndex(e => new { e.WorkOrderId, e.WorkOrderItemId, e.ProcessId }, "Erp_WorkOrderItemProcess_IX2");

                entity.HasIndex(e => new { e.WorkOrderId, e.WorkOrderItemId, e.CurrentAccountId }, "Erp_WorkOrderItemProcess_IX3");

                entity.HasIndex(e => new { e.WorkOrderItemId, e.ProcessId }, "Erp_WorkOrderItemProcess_IX4");

                entity.HasIndex(e => new { e.WorkOrderItemId, e.ProcessId, e.ItemType }, "Erp_WorkOrderItemProcess_IX5");

                entity.HasIndex(e => new { e.ProcessId, e.ItemType, e.RepairCount }, "Erp_WorkOrderItemProcess_IX6");

                entity.HasIndex(e => e.ProcessId, "Erp_WorkOrderItemProcess_IX7");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LotQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_CurrentAccount");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Meta_Forex");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_Inventory");

                entity.HasOne(d => d.ParentProcess)
                    .WithMany(p => p.ErpWorkOrderItemProcessParentProcesses)
                    .HasForeignKey(d => d.ParentProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_Process");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpWorkOrderItemProcessProcesses)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_Process1");

                entity.HasOne(d => d.RecipeProgram)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.RecipeProgramId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_RecipeProgram");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_Resource");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderItemProcesses)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItemProcess_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpWorkOrderItemReceipt>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderItemReceipt");

                entity.HasIndex(e => e.WorkOrderReceiptItemId, "Erp_WorkOrderItemReceipt_IX0");

                entity.HasIndex(e => e.InventoryReceiptItemId, "Erp_WorkOrderItemReceipt_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.InventoryReceiptItem)
                    .WithMany(p => p.ErpWorkOrderItemReceipts)
                    .HasForeignKey(d => d.InventoryReceiptItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItemReceipt_Erp_InventoryReceiptItem");

                entity.HasOne(d => d.WorkOrderReceiptItem)
                    .WithMany(p => p.ErpWorkOrderItemReceipts)
                    .HasForeignKey(d => d.WorkOrderReceiptItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItemReceipt_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpWorkOrderItemRecipe>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderItemRecipe");

                entity.HasIndex(e => e.RecipeId, "Erp_WorkOrderItemRecipe_IX0");

                entity.HasIndex(e => e.OwnerInventoryId, "Erp_WorkOrderItemRecipe_IX1");

                entity.HasIndex(e => e.OwnerServiceId, "Erp_WorkOrderItemRecipe_IX2");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_WorkOrderItemRecipe_IX3");

                entity.HasIndex(e => e.InventoryId, "Erp_WorkOrderItemRecipe_IX4");

                entity.HasIndex(e => e.UnitId, "Erp_WorkOrderItemRecipe_IX5");

                entity.HasIndex(e => e.OutWarehouseId, "Erp_WorkOrderItemRecipe_IX6");

                entity.HasIndex(e => e.ExpenseId, "Erp_WorkOrderItemRecipe_IX7");

                entity.HasIndex(e => e.ProcessId, "Erp_WorkOrderItemRecipe_IX8");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DilutionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DyeSolutions).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MatrixDefinition).HasMaxLength(25);

                entity.Property(e => e.MinimumLevel).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProgramGraphics).HasColumnType("image");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RecipeRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SpecialLiquor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Variant1).HasMaxLength(25);

                entity.Property(e => e.Variant2).HasMaxLength(25);

                entity.Property(e => e.Wastage).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.WeighingQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WetPickRate).HasColumnType("decimal(11, 8)");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_CurrentAccount");

                entity.HasOne(d => d.Expense)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.ExpenseId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_Expense");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Meta_Forex");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_InventoryVariant");

                entity.HasOne(d => d.OutWarehouse)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.OutWarehouseId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_Warehouse");

                entity.HasOne(d => d.OwnerInventory)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.OwnerInventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_Inventory1");

                entity.HasOne(d => d.OwnerService)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.OwnerServiceId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_Service");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_WorkOrderItemRecipe");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_Process");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_Recipe");

                entity.HasOne(d => d.RecipeProgram)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.RecipeProgramId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_RecipeProgram");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_InventoryUnitItemSize_DBOnly");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_WorkOrderItem");

                entity.HasOne(d => d.WorkOrderReceipt)
                    .WithMany(p => p.ErpWorkOrderItemRecipes)
                    .HasForeignKey(d => d.WorkOrderReceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderItemRecipe_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpWorkOrderItemVariant>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderItemVariant");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_WorkOrderItemVariant_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_WorkOrderItemVariant_IX1");

                entity.HasIndex(e => e.InventoryVariantId, "Erp_WorkOrderItemVariant_IX2");

                entity.HasIndex(e => e.OrderReceiptItemVariantId, "Erp_WorkOrderItemVariant_IX3");

                entity.Property(e => e.AdditionalQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReducedQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShippedQty).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderItemVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderItemVariant_Erp_Inventory");

                entity.HasOne(d => d.InventoryVariant)
                    .WithMany(p => p.ErpWorkOrderItemVariants)
                    .HasForeignKey(d => d.InventoryVariantId)
                    .HasConstraintName("FK_Erp_WorkOrderItemVariant_Erp_InventoryVariant");

                entity.HasOne(d => d.OrderReceiptItemVariant)
                    .WithMany(p => p.ErpWorkOrderItemVariants)
                    .HasForeignKey(d => d.OrderReceiptItemVariantId)
                    .HasConstraintName("FK_Erp_WorkOrderItemVariant_Erp_OrderReceiptItemVariant");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderItemVariants)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderItemVariant_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpWorkOrderProduction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderProduction");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_WorkOrderProduction_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_WorkOrderProduction_IX1");

                entity.HasIndex(e => e.RouteItemId, "Erp_WorkOrderProduction_IX10");

                entity.HasIndex(e => new { e.WorkOrderItemId, e.ProductionType, e.ProcessId, e.InOut }, "Erp_WorkOrderProduction_IX11");

                entity.HasIndex(e => e.WorkOrderItemProcessId, "Erp_WorkOrderProduction_IX12");

                entity.HasIndex(e => new { e.WorkOrderItemId, e.WorkOrderItemProcessId }, "Erp_WorkOrderProduction_IX13");

                entity.HasIndex(e => e.InventoryAllocationId, "Erp_WorkOrderProduction_IX14");

                entity.HasIndex(e => e.InventoryReceiptId, "Erp_WorkOrderProduction_IX15");

                entity.HasIndex(e => e.ProcessId, "Erp_WorkOrderProduction_IX2");

                entity.HasIndex(e => e.ManufactureReceiptId, "Erp_WorkOrderProduction_IX3");

                entity.HasIndex(e => e.ConsumptionReceiptId, "Erp_WorkOrderProduction_IX4");

                entity.HasIndex(e => e.WasteReceiptId, "Erp_WorkOrderProduction_IX5");

                entity.HasIndex(e => e.StartEmployeeId, "Erp_WorkOrderProduction_IX7");

                entity.HasIndex(e => e.EmployeeId, "Erp_WorkOrderProduction_IX8");

                entity.HasIndex(e => e.ResourceId, "Erp_WorkOrderProduction_IX9");

                entity.Property(e => e.Cadoperator)
                    .HasMaxLength(50)
                    .HasColumnName("CADoperator");

                entity.Property(e => e.Clipping).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Cutter).HasMaxLength(50);

                entity.Property(e => e.CuttingLoss).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.EndOfAroll)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("EndOfARoll");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.FabricCode).HasMaxLength(50);

                entity.Property(e => e.FabricGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.FabricType).HasMaxLength(50);

                entity.Property(e => e.FabricWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Increase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MarkerGrams).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerNo).HasMaxLength(25);

                entity.Property(e => e.MarkerWeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MarkerWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NumberOfPlies).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PartiNo).HasMaxLength(25);

                entity.Property(e => e.ProductionDate).HasColumnType("datetime");

                entity.Property(e => e.ProductionTime).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReturnGrams).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SentForCutting).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Spreader).HasMaxLength(50);

                entity.Property(e => e.StartFabricGram).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartFabricWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartPackageQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartProductionDate).HasColumnType("datetime");

                entity.Property(e => e.StartProductionTime).HasColumnType("datetime");

                entity.Property(e => e.StartQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalMarker).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Variant1).HasMaxLength(25);

                entity.Property(e => e.Variant2).HasMaxLength(25);

                entity.Property(e => e.VatRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.WeightInGrams).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WeightM2).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Address");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Box");

                entity.HasOne(d => d.ConsumptionReceipt)
                    .WithMany(p => p.ErpWorkOrderProductionConsumptionReceipts)
                    .HasForeignKey(d => d.ConsumptionReceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_InventoryReceipt1");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_CurrentAccount");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpWorkOrderProductionEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Employee1");

                entity.HasOne(d => d.Fabric)
                    .WithMany(p => p.ErpWorkOrderProductionFabrics)
                    .HasForeignKey(d => d.FabricId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Inventory2");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Meta_Forex");

                entity.HasOne(d => d.InventoryAllocation)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.InventoryAllocationId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_InventoryAllocation");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderProductionInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Inventory");

                entity.HasOne(d => d.InventoryReceipt)
                    .WithMany(p => p.ErpWorkOrderProductionInventoryReceipts)
                    .HasForeignKey(d => d.InventoryReceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_InventoryReceipt3");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Invoice");

                entity.HasOne(d => d.ManufactureReceipt)
                    .WithMany(p => p.ErpWorkOrderProductionManufactureReceipts)
                    .HasForeignKey(d => d.ManufactureReceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_InventoryReceipt");

                entity.HasOne(d => d.OtherEmployee)
                    .WithMany(p => p.ErpWorkOrderProductionOtherEmployees)
                    .HasForeignKey(d => d.OtherEmployeeId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Employee2");

                entity.HasOne(d => d.ParentProduction)
                    .WithMany(p => p.InverseParentProduction)
                    .HasForeignKey(d => d.ParentProductionId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_WorkOrderProduction");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Process");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Resource");

                entity.HasOne(d => d.RouteItem)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.RouteItemId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_RouteItem");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_InventorySerialCard");

                entity.HasOne(d => d.StartEmployee)
                    .WithMany(p => p.ErpWorkOrderProductionStartEmployees)
                    .HasForeignKey(d => d.StartEmployeeId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_Employee");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Meta_UnitSetItem");

                entity.HasOne(d => d.Variant1Navigation)
                    .WithMany(p => p.ErpWorkOrderProductionVariant1Navigations)
                    .HasForeignKey(d => d.Variant1Id)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_VariantItem1");

                entity.HasOne(d => d.Variant2Navigation)
                    .WithMany(p => p.ErpWorkOrderProductionVariant2Navigations)
                    .HasForeignKey(d => d.Variant2Id)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_VariantItem2");

                entity.HasOne(d => d.WasteReceipt)
                    .WithMany(p => p.ErpWorkOrderProductionWasteReceipts)
                    .HasForeignKey(d => d.WasteReceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_InventoryReceipt2");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_WorkOrderItem");

                entity.HasOne(d => d.WorkOrderItemProcess)
                    .WithMany(p => p.ErpWorkOrderProductions)
                    .HasForeignKey(d => d.WorkOrderItemProcessId)
                    .HasConstraintName("FK_Erp_WorkOrderProduction_Erp_WorkOrderItemProcess");
            });

            modelBuilder.Entity<ErpWorkOrderProductionAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderProductionAttachment");

                entity.HasIndex(e => e.WorkOrderId, "Erp_WorkOrderProductionAttachment_IX0");

                entity.HasIndex(e => e.WorkOrderItemId, "Erp_WorkOrderProductionAttachment_IX1");

                entity.HasIndex(e => e.CurrentAccountId, "Erp_WorkOrderProductionAttachment_IX2");

                entity.HasIndex(e => e.ProcessId, "Erp_WorkOrderProductionAttachment_IX3");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.ErpWorkOrderProductionAttachments)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionAttachment_Erp_CurrentAccount");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderProductionAttachments)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionAttachment_Erp_WorkOrder");

                entity.HasOne(d => d.WorkOrderItem)
                    .WithMany(p => p.ErpWorkOrderProductionAttachments)
                    .HasForeignKey(d => d.WorkOrderItemId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionAttachment_Erp_WorkOrderItem");
            });

            modelBuilder.Entity<ErpWorkOrderProductionEmployee>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderProductionEmployee");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ErpWorkOrderProductionEmployeesNavigation)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionEmployee_Erp_Employee");

                entity.HasOne(d => d.WorkOrderProduction)
                    .WithMany(p => p.ErpWorkOrderProductionEmployees)
                    .HasForeignKey(d => d.WorkOrderProductionId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionEmployee_Erp_WorkOrderProduction");
            });

            modelBuilder.Entity<ErpWorkOrderProductionItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderProductionItem");

                entity.HasIndex(e => e.WorkOrderProductionId, "Erp_InventorySerialTransaction_IX0");

                entity.HasIndex(e => new { e.WorkOrderProductionId, e.SerialCardId }, "Erp_InventorySerialTransaction_IX1");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.CancelledAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpWorkOrderProductionItems)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_WorkOrderProductionItem_Erp_InventorySerialCard");

                entity.HasOne(d => d.WorkOrderProduction)
                    .WithMany(p => p.ErpWorkOrderProductionItems)
                    .HasForeignKey(d => d.WorkOrderProductionId)
                    .HasConstraintName("FK_WorkOrderProductionItem_Erp_WorkOrderProduction");
            });

            modelBuilder.Entity<ErpWorkOrderProductionVariant>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderProductionVariant");

                entity.HasIndex(e => e.WorkOrderProductionId, "Erp_WorkOrderProductionVariant_IX0");

                entity.HasIndex(e => e.InventoryId, "Erp_WorkOrderProductionVariant_IX1");

                entity.HasIndex(e => e.WorkOrderItemVariantId, "Erp_WorkOrderProductionVariant_IX2");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderProductionVariants)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionVariant_Erp_Inventory");

                entity.HasOne(d => d.WorkOrderItemVariant)
                    .WithMany(p => p.ErpWorkOrderProductionVariants)
                    .HasForeignKey(d => d.WorkOrderItemVariantId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionVariant_Erp_WorkOrderItemVariant_DBOnly");

                entity.HasOne(d => d.WorkOrderProduction)
                    .WithMany(p => p.ErpWorkOrderProductionVariants)
                    .HasForeignKey(d => d.WorkOrderProductionId)
                    .HasConstraintName("FK_Erp_WorkOrderProductionVariant_Erp_WorkOrderProduction");
            });

            modelBuilder.Entity<ErpWorkOrderProgress>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Erp_WorkOrderProgress");

                entity.HasIndex(e => e.WorkOrderId, "Erp_WorkOrderProgress_IX0");

                entity.HasIndex(e => e.AsserviceFaultyId, "Erp_WorkOrderProgress_IX1");

                entity.HasIndex(e => e.SerialCardId, "Erp_WorkOrderProgress_IX2");

                entity.HasIndex(e => e.AsserviceFaultyKindGroupId, "Erp_WorkOrderProgress_IX5");

                entity.HasIndex(e => e.AsserviceFaultyKindId, "Erp_WorkOrderProgress_IX6");

                entity.HasIndex(e => e.OrderReceiptItemId, "Erp_WorkOrderProgress_IX8");

                entity.Property(e => e.ActualValue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedExplanation).HasMaxLength(4000);

                entity.Property(e => e.AsserviceFaultyId).HasColumnName("ASServiceFaultyId");

                entity.Property(e => e.AsserviceFaultyKindGroupId).HasColumnName("ASServiceFaultyKindGroupId");

                entity.Property(e => e.AsserviceFaultyKindId).HasColumnName("ASServiceFaultyKindId");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(4000);

                entity.Property(e => e.ForexAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexUnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InitialValue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.UniqueCode).HasMaxLength(100);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AsserviceFaulty)
                    .WithMany(p => p.ErpWorkOrderProgressAsserviceFaulties)
                    .HasForeignKey(d => d.AsserviceFaultyId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_ASServiceFaulty");

                entity.HasOne(d => d.AsserviceFaultyKindGroup)
                    .WithMany(p => p.ErpWorkOrderProgressAsserviceFaultyKindGroups)
                    .HasForeignKey(d => d.AsserviceFaultyKindGroupId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_ASServiceFaultyKindGroup");

                entity.HasOne(d => d.AsserviceFaultyKind)
                    .WithMany(p => p.ErpWorkOrderProgressAsserviceFaultyKinds)
                    .HasForeignKey(d => d.AsserviceFaultyKindId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_ASServiceFaultyKind");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.ErpWorkOrderProgresses)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_Inventory");

                entity.HasOne(d => d.OrderReceipt)
                    .WithMany(p => p.ErpWorkOrderProgresses)
                    .HasForeignKey(d => d.OrderReceiptId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_OrderReceipt");

                entity.HasOne(d => d.OrderReceiptItem)
                    .WithMany(p => p.ErpWorkOrderProgresses)
                    .HasForeignKey(d => d.OrderReceiptItemId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_OrderReceiptItem");

                entity.HasOne(d => d.SerialCard)
                    .WithMany(p => p.ErpWorkOrderProgresses)
                    .HasForeignKey(d => d.SerialCardId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_InventorySerialCard");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ErpWorkOrderProgresses)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Erp_WorkOrderProgress_Erp_WorkOrder");
            });

            modelBuilder.Entity<ErpWorkplace>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_CompanyWorkplace");

                entity.ToTable("Erp_Workplace");

                entity.HasIndex(e => new { e.CompanyId, e.WorkplaceCode }, "Erp_Workplace_IX0")
                    .IsUnique();

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.ApartmentNo).HasMaxLength(15);

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.Avenue).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DoorNo).HasMaxLength(15);

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MersisNo).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(15);

                entity.Property(e => e.Street).HasMaxLength(50);

                entity.Property(e => e.TimeZone).HasMaxLength(50);

                entity.Property(e => e.TradeRegistrationNo).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Village).HasMaxLength(50);

                entity.Property(e => e.WorkplaceCode).HasMaxLength(25);

                entity.Property(e => e.WorkplaceName).HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ErpWorkplaces)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Erp_Workplace_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ErpWorkplaces)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Erp_Workplace_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ErpWorkplaces)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Erp_Workplace_Meta_District");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ErpWorkplaces)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Erp_Workplace_Meta_State");

                entity.HasOne(d => d.StreetNavigation)
                    .WithMany(p => p.ErpWorkplaces)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Erp_Workplace_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.ErpWorkplaces)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Erp_Workplace_Meta_Town");
            });

            modelBuilder.Entity<HrmAddPaymentDeduction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_AddPaymentDeduction");

                entity.Property(e => e.AddPaymentCode).HasMaxLength(25);

                entity.Property(e => e.DefaultForChecking).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EdeclarationType).HasColumnName("EDeclarationType");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.Formula).HasMaxLength(1000);

                entity.Property(e => e.IncomeTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SsiComPrmRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.SsiPrmRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.StampDueRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmAddPaymentDeductions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_AddPaymentDeduction_Erp_Company");
            });

            modelBuilder.Entity<HrmAdvertisement>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Advertisement");

                entity.Property(e => e.AdvertisementCode).HasMaxLength(25);

                entity.Property(e => e.AdvertisementCompany).HasMaxLength(50);

                entity.Property(e => e.AdvertisementEndDate).HasColumnType("datetime");

                entity.Property(e => e.AdvertisementName).HasMaxLength(50);

                entity.Property(e => e.AdvertisementStartDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.JobDescription).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmAdvertisements)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_Advertisement_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.HrmAdvertisements)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Hrm_Advertisement_Erp_Department");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmAdvertisements)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_Advertisement_Hrm_Position");
            });

            modelBuilder.Entity<HrmApplication>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Application");

                entity.Property(e => e.ApplicationCode).HasMaxLength(25);

                entity.Property(e => e.ApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Advertisement)
                    .WithMany(p => p.HrmApplications)
                    .HasForeignKey(d => d.AdvertisementId)
                    .HasConstraintName("FK_Hrm_Application_Hrm_Advertisement");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmApplications)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_Application_Erp_Company");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmApplications)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_Application_Hrm_CV");
            });

            modelBuilder.Entity<HrmChecking>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Checking");

                entity.HasIndex(e => e.EmployeeId, "Hrm_Checking_IX0");

                entity.Property(e => e.AddAllowanceTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AddDeductionTotal).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ArticleNo).HasMaxLength(50);

                entity.Property(e => e.AutomaticIndPension).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.AutomaticIndPensionBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BirthDebtUsedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CalculatedIncomeTax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CalculatedMlaDeduction).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.CumulativeTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DailyWages).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Deductions).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DisabledExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Discardeds).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EmployeeSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ExecutionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ForexSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.GrossWages).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.HourlyWages).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive14857).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive15510).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive16322).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive1687).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive26322).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive27256).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive2828).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive3294).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive4447).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive5510).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive5763).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive5921).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive6111).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive6486).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive687).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive7252).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Incentive7316).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncentiveIncomeTaxExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncentiveInsComExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncomeTax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncomeTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncomeTaxExcess).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IncomeTaxExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IndPension).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.IndPensionPrvInsurance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MilitaryDebtUsedAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageIncomeTax).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageIncomeTaxBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageIncomeTaxExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageStampBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageStampDue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageStampDueExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinWageStampExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MlaDeduction).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MlaDeductionRate).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MlaDiscardeds).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MlaRoundations).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MlaTotalAdded).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.NetPaid).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.OverTimeEarning).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrevMonExceedings).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrevMonExceedings2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.PrevMonRoundation).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RegularEarning).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Roundations).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShortTimePrmBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShortTimeSsiEmployeePrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ShortTimeUnEmpEmployeePrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiBaseWageDiff)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("SSiBaseWageDiff");

                entity.Property(e => e.SsiCompDifIncentive7252).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiCompanyPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiCompanyPrmBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiDays).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiEmpDifIncentive7252).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiEmployeePrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiEmployeePrmBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.SsiPrmExempt)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("SSiPrmExempt");

                entity.Property(e => e.StampDue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StampDueBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StampDueExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TaxDeduction).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive1).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive10).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive11).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive2).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive3).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive4).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive5).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive6).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive7).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive8).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TemporalIncentive9).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ThisMonExceedings).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnCompIncentive7252).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnEmpCompanyPrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnEmpEmployeePrm).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnEmpEmployeePrmBase).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnEmpIncentive7252).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnEmpInsExempt).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnionDue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnpaidVacDays).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VacationPays).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WorkingDays).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Absence)
                    .WithMany(p => p.HrmCheckings)
                    .HasForeignKey(d => d.AbsenceId)
                    .HasConstraintName("FK_Hrm_Checking_Meta_HrmAbsence");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmCheckings)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_Checking_Erp_Employee");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.HrmCheckings)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_Hrm_Checking_Meta_Forex");
            });

            modelBuilder.Entity<HrmCheckingAdd>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CheckingAdd");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DailyAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GrossAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PaidDay).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AddPayment)
                    .WithMany(p => p.HrmCheckingAdds)
                    .HasForeignKey(d => d.AddPaymentId)
                    .HasConstraintName("FK_Hrm_CheckingAdd_Hrm_AddPaymentDeduction");

                entity.HasOne(d => d.Checking)
                    .WithMany(p => p.HrmCheckingAdds)
                    .HasForeignKey(d => d.CheckingId)
                    .HasConstraintName("FK_Hrm_CheckingAdd_Hrm_Checking");

                entity.HasOne(d => d.ExecutionProceeding)
                    .WithMany(p => p.HrmCheckingAdds)
                    .HasForeignKey(d => d.ExecutionProceedingId)
                    .HasConstraintName("FK_Hrm_CheckingAdd_Hrm_ExecutionProceeding");
            });

            modelBuilder.Entity<HrmCheckingHour>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CheckingHour");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.HourEarning).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Hours).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.NetHourEarning).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Checking)
                    .WithMany(p => p.HrmCheckingHours)
                    .HasForeignKey(d => d.CheckingId)
                    .HasConstraintName("FK_Hrm_CheckingHour_Hrm_Checking");

                entity.HasOne(d => d.HourTypeNavigation)
                    .WithMany(p => p.HrmCheckingHours)
                    .HasForeignKey(d => d.HourTypeId)
                    .HasConstraintName("FK_Hrm_CheckingHour_Hrm_Time");
            });

            modelBuilder.Entity<HrmCv>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CV");

                entity.HasIndex(e => new { e.CompanyId, e.Cvtitle }, "Hrm_CV_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.AssessmentExplanation).HasMaxLength(1000);

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BirthPlace).HasMaxLength(50);

                entity.Property(e => e.CandidatePicture).HasColumnType("image");

                entity.Property(e => e.CriminalRecordExplanation).HasMaxLength(1000);

                entity.Property(e => e.Cvtitle)
                    .HasMaxLength(50)
                    .HasColumnName("CVTitle");

                entity.Property(e => e.DecisionExplanation).HasMaxLength(1000);

                entity.Property(e => e.DeferralDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DemandSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DisabilityExplanation).HasMaxLength(1000);

                entity.Property(e => e.DriverLicenceDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.ExemptExplanation).HasMaxLength(1000);

                entity.Property(e => e.HealthProblemExplanation).HasMaxLength(1000);

                entity.Property(e => e.IdCardNo).HasMaxLength(50);

                entity.Property(e => e.IdCilt).HasMaxLength(50);

                entity.Property(e => e.IdCity).HasMaxLength(50);

                entity.Property(e => e.IdDistrict).HasMaxLength(50);

                entity.Property(e => e.IdFathersName).HasMaxLength(50);

                entity.Property(e => e.IdIssuedDate).HasColumnType("datetime");

                entity.Property(e => e.IdIssuedPlace).HasMaxLength(50);

                entity.Property(e => e.IdKoy).HasMaxLength(50);

                entity.Property(e => e.IdKutuk).HasMaxLength(50);

                entity.Property(e => e.IdMahalle).HasMaxLength(50);

                entity.Property(e => e.IdMothersName).HasMaxLength(50);

                entity.Property(e => e.IdNo).HasMaxLength(50);

                entity.Property(e => e.IdSayfa).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.JobApplicationDate).HasColumnType("datetime");

                entity.Property(e => e.Line1).HasMaxLength(50);

                entity.Property(e => e.Line2).HasMaxLength(50);

                entity.Property(e => e.MobilePhone).HasMaxLength(50);

                entity.Property(e => e.MobilePhone2).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Nationality).HasMaxLength(100);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PossibleStartDate).HasColumnType("datetime");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.PreviousSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ProposedSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Surname).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Hrm_CV_Meta_City");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_CV_Erp_Company");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Hrm_CV_Meta_Country");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Hrm_CV_Erp_Department");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Hrm_CV_Meta_District");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmCvEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_CV_Erp_Employee");

                entity.HasOne(d => d.Placement)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.PlacementId)
                    .HasConstraintName("FK_Hrm_CV_Hrm_Placement");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_CV_Hrm_Position");

                entity.HasOne(d => d.ReferenceEmployee)
                    .WithMany(p => p.HrmCvReferenceEmployees)
                    .HasForeignKey(d => d.ReferenceEmployeeId)
                    .HasConstraintName("FK_Hrm_CV_Erp_Employee2");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Hrm_CV_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Hrm_CV_Meta_Town");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.HrmCvs)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Hrm_CV_Erp_Workplace");
            });

            modelBuilder.Entity<HrmCvability>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVAbility");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvabilities)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVAbility_Hrm_CV");
            });

            modelBuilder.Entity<HrmCvattachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvattachments)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVAttachment_Hrm_CV");
            });

            modelBuilder.Entity<HrmCvcomputerExperience>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVComputerExperience");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExperienceExplanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvcomputerExperiences)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVComputerExperience_Hrm_CV");
            });

            modelBuilder.Entity<HrmCvcourse>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVCourse");

                entity.Property(e => e.CertificateDate).HasColumnType("datetime");

                entity.Property(e => e.CertificateExplanation).HasMaxLength(1000);

                entity.Property(e => e.CertificateName).HasMaxLength(100);

                entity.Property(e => e.CourseInstitution).HasMaxLength(100);

                entity.Property(e => e.CourseName).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvcourses)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVCourse_Hrm_CV");
            });

            modelBuilder.Entity<HrmCveducation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVEducation");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EducationDepartment).HasMaxLength(100);

                entity.Property(e => e.EducationLanguage).HasMaxLength(50);

                entity.Property(e => e.EducationName).HasMaxLength(100);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Grade).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.HrmCveducations)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Hrm_CVEducation_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.HrmCveducations)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Hrm_CVEducation_Meta_Country");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCveducations)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVEducation_Hrm_CV");
            });

            modelBuilder.Entity<HrmCvexperience>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVExperience");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExperienceCompany).HasMaxLength(100);

                entity.Property(e => e.ExperienceExplanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvexperiences)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVExperience_Hrm_CV");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmCvexperiences)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_CVExperience_Hrm_Position");
            });

            modelBuilder.Entity<HrmCvforeignLanguage>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVForeignLanguage");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.ExamDate).HasColumnType("datetime");

                entity.Property(e => e.ExamName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LearningPlace).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvforeignLanguages)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVForeignLanguage_Hrm_CV");
            });

            modelBuilder.Entity<HrmCvinterview>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVInterview");

                entity.Property(e => e.Cvid).HasColumnName("CVId");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterviewDate).HasColumnType("datetime");

                entity.Property(e => e.InterviewEndTime).HasColumnType("datetime");

                entity.Property(e => e.InterviewStartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvinterviews)
                    .HasForeignKey(d => d.Cvid)
                    .HasConstraintName("FK_Hrm_CVInterview_Hrm_CV");

                entity.HasOne(d => d.Interviewer)
                    .WithMany(p => p.HrmCvinterviews)
                    .HasForeignKey(d => d.InterviewerId)
                    .HasConstraintName("FK_Hrm_CVInterview_Erp_Employee");
            });

            modelBuilder.Entity<HrmCvreference>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_CVReference");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.ReferenceCompany).HasMaxLength(100);

                entity.Property(e => e.ReferenceName).HasMaxLength(50);

                entity.Property(e => e.ReferenceSurname).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cv)
                    .WithMany(p => p.HrmCvreferences)
                    .HasForeignKey(d => d.CvId)
                    .HasConstraintName("FK_Hrm_CVReference_Hrm_CV");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmCvreferences)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_CVReference_Hrm_Position");
            });

            modelBuilder.Entity<HrmEmployeeAccrual>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_EmployeeAccrual");

                entity.HasIndex(e => e.CompanyId, "Hrm_EmployeeAccrual_IX0");

                entity.HasIndex(e => e.DepartmentId, "Hrm_EmployeeAccrual_IX1");

                entity.HasIndex(e => e.EmployeeId, "Hrm_EmployeeAccrual_IX2");

                entity.Property(e => e.Color1).HasMaxLength(50);

                entity.Property(e => e.Color10).HasMaxLength(50);

                entity.Property(e => e.Color11).HasMaxLength(50);

                entity.Property(e => e.Color12).HasMaxLength(50);

                entity.Property(e => e.Color13).HasMaxLength(50);

                entity.Property(e => e.Color14).HasMaxLength(50);

                entity.Property(e => e.Color15).HasMaxLength(50);

                entity.Property(e => e.Color16).HasMaxLength(50);

                entity.Property(e => e.Color17).HasMaxLength(50);

                entity.Property(e => e.Color18).HasMaxLength(50);

                entity.Property(e => e.Color19).HasMaxLength(50);

                entity.Property(e => e.Color2).HasMaxLength(50);

                entity.Property(e => e.Color20).HasMaxLength(50);

                entity.Property(e => e.Color21).HasMaxLength(50);

                entity.Property(e => e.Color22).HasMaxLength(50);

                entity.Property(e => e.Color23).HasMaxLength(50);

                entity.Property(e => e.Color24).HasMaxLength(50);

                entity.Property(e => e.Color25).HasMaxLength(50);

                entity.Property(e => e.Color26).HasMaxLength(50);

                entity.Property(e => e.Color27).HasMaxLength(50);

                entity.Property(e => e.Color28).HasMaxLength(50);

                entity.Property(e => e.Color29).HasMaxLength(50);

                entity.Property(e => e.Color3).HasMaxLength(50);

                entity.Property(e => e.Color30).HasMaxLength(50);

                entity.Property(e => e.Color31).HasMaxLength(50);

                entity.Property(e => e.Color4).HasMaxLength(50);

                entity.Property(e => e.Color5).HasMaxLength(50);

                entity.Property(e => e.Color6).HasMaxLength(50);

                entity.Property(e => e.Color7).HasMaxLength(50);

                entity.Property(e => e.Color8).HasMaxLength(50);

                entity.Property(e => e.Color9).HasMaxLength(50);

                entity.Property(e => e.Day1).HasMaxLength(50);

                entity.Property(e => e.Day10).HasMaxLength(50);

                entity.Property(e => e.Day11).HasMaxLength(50);

                entity.Property(e => e.Day12).HasMaxLength(50);

                entity.Property(e => e.Day13).HasMaxLength(50);

                entity.Property(e => e.Day14).HasMaxLength(50);

                entity.Property(e => e.Day15).HasMaxLength(50);

                entity.Property(e => e.Day16).HasMaxLength(50);

                entity.Property(e => e.Day17).HasMaxLength(50);

                entity.Property(e => e.Day18).HasMaxLength(50);

                entity.Property(e => e.Day19).HasMaxLength(50);

                entity.Property(e => e.Day2).HasMaxLength(50);

                entity.Property(e => e.Day20).HasMaxLength(50);

                entity.Property(e => e.Day21).HasMaxLength(50);

                entity.Property(e => e.Day22).HasMaxLength(50);

                entity.Property(e => e.Day23).HasMaxLength(50);

                entity.Property(e => e.Day24).HasMaxLength(50);

                entity.Property(e => e.Day25).HasMaxLength(50);

                entity.Property(e => e.Day26).HasMaxLength(50);

                entity.Property(e => e.Day27).HasMaxLength(50);

                entity.Property(e => e.Day28).HasMaxLength(50);

                entity.Property(e => e.Day29).HasMaxLength(50);

                entity.Property(e => e.Day3).HasMaxLength(50);

                entity.Property(e => e.Day30).HasMaxLength(50);

                entity.Property(e => e.Day31).HasMaxLength(50);

                entity.Property(e => e.Day4).HasMaxLength(50);

                entity.Property(e => e.Day5).HasMaxLength(50);

                entity.Property(e => e.Day6).HasMaxLength(50);

                entity.Property(e => e.Day7).HasMaxLength(50);

                entity.Property(e => e.Day8).HasMaxLength(50);

                entity.Property(e => e.Day9).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Fm1).HasColumnName("FM1");

                entity.Property(e => e.Fm10).HasColumnName("FM10");

                entity.Property(e => e.Fm11).HasColumnName("FM11");

                entity.Property(e => e.Fm12).HasColumnName("FM12");

                entity.Property(e => e.Fm13).HasColumnName("FM13");

                entity.Property(e => e.Fm14).HasColumnName("FM14");

                entity.Property(e => e.Fm15).HasColumnName("FM15");

                entity.Property(e => e.Fm16).HasColumnName("FM16");

                entity.Property(e => e.Fm17).HasColumnName("FM17");

                entity.Property(e => e.Fm18).HasColumnName("FM18");

                entity.Property(e => e.Fm19).HasColumnName("FM19");

                entity.Property(e => e.Fm2).HasColumnName("FM2");

                entity.Property(e => e.Fm20).HasColumnName("FM20");

                entity.Property(e => e.Fm21).HasColumnName("FM21");

                entity.Property(e => e.Fm22).HasColumnName("FM22");

                entity.Property(e => e.Fm23).HasColumnName("FM23");

                entity.Property(e => e.Fm24).HasColumnName("FM24");

                entity.Property(e => e.Fm25).HasColumnName("FM25");

                entity.Property(e => e.Fm26).HasColumnName("FM26");

                entity.Property(e => e.Fm27).HasColumnName("FM27");

                entity.Property(e => e.Fm28).HasColumnName("FM28");

                entity.Property(e => e.Fm29).HasColumnName("FM29");

                entity.Property(e => e.Fm3).HasColumnName("FM3");

                entity.Property(e => e.Fm30).HasColumnName("FM30");

                entity.Property(e => e.Fm31).HasColumnName("FM31");

                entity.Property(e => e.Fm4).HasColumnName("FM4");

                entity.Property(e => e.Fm5).HasColumnName("FM5");

                entity.Property(e => e.Fm6).HasColumnName("FM6");

                entity.Property(e => e.Fm7).HasColumnName("FM7");

                entity.Property(e => e.Fm8).HasColumnName("FM8");

                entity.Property(e => e.Fm9).HasColumnName("FM9");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmEmployeeAccruals)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_EmployeeAccrual_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.HrmEmployeeAccruals)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Hrm_EmployeeAccrual_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmEmployeeAccruals)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_EmployeeAccrual_Erp_Employee");
            });

            modelBuilder.Entity<HrmEmployeeDemand>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_EmployeeDemand");

                entity.HasIndex(e => new { e.CompanyId, e.DemandNo }, "Hrm_EmployeeDemand_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.Certificate).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DemandClosingDate).HasColumnType("datetime");

                entity.Property(e => e.DemandDate).HasColumnType("datetime");

                entity.Property(e => e.DemandNo).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.Height).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LanguageName).HasMaxLength(1000);

                entity.Property(e => e.MaxSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MinSalary).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.QuitEmployeeName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.WorkingStartDate).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmEmployeeDemands)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_EmployeeDemand_Erp_Company");

                entity.HasOne(d => d.Demanded)
                    .WithMany(p => p.HrmEmployeeDemandDemandeds)
                    .HasForeignKey(d => d.DemandedId)
                    .HasConstraintName("FK_Hrm_EmployeeDemand_Erp_Employee");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.HrmEmployeeDemands)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Hrm_EmployeeDemand_Erp_Department");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.HrmEmployeeDemandManagers)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("FK_Hrm_EmployeeDemand_Erp_Employee1");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmEmployeeDemands)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_EmployeeDemand_Hrm_Position");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.HrmEmployeeDemands)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Hrm_EmployeeDemand_Erp_Workplace");
            });

            modelBuilder.Entity<HrmEmployeeLeave>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_EmployeeLeave");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LeaveAddress).HasMaxLength(1000);

                entity.Property(e => e.LeaveTime).HasMaxLength(100);

                entity.Property(e => e.RequestedAt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.ApprovedByNavigation)
                    .WithMany(p => p.HrmEmployeeLeaveApprovedByNavigations)
                    .HasForeignKey(d => d.ApprovedBy)
                    .HasConstraintName("FK_Hrm_EmployeeLeave_Erp_Employee1_DBOnly");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmEmployeeLeaves)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_EmployeeLeave_Erp_Company");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmEmployeeLeaveEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_EmployeeLeave_Erp_Employee");

                entity.HasOne(d => d.LeaveType)
                    .WithMany(p => p.HrmEmployeeLeaves)
                    .HasForeignKey(d => d.LeaveTypeId)
                    .HasConstraintName("FK_Hrm_EmployeeLeave_Hrm_LeaveType");
            });

            modelBuilder.Entity<HrmExecutionProceeding>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ExecutionProceeding");

                entity.ToTable("Hrm_ExecutionProceeding");

                entity.HasIndex(e => e.EmployeeId, "Hrm_ExecutionProceeding_IX1");

                entity.HasIndex(e => e.AddPaymentId, "Hrm_ExecutionProceeding_IX2");

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.AddPaymentDeductionRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.ApprovedAt).HasColumnType("datetime");

                entity.Property(e => e.BankName).HasMaxLength(50);

                entity.Property(e => e.DeductionAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeductionRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(25);

                entity.Property(e => e.DocumentOwner).HasMaxLength(100);

                entity.Property(e => e.DocumentSerialNo).HasMaxLength(25);

                entity.Property(e => e.ExecutionOffice).HasMaxLength(100);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.IbanNo).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AddPayment)
                    .WithMany(p => p.HrmExecutionProceedings)
                    .HasForeignKey(d => d.AddPaymentId)
                    .HasConstraintName("FK_Hrm_ExecutionProceeding_Hrm_AddPaymentDeduction");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmExecutionProceedings)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_ExecutionProceeding_Erp_Employee");
            });

            modelBuilder.Entity<HrmLeaveEntitlement>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_LeaveEntitlement");

                entity.Property(e => e.Added).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.Balance).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.BalanceDayHourInfo).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Entitled).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Openning).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.Used).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UsedWithoutEntitlement).HasColumnType("decimal(28, 8)");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmLeaveEntitlements)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_LeaveEntitlement_Erp_Company");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmLeaveEntitlements)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_LeaveEntitlement_Erp_Employee");
            });

            modelBuilder.Entity<HrmLeaveGroup>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_LeaveGroup");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LeaveCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmLeaveGroups)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_LeaveGroup_Erp_Company");
            });

            modelBuilder.Entity<HrmLeaveGroupItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_LeaveGroupItem");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.LeaveGroup)
                    .WithMany(p => p.HrmLeaveGroupItems)
                    .HasForeignKey(d => d.LeaveGroupId)
                    .HasConstraintName("FK_Hrm_LeaveGroupItem_Hrm_LeaveGroup");
            });

            modelBuilder.Entity<HrmLeaveType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_LeaveType");

                entity.HasIndex(e => new { e.CompanyId, e.LeaveTypeCode }, "Hrm_LeaveType_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LeaveTypeCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmLeaveTypes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_LeaveType_Erp_Company");

                entity.HasOne(d => d.Time)
                    .WithMany(p => p.HrmLeaveTypes)
                    .HasForeignKey(d => d.TimeId)
                    .HasConstraintName("FK_Hrm_LeaveType_Hrm_Time");
            });

            modelBuilder.Entity<HrmPlacement>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Placement");

                entity.Property(e => e.Deadline).HasColumnType("datetime");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PlacementCompany).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmPlacements)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_Placement_Erp_Company");
            });

            modelBuilder.Entity<HrmPlacementItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_PlacementItem");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InterviewDate).HasColumnType("datetime");

                entity.Property(e => e.InterviewEndTime).HasColumnType("datetime");

                entity.Property(e => e.InterviewStartTime).HasColumnType("datetime");

                entity.Property(e => e.PlannedDate).HasColumnType("datetime");

                entity.Property(e => e.PlannedTime).HasColumnType("datetime");

                entity.Property(e => e.RequirementQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Advertisement)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.AdvertisementId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Hrm_Advertisement");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Hrm_Application");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Erp_Employee");

                entity.HasOne(d => d.Placement)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.PlacementId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Hrm_Placement");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Hrm_Position");

                entity.HasOne(d => d.Test)
                    .WithMany(p => p.HrmPlacementItems)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("FK_Hrm_PlacementItem_Hrm_Test");
            });

            modelBuilder.Entity<HrmPosition>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Position");

                entity.HasIndex(e => new { e.CompanyId, e.PositionCode }, "Hrm_Position_IX0")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyId, e.PositionName }, "Hrm_Position_IX1");

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PositionCode).HasMaxLength(25);

                entity.Property(e => e.PositionName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmPositions)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_Position_Erp_Company");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Hrm_Position_Hrm_Position_DBOnly");
            });

            modelBuilder.Entity<HrmSeverancePay>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_SeverancePay");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.IncomeAmount).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AddPayment)
                    .WithMany(p => p.HrmSeverancePays)
                    .HasForeignKey(d => d.AddPaymentId)
                    .HasConstraintName("FK_Hrm_SeverancePay_Hrm_AddPaymentDeduction");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmSeverancePays)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_SeverancePay_Erp_Employee");
            });

            modelBuilder.Entity<HrmTest>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Test");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ResultExplanation).HasMaxLength(1000);

                entity.Property(e => e.TestCode).HasMaxLength(25);

                entity.Property(e => e.TestDate).HasColumnType("datetime");

                entity.Property(e => e.TestName).HasMaxLength(50);

                entity.Property(e => e.TestTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmTests)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_Test_Erp_Company");
            });

            modelBuilder.Entity<HrmTestEmployee>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_TestEmployee");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.HrmTestEmployees)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK_Hrm_TestEmployee_Hrm_Application");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmTestEmployees)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_TestEmployee_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.HrmTestEmployees)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Hrm_TestEmployee_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.HrmTestEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Hrm_TestEmployee_Erp_Employee");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.HrmTestEmployees)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Hrm_TestEmployee_Hrm_Position");

                entity.HasOne(d => d.Test)
                    .WithMany(p => p.HrmTestEmployees)
                    .HasForeignKey(d => d.TestId)
                    .HasConstraintName("FK_Hrm_TestEmployee_Hrm_Test");
            });

            modelBuilder.Entity<HrmTime>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Hrm_Time");

                entity.Property(e => e.DefaultValue).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EdeclarationType).HasColumnName("EDeclarationType");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.OvertimeRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.TimeCode).HasMaxLength(25);

                entity.Property(e => e.TimeShortCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.HrmTimes)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Hrm_Time_Erp_Company");
            });

            modelBuilder.Entity<LicenseActivation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("License_Activation");

                entity.HasIndex(e => new { e.LicenseType, e.LicenseCode }, "License_Activation_IX0")
                    .IsUnique();

                entity.Property(e => e.LicenseCode).HasMaxLength(50);

                entity.Property(e => e.LicenseCustomer).HasMaxLength(25);

                entity.Property(e => e.ValidationHash).HasMaxLength(50);
            });

            modelBuilder.Entity<LicenseActiveUser>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("License_ActiveUser");

                entity.Property(e => e.MachineAddress).HasMaxLength(50);

                entity.Property(e => e.PlatformCode).HasMaxLength(25);

                entity.Property(e => e.ProductCode).HasMaxLength(25);

                entity.Property(e => e.SessionAddress).HasMaxLength(50);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LicenseActiveUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_License_ActiveUser_Meta_User");
            });

            modelBuilder.Entity<LogEinvoice>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Log_EInvoice");

                entity.Property(e => e.CompanyCode).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.OperationDate).HasColumnType("datetime");

                entity.Property(e => e.SysAdress).HasMaxLength(25);

                entity.Property(e => e.SysUserCode).HasMaxLength(25);

                entity.Property(e => e.UserCode).HasMaxLength(25);
            });

            modelBuilder.Entity<LogParameter>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Log_Parameter");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<LogTransaction>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Log_Transaction");

                entity.HasIndex(e => e.UserCode, "Log_Transaction_IX0");

                entity.HasIndex(e => new { e.CompanyCode, e.UserCode }, "Log_Transaction_IX1");

                entity.HasIndex(e => new { e.Boname, e.BorecId }, "Log_Transaction_IX2");

                entity.Property(e => e.Boname)
                    .HasMaxLength(50)
                    .HasColumnName("BOName");

                entity.Property(e => e.BorecId).HasColumnName("BORecId");

                entity.Property(e => e.CommandName).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(25);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.GpsXcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsXCoordinate");

                entity.Property(e => e.GpsYcoordinate)
                    .HasColumnType("decimal(18, 15)")
                    .HasColumnName("GpsYCoordinate");

                entity.Property(e => e.ItemCode).HasMaxLength(25);

                entity.Property(e => e.OperationDate).HasColumnType("datetime");

                entity.Property(e => e.SysAdress).HasMaxLength(25);

                entity.Property(e => e.SysUserCode).HasMaxLength(25);

                entity.Property(e => e.UserCode).HasMaxLength(25);
            });

            modelBuilder.Entity<MetaBank>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Bank");

                entity.ToTable("Meta_Bank");

                entity.HasIndex(e => new { e.CountryId, e.BankCode }, "Meta_Bank_IX0")
                    .IsUnique();

                entity.Property(e => e.BankCode).HasMaxLength(25);

                entity.Property(e => e.BankName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Swift).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaBanks)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_Bank_Meta_Country");
            });

            modelBuilder.Entity<MetaBankBranch>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_BankBranch");

                entity.HasIndex(e => new { e.MetaBankId, e.BranchCode }, "Meta_BankBranch_IX0");

                entity.Property(e => e.BranchCode).HasMaxLength(25);

                entity.Property(e => e.BranchName).HasMaxLength(50);

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Line1).HasMaxLength(50);

                entity.Property(e => e.Line2).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.SwiftCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_District");

                entity.HasOne(d => d.MetaBank)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.MetaBankId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_Bank");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_State");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.MetaBankBranches)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Meta_BankBranch_Meta_Town");
            });

            modelBuilder.Entity<MetaBlackList>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_BlackList");

                entity.HasIndex(e => new { e.DebtorKind, e.DebtorIdCardNo }, "Meta_BlackList_IX0");

                entity.Property(e => e.BlackListName).HasMaxLength(50);

                entity.Property(e => e.BlackListSurname).HasMaxLength(50);

                entity.Property(e => e.BlackListTradeName).HasMaxLength(100);

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.DebtorIdCardNo).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Line1).HasMaxLength(50);

                entity.Property(e => e.Line2).HasMaxLength(50);

                entity.Property(e => e.Line3).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.MetaBlackLists)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Meta_BlackList_Erp_CurrentAccount");
            });

            modelBuilder.Entity<MetaCalendar>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Calendar");

                entity.Property(e => e.Dday)
                    .HasMaxLength(15)
                    .HasColumnName("DDay");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Dmonth).HasColumnName("DMonth");

                entity.Property(e => e.Dyear).HasColumnName("DYear");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.MetaCalendars)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Meta_Calendar_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaCalendars)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_Calendar_Meta_Country");
            });

            modelBuilder.Entity<MetaCity>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_City");

                entity.Property(e => e.CityCode).HasMaxLength(25);

                entity.Property(e => e.CityName).HasMaxLength(50);

                entity.Property(e => e.CodeN).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LicensePlate).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaCities)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_City_Meta_Country");
            });

            modelBuilder.Entity<MetaCountry>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Country");

                entity.Property(e => e.CodeN).HasMaxLength(15);

                entity.Property(e => e.CodeN2).HasMaxLength(15);

                entity.Property(e => e.CountryCode).HasMaxLength(25);

                entity.Property(e => e.CountryName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Language).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaCreditCard>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_CreditCard");

                entity.Property(e => e.CardName).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.MetaBank)
                    .WithMany(p => p.MetaCreditCards)
                    .HasForeignKey(d => d.MetaBankId)
                    .HasConstraintName("FK_Meta_CreditCard_Meta_Bank");

                entity.HasOne(d => d.Symbol)
                    .WithMany(p => p.MetaCreditCards)
                    .HasForeignKey(d => d.SymbolId)
                    .HasConstraintName("FK_Meta_CreditCard_Meta_Symbol");
            });

            modelBuilder.Entity<MetaCreditCardBinCode>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_CreditCardBinCode");

                entity.Property(e => e.BinCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CreditCard)
                    .WithMany(p => p.MetaCreditCardBinCodes)
                    .HasForeignKey(d => d.CreditCardId)
                    .HasConstraintName("FK_Meta_CreditCardBinCode_Meta_CreditCard");
            });

            modelBuilder.Entity<MetaCreditCardGroup>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_CreditCardGroup");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Symbol)
                    .WithMany(p => p.MetaCreditCardGroups)
                    .HasForeignKey(d => d.SymbolId)
                    .HasConstraintName("FK_Meta_CreditCardGroup_Meta_Symbol");
            });

            modelBuilder.Entity<MetaCreditCardGroupItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_CreditCardGroupItem");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CreditCardGroup)
                    .WithMany(p => p.MetaCreditCardGroupItems)
                    .HasForeignKey(d => d.CreditCardGroupId)
                    .HasConstraintName("FK_Meta_CreditCardGroupItem_Meta_CreditCardGroup");

                entity.HasOne(d => d.CreditCard)
                    .WithMany(p => p.MetaCreditCardGroupItems)
                    .HasForeignKey(d => d.CreditCardId)
                    .HasConstraintName("FK_Meta_CreditCardGroupItem_Meta_CreditCard");
            });

            modelBuilder.Entity<MetaCtsp>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Ctsp");

                entity.ToTable("Meta_Ctsp");

                entity.HasIndex(e => e.CtspCode, "Meta_Ctsp_IX0")
                    .IsUnique();

                entity.Property(e => e.AdditionCustomTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.AntiDampingTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.CtspCode).HasMaxLength(25);

                entity.Property(e => e.CtspName).HasMaxLength(100);

                entity.Property(e => e.CustomTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReferencePrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaCtsps)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_Ctsp_Meta_Country");

                entity.HasOne(d => d.CurrentAccount)
                    .WithMany(p => p.MetaCtsps)
                    .HasForeignKey(d => d.CurrentAccountId)
                    .HasConstraintName("FK_Meta_Ctsp_Erp_CurrentAccount");
            });

            modelBuilder.Entity<MetaDataConstraint>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DataConstraint");

                entity.ToTable("Meta_DataConstraint");

                entity.HasIndex(e => new { e.CompanyId, e.TableName, e.FieldName }, "Meta_DataConstraint_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FieldName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaDataConstraints)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_DataConstraint_Company");
            });

            modelBuilder.Entity<MetaDataField>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DataField");

                entity.ToTable("Meta_DataField");

                entity.HasIndex(e => new { e.TableName, e.FieldName }, "Meta_DataField_IX0")
                    .IsUnique();

                entity.Property(e => e.Caption).HasMaxLength(50);

                entity.Property(e => e.DefaultValue).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FieldName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.UielementType).HasColumnName("UIElementType");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WorkListParamField).HasMaxLength(1000);
            });

            modelBuilder.Entity<MetaDataFieldClass>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DataFieldClass");

                entity.ToTable("Meta_DataFieldClass");

                entity.HasIndex(e => e.FieldId, "Meta_DataFieldClass_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.MetaDataFieldClasses)
                    .HasForeignKey(d => d.FieldId)
                    .HasConstraintName("FK_DataFieldClass_DataField");
            });

            modelBuilder.Entity<MetaDataFieldValue>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_DataFieldValue");

                entity.ToTable("Meta_DataFieldValue");

                entity.HasIndex(e => e.FieldId, "Meta_DataFieldValue_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FilterColumn).HasMaxLength(50);

                entity.Property(e => e.FilterValue).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Field)
                    .WithMany(p => p.MetaDataFieldValues)
                    .HasForeignKey(d => d.FieldId)
                    .HasConstraintName("FK_DataFieldValue_DataField");
            });

            modelBuilder.Entity<MetaDbversion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Meta_DBVersion");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.VersionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaDistrict>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_District");

                entity.Property(e => e.CodeN).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasMaxLength(25);

                entity.Property(e => e.DistrictName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.MetaDistricts)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Meta_District_Meta_City");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaDistricts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_District_Erp_Workplace");
            });

            modelBuilder.Entity<MetaExternal>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_External");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExtCode).HasMaxLength(25);

                entity.Property(e => e.ExtName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaExternalXref>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_ExternalXRef");

                entity.HasIndex(e => e.TableName, "Meta_ExternalXRef_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ExtKeyValue1).HasMaxLength(100);

                entity.Property(e => e.ExtKeyValue2).HasMaxLength(100);

                entity.Property(e => e.ExtKeyValue3).HasMaxLength(100);

                entity.Property(e => e.ExtKeyValue4).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.KeyValue1).HasMaxLength(100);

                entity.Property(e => e.KeyValue2).HasMaxLength(100);

                entity.Property(e => e.KeyValue3).HasMaxLength(100);

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Ext)
                    .WithMany(p => p.MetaExternalXrefs)
                    .HasForeignKey(d => d.ExtId)
                    .HasConstraintName("FK_Meta_ExternalXRef_Meta_External");
            });

            modelBuilder.Entity<MetaForex>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Forex");

                entity.ToTable("Meta_Forex");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FlagImage).HasColumnType("image");

                entity.Property(e => e.ForexCode).HasMaxLength(25);

                entity.Property(e => e.ForexName).HasMaxLength(50);

                entity.Property(e => e.ForexSubCode).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IntlCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaForexPrm>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ForexPrm");

                entity.ToTable("Meta_ForexPrm");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.RateCode).HasMaxLength(25);

                entity.Property(e => e.RateName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaForexRate>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_ForexRate");

                entity.ToTable("Meta_ForexRate");

                entity.HasIndex(e => new { e.RateDate, e.ForexId }, "Meta_ForexRate_IX0");

                entity.HasIndex(e => new { e.RateDate, e.ForexId, e.RateId }, "Meta_ForexRate_IX1");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Forex)
                    .WithMany(p => p.MetaForexRates)
                    .HasForeignKey(d => d.ForexId)
                    .HasConstraintName("FK_ForexRate_Forex");

                entity.HasOne(d => d.Rate)
                    .WithMany(p => p.MetaForexRates)
                    .HasForeignKey(d => d.RateId)
                    .HasConstraintName("FK_ForexRate_ForexPrm");
            });

            modelBuilder.Entity<MetaHotPoint>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HotPoint");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.HotPointCode).HasMaxLength(25);

                entity.Property(e => e.HotPointName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.MetaHotPoints)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Meta_HotPoint_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaHotPoints)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_HotPoint_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.MetaHotPoints)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Meta_HotPoint_Meta_District");
            });

            modelBuilder.Entity<MetaHrmAbsence>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HrmAbsence");

                entity.Property(e => e.AbsenceCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaHrmHazardSegment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HrmHazardSegment");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.HazardSegmentCode).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LowerRisk).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.Normal).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.OverRisk).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaHrmProfession>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HrmProfession");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ProfessionCode).HasMaxLength(25);

                entity.Property(e => e.ProfessionName).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaHrmQuit>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HrmQuit");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Ncode)
                    .HasMaxLength(25)
                    .HasColumnName("NCode");

                entity.Property(e => e.QuitCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaHrmSsiPrm>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HrmSsiPrm");

                entity.Property(e => e.ComRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EmpRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PrmCode).HasMaxLength(25);

                entity.Property(e => e.PrmName).HasMaxLength(50);

                entity.Property(e => e.PrmRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaHrmTaxSegment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_HrmTaxSegment");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LowerLimit).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.TaxCode).HasMaxLength(25);

                entity.Property(e => e.TaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UpperLimit).HasColumnType("decimal(28, 8)");
            });

            modelBuilder.Entity<MetaInventory>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_MetaInventory");

                entity.ToTable("Meta_Inventory");

                entity.HasIndex(e => e.Barcode, "Meta_Inventory_IX0")
                    .IsUnique();

                entity.Property(e => e.Barcode).HasMaxLength(30);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryName).HasMaxLength(50);

                entity.Property(e => e.RetailTaxRate).HasColumnType("decimal(11, 8)");

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.WholeSaleTaxRate).HasColumnType("decimal(11, 8)");
            });

            modelBuilder.Entity<MetaLanguageDatum>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_LanguageData");

                entity.ToTable("Meta_LanguageData");

                entity.HasIndex(e => new { e.TableId, e.TableRecId, e.FieldName, e.LanguageId }, "Meta_LanguageData_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FieldName).HasMaxLength(50);

                entity.Property(e => e.FieldValue).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaLocation>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Location");

                entity.HasIndex(e => e.LocationCode, "Meta_Location_IX0")
                    .IsUnique();

                entity.Property(e => e.CompanyCode).HasMaxLength(25);

                entity.Property(e => e.Dbaddress)
                    .HasMaxLength(100)
                    .HasColumnName("DBAddress");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(100)
                    .HasColumnName("DBName");

                entity.Property(e => e.Dbpassword)
                    .HasMaxLength(100)
                    .HasColumnName("DBPassword");

                entity.Property(e => e.Dbprovider)
                    .HasMaxLength(100)
                    .HasColumnName("DBProvider");

                entity.Property(e => e.Dbuser)
                    .HasMaxLength(100)
                    .HasColumnName("DBUser");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.LocationCode).HasMaxLength(25);

                entity.Property(e => e.LocationName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(25);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaMessage>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Message");

                entity.HasIndex(e => e.MessageFromUserId, "Meta_Message_IX0");

                entity.HasIndex(e => e.MessageToUserId, "Meta_Message_IX1");

                entity.Property(e => e.BoName).HasMaxLength(100);

                entity.Property(e => e.CommandExplanation).HasMaxLength(1000);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.KeyField).HasMaxLength(25);

                entity.Property(e => e.MessageDate).HasColumnType("datetime");

                entity.Property(e => e.Pm)
                    .HasMaxLength(1000)
                    .HasColumnName("PM");

                entity.Property(e => e.ReadDate).HasColumnType("datetime");

                entity.Property(e => e.Subject).HasMaxLength(1000);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.MessageFromUser)
                    .WithMany(p => p.MetaMessageMessageFromUsers)
                    .HasForeignKey(d => d.MessageFromUserId)
                    .HasConstraintName("FK_Meta_Message_Meta_User");

                entity.HasOne(d => d.MessageToUser)
                    .WithMany(p => p.MetaMessageMessageToUsers)
                    .HasForeignKey(d => d.MessageToUserId)
                    .HasConstraintName("FK_Meta_Message_Meta_User1");

                entity.HasOne(d => d.Schedule)
                    .WithMany(p => p.MetaMessages)
                    .HasForeignKey(d => d.ScheduleId)
                    .HasConstraintName("FK_Meta_Message_Meta_Schedule");
            });

            modelBuilder.Entity<MetaMessageProvider>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_MessageProvider");

                entity.HasIndex(e => e.ProviderCode, "Meta_MessageProvider_IX0")
                    .IsUnique();

                entity.Property(e => e.Dealer).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EmailAuthenticateMode).HasColumnName("EMailAuthenticateMode");

                entity.Property(e => e.EmailPort).HasColumnName("EMailPort");

                entity.Property(e => e.EmailSsl).HasColumnName("EMailSSL");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ProviderCode).HasMaxLength(25);

                entity.Property(e => e.ProviderName).HasMaxLength(50);

                entity.Property(e => e.Sender).HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserPassword).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaMessageProviders)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_MessageProvider_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaMessageProviders)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_MessageProvider_Erp_Workplace");
            });

            modelBuilder.Entity<MetaMessageTemplate>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_MessageTemplate");

                entity.HasIndex(e => e.TemplateCode, "Meta_MessageTemplate_IX0")
                    .IsUnique();

                entity.Property(e => e.BocontrolCode).HasColumnName("BOControlCode");

                entity.Property(e => e.BoisApproved).HasColumnName("BOIsApproved");

                entity.Property(e => e.Boname)
                    .HasMaxLength(50)
                    .HasColumnName("BOName");

                entity.Property(e => e.BoreceiptSubType).HasColumnName("BOReceiptSubType");

                entity.Property(e => e.BoreceiptType).HasColumnName("BOReceiptType");

                entity.Property(e => e.BoreceiptUpType).HasColumnName("BOReceiptUpType");

                entity.Property(e => e.BospecialCode)
                    .HasMaxLength(15)
                    .HasColumnName("BOSpecialCode");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TemplateCode).HasMaxLength(25);

                entity.Property(e => e.TemplateName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaMessageTemplates)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_MessageTemplate_Erp_Company");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaMessageTemplates)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_MessageTemplate_Erp_Workplace");
            });

            modelBuilder.Entity<MetaPo>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Pos");

                entity.HasIndex(e => e.MacAddress, "Meta_Pos_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.DepartmentCodeClosedReceiptStr).HasMaxLength(4000);

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MacAddress).HasMaxLength(50);

                entity.Property(e => e.OkcclientId).HasColumnName("OKCClientId");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.MetaPos)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Meta_Pos_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaPos)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_Pos_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.MetaPos)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Meta_Pos_Erp_Department");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaPos)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_Pos_Erp_Workplace");
            });

            modelBuilder.Entity<MetaPreset>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Preset");

                entity.HasIndex(e => new { e.CompanyId, e.UserId, e.PresetType, e.PresetName }, "Meta_Preset_IX0");

                entity.Property(e => e.OwnerName).HasMaxLength(50);

                entity.Property(e => e.PresetName).HasMaxLength(50);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaPresets)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_Preset_Erp_Company");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaPresets)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_Preset_Meta_User");
            });

            modelBuilder.Entity<MetaPrinter>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Printer");

                entity.Property(e => e.AlarmCodes).HasMaxLength(50);

                entity.Property(e => e.CutterCodes).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PrinterAddress).HasMaxLength(100);

                entity.Property(e => e.PrinterCode).HasMaxLength(25);

                entity.Property(e => e.PrinterName).HasMaxLength(50);

                entity.Property(e => e.ReleaseCodes).HasMaxLength(50);

                entity.Property(e => e.RewindCodes).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaPrinters)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_Printer_Erp_Company");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.MetaPrinters)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Meta_Printer_Erp_Resource");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaPrinters)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_Printer_Erp_Workplace");
            });

            modelBuilder.Entity<MetaReport>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Meta_Frm");

                entity.ToTable("Meta_Report");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReportName).HasMaxLength(50);

                entity.Property(e => e.ReportTitle).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaReports)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_Report_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.MetaReports)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Meta_Report_Erp_Department");

                entity.HasOne(d => d.Filter)
                    .WithMany(p => p.MetaReports)
                    .HasForeignKey(d => d.FilterId)
                    .HasConstraintName("FK_Meta_Report_Meta_Preset");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaReports)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_Report_Meta_User");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.MetaReports)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Meta_Report_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaReports)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_Report_Erp_Workplace");
            });

            modelBuilder.Entity<MetaResource>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Resource");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ResourceName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaResources)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_Resource_Erp_Company");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaResourceUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_Resource_Meta_User");

                entity.HasOne(d => d.UserRole)
                    .WithMany(p => p.MetaResourceUserRoles)
                    .HasForeignKey(d => d.UserRoleId)
                    .HasConstraintName("FK_Meta_Resource_Meta_User1");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaResources)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_Resource_Erp_Workplace");
            });

            modelBuilder.Entity<MetaSchedule>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Schedule");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ScheduleCode).HasMaxLength(25);

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaScript>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Meta_Script_1");

                entity.ToTable("Meta_Script");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ScriptName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaSector>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_Sector_City");

                entity.ToTable("Meta_Sector");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SectorName).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Meta_Sector_Meta_Sector_DBOnly");
            });

            modelBuilder.Entity<MetaState>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_State_City");

                entity.ToTable("Meta_State");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StateCode).HasMaxLength(25);

                entity.Property(e => e.StateName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaStates)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_State_Meta_Country");
            });

            modelBuilder.Entity<MetaStreet>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Street");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.StreetCode).HasMaxLength(25);

                entity.Property(e => e.StreetName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.MetaStreets)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Meta_Street_Meta_Town");
            });

            modelBuilder.Entity<MetaSymbol>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Symbol");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Symbol).HasColumnType("image");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaTaxOffice>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_TaxOffice");

                entity.Property(e => e.CodeN).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.Line1).HasMaxLength(50);

                entity.Property(e => e.Line2).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.MetaTaxOffices)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Meta_TaxOffice_Meta_City");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.MetaTaxOffices)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Meta_TaxOffice_Meta_Country");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.MetaTaxOffices)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Meta_TaxOffice_Meta_District");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.MetaTaxOffices)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_Meta_TaxOffice_Meta_Street");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.MetaTaxOffices)
                    .HasForeignKey(d => d.TownId)
                    .HasConstraintName("FK_Meta_TaxOffice_Meta_Town");
            });

            modelBuilder.Entity<MetaTown>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_Town");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.PostalCode).HasMaxLength(15);

                entity.Property(e => e.TownCode).HasMaxLength(100);

                entity.Property(e => e.TownName).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.MetaTowns)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Meta_Town_Meta_City");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.MetaTowns)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Meta_Town_Meta_District");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaTowns)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_Town_Erp_Workplace");
            });

            modelBuilder.Entity<MetaUnitSet>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UnitSet");

                entity.ToTable("Meta_UnitSet");

                entity.HasIndex(e => e.SetCode, "Meta_UnitSet_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SetCode).HasMaxLength(25);

                entity.Property(e => e.SetName).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaUnitSetItem>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UnitSetItem");

                entity.ToTable("Meta_UnitSetItem");

                entity.HasIndex(e => e.UnitSetId, "Meta_UnitSetItem_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UnitArea).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitCode).HasMaxLength(25);

                entity.Property(e => e.UnitDivisor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitFactor).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitHeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitLength).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.UnitVolume).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitWeight).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UnitWidth).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.UniversalCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.UnitSet)
                    .WithMany(p => p.MetaUnitSetItems)
                    .HasForeignKey(d => d.UnitSetId)
                    .HasConstraintName("FK_UnitSetItem_UnitSet");
            });

            modelBuilder.Entity<MetaUser>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UserTable");

                entity.ToTable("Meta_User");

                entity.HasIndex(e => e.UserCode, "Meta_User_IX0")
                    .IsUnique();

                entity.Property(e => e.AccessCode).HasMaxLength(15);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Email).HasColumnName("EMail");

                entity.Property(e => e.EmailAlwaysAddBcc).HasColumnName("EMailAlwaysAddBcc");

                entity.Property(e => e.EmailAuthenticateMode).HasColumnName("EMailAuthenticateMode");

                entity.Property(e => e.EmailPassword)
                    .HasMaxLength(25)
                    .HasColumnName("EMailPassword");

                entity.Property(e => e.EmailPort).HasColumnName("EMailPort");

                entity.Property(e => e.EmailReplyTo)
                    .HasMaxLength(50)
                    .HasColumnName("EMailReplyTo");

                entity.Property(e => e.EmailServerName)
                    .HasMaxLength(50)
                    .HasColumnName("EMailServerName");

                entity.Property(e => e.EmailSsl).HasColumnName("EMailSSL");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.EntryCode).HasMaxLength(25);

                entity.Property(e => e.GsmPhone).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.IpMax).HasMaxLength(50);

                entity.Property(e => e.IpMin).HasMaxLength(50);

                entity.Property(e => e.IsHrmuser).HasColumnName("IsHRMUser");

                entity.Property(e => e.MacAddress).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(32);

                entity.Property(e => e.PasswordDate).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.SslsecurityProtocol).HasColumnName("SSLSecurityProtocol");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.Property(e => e.UserCode).HasMaxLength(25);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.MetaUsers)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Meta_User_Erp_Cash");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.MetaUsers)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Meta_User_Erp_CostCenter");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.MetaUsers)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Meta_User_Erp_Department");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.MetaUsers)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_Meta_User_Erp_Employee");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.InverseRole)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_Meta_User_Meta_User_DBOnly");
            });

            modelBuilder.Entity<MetaUserAccess>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UserAccess");

                entity.ToTable("Meta_UserAccess");

                entity.HasIndex(e => e.UserId, "Meta_UserAccess_IX0");

                entity.Property(e => e.AccessCode).HasMaxLength(25);

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserAccesses)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_UserAccess_Meta_User");
            });

            modelBuilder.Entity<MetaUserAttachment>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_UserAttachment");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserAttachments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_UserAttachment_Meta_User");
            });

            modelBuilder.Entity<MetaUserCompany>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UserCompany");

                entity.ToTable("Meta_UserCompany");

                entity.HasIndex(e => e.UserId, "Meta_UserCompany_IX0");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaUserCompanies)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_UserCompany_Erp_Company");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserCompanies)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserCompany_UserTable");

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.MetaUserCompanies)
                    .HasForeignKey(d => d.WarehouseId)
                    .HasConstraintName("FK_Meta_UserCompany_Erp_Warehouse");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.MetaUserCompanies)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Meta_UserCompany_Erp_Workplace");
            });

            modelBuilder.Entity<MetaUserGroup>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_UserGroup");

                entity.HasIndex(e => e.GroupCode, "Meta_UserGroup_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.GroupCode).HasMaxLength(25);

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MetaUserGroupItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_UserGroupItem");

                entity.HasIndex(e => e.UserGroupId, "Meta_UserGroupItem_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(50);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCode).HasMaxLength(15);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.UserGroup)
                    .WithOne(p => p.MetaUserGroupItem)
                    .HasForeignKey<MetaUserGroupItem>(d => d.UserGroupId)
                    .HasConstraintName("FK_Meta_UserGroupItem_Meta_UserGroup");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserGroupItems)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_UserGroupItem_Meta_User");
            });

            modelBuilder.Entity<MetaUserHistory>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_UserHistory");

                entity.HasIndex(e => e.UserId, "Meta_UserHistory_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.OperationAt).HasColumnType("datetime");

                entity.Property(e => e.Password).HasMaxLength(32);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserHistories)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_UserHistory_Meta_User");
            });

            modelBuilder.Entity<MetaUserRight>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UserRight");

                entity.ToTable("Meta_UserRight");

                entity.HasIndex(e => e.UserId, "Meta_UserRight_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.FieldName).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaUserRights)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_UserRight_Erp_Company");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserRights)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserRight_UserTable");
            });

            modelBuilder.Entity<MetaUserRole>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_UserRoles");

                entity.ToTable("Meta_UserRoles");

                entity.HasIndex(e => e.UserId, "Meta_UserRoles_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.MetaUserRoles)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Meta_UserRoles_Erp_Company");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.MetaUserRoleRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_Meta_UserRoles_Meta_User_DBOnly");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaUserRoleUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_UserRoles_Meta_User");
            });

            modelBuilder.Entity<MetaWindowSetting>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Meta_WindowSetting");

                entity.HasIndex(e => new { e.ProductCode, e.UserId, e.WindowName }, "Meta_WindowSetting_IX0");

                entity.Property(e => e.ControlName).HasMaxLength(50);

                entity.Property(e => e.PropertyName).HasMaxLength(50);

                entity.Property(e => e.WindowName).HasMaxLength(100);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MetaWindowSettings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Meta_WindowSetting_Meta_User");
            });

            modelBuilder.Entity<PosMenu>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Pos_Menu");

                entity.HasIndex(e => new { e.CompanyId, e.MenuCode }, "Pos_Menu_IX0")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.MenuCode).HasMaxLength(25);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.PosMenus)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Pos_Menu_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.PosMenus)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Pos_Menu_Erp_Department");
            });

            modelBuilder.Entity<PosMenuItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Pos_MenuItem");

                entity.HasIndex(e => e.MenuId, "Pos_MenuItem_IX0");

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.InventoryCodeTepmlate).HasMaxLength(25);

                entity.Property(e => e.IsShowQrmenu).HasColumnName("IsShowQRMenu");

                entity.Property(e => e.MenuImage).HasColumnType("image");

                entity.Property(e => e.MenuPrice).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.MenuQuantity).HasColumnType("decimal(28, 8)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.AdditionalAttrSet)
                    .WithMany(p => p.PosMenuItemAdditionalAttrSets)
                    .HasForeignKey(d => d.AdditionalAttrSetId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_InventoryAttributeSet");

                entity.HasOne(d => d.AdditionalAttrSetItem)
                    .WithMany(p => p.PosMenuItemAdditionalAttrSetItems)
                    .HasForeignKey(d => d.AdditionalAttrSetItemId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_InventoryAttributeSetItem");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.PosMenuItems)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_Department");

                entity.HasOne(d => d.InventoryGroup)
                    .WithMany(p => p.PosMenuItems)
                    .HasForeignKey(d => d.InventoryGroupId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_InventoryGroup");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.PosMenuItemInventories)
                    .HasForeignKey(d => d.InventoryId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_Inventory");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.PosMenuItems)
                    .HasForeignKey(d => d.MenuId)
                    .HasConstraintName("FK_Pos_MenuItem_Pos_Menu");

                entity.HasOne(d => d.ParentItem)
                    .WithMany(p => p.InverseParentItem)
                    .HasForeignKey(d => d.ParentItemId)
                    .HasConstraintName("FK_Pos_MenuItem_Pos_MenuItem");

                entity.HasOne(d => d.PromotionalAttrSet)
                    .WithMany(p => p.PosMenuItemPromotionalAttrSets)
                    .HasForeignKey(d => d.PromotionalAttrSetId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_InventoryAttributeSet1");

                entity.HasOne(d => d.PromotionalAttrSetItem)
                    .WithMany(p => p.PosMenuItemPromotionalAttrSetItems)
                    .HasForeignKey(d => d.PromotionalAttrSetItemId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_InventoryAttributeSetItem1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.PosMenuItems)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_Service");

                entity.HasOne(d => d.SetMenuOrAdditionalInventory)
                    .WithMany(p => p.PosMenuItemSetMenuOrAdditionalInventories)
                    .HasForeignKey(d => d.SetMenuOrAdditionalInventoryId)
                    .HasConstraintName("FK_Pos_MenuItem_Erp_Inventory1");
            });

            modelBuilder.Entity<PosShift>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Pos_Shifts");

                entity.HasIndex(e => new { e.CompanyId, e.WorkplaceId, e.DepartmentId, e.CashId, e.ReceiptNo }, "Pos_Shifts_IX0")
                    .IsUnique();

                entity.Property(e => e.Explanation).HasMaxLength(100);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptNo).HasMaxLength(25);

                entity.Property(e => e.ShiftsEnd).HasColumnType("datetime");

                entity.Property(e => e.ShiftsStart).HasColumnType("datetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.Cash)
                    .WithMany(p => p.PosShifts)
                    .HasForeignKey(d => d.CashId)
                    .HasConstraintName("FK_Pos_Shifts_Erp_Cash");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.PosShifts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Pos_Shifts_Erp_Company");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.PosShifts)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Pos_Shifts_Erp_Department");

                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.PosShifts)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Pos_Shifts_Erp_Workplace");
            });

            modelBuilder.Entity<Replication>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Replication");

                entity.HasIndex(e => new { e.LogTime, e.LocationId, e.LogType, e.Type }, "IX_Replication");

                entity.Property(e => e.LogId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.BoCode).HasMaxLength(25);

                entity.Property(e => e.BoName).HasMaxLength(25);

                entity.Property(e => e.LogTime).HasColumnType("datetime");

                entity.Property(e => e.Message).HasMaxLength(100);

                entity.Property(e => e.ToBoCode).HasMaxLength(25);
            });

            modelBuilder.Entity<RplTask>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Rpl_Task");

                entity.HasIndex(e => new { e.CompanyId, e.Direction, e.Type, e.ExecuteDate, e.ExecuteTime, e.IsCompleted, e.IsFailed }, "IX_Rpl_Task_0");

                entity.Property(e => e.ExecuteDate).HasColumnType("datetime");

                entity.Property(e => e.ExecuteTime).HasColumnType("datetime");

                entity.Property(e => e.Explanation).HasMaxLength(1000);

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.SourceTaskKey).HasMaxLength(32);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.RplTasks)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Rpl_Task_Erp_Company");
            });

            modelBuilder.Entity<RplTaskItem>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Rpl_TaskItem");

                entity.Property(e => e.BoName).HasMaxLength(100);

                entity.Property(e => e.KeyCode).HasMaxLength(25);

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.HasOne(d => d.TaskNavigation)
                    .WithMany(p => p.RplTaskItems)
                    .HasForeignKey(d => d.Task)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Rpl_TaskItem_Rpl_Task");
            });

            modelBuilder.Entity<RplTaskTarget>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Rpl_TaskTarget");

                entity.Property(e => e.ExecuteTime).HasColumnType("datetime");

                entity.Property(e => e.InsertTime).HasColumnType("datetime");

                entity.Property(e => e.SourceTaskKey).HasMaxLength(32);

                entity.Property(e => e.SuccessfulTime).HasColumnType("datetime");

                entity.Property(e => e.TaskKey).HasMaxLength(32);

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.RplTaskTargets)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_Rpl_TaskTarget_Meta_Location");

                entity.HasOne(d => d.TaskItemNavigation)
                    .WithMany(p => p.RplTaskTargets)
                    .HasForeignKey(d => d.TaskItem)
                    .HasConstraintName("FK_Rpl_TaskTarget_Rpl_TaskItem");

                entity.HasOne(d => d.ToCompany)
                    .WithMany(p => p.RplTaskTargets)
                    .HasForeignKey(d => d.ToCompanyId)
                    .HasConstraintName("FK_Rpl_TaskTarget_Erp_Company");
            });

            modelBuilder.Entity<RplXref>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Rpl_Xref");

                entity.HasIndex(e => new { e.FromLocationId, e.TableName }, "Rpl_Xref_IX0");

                entity.Property(e => e.InsertedAt).HasColumnType("datetime");

                entity.Property(e => e.KeyCode).HasMaxLength(25);

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.HasOne(d => d.FromCompany)
                    .WithMany(p => p.RplXrefFromCompanies)
                    .HasForeignKey(d => d.FromCompanyId)
                    .HasConstraintName("FK_Rpl_Xref_Erp_Company");

                entity.HasOne(d => d.FromLocation)
                    .WithMany(p => p.RplXrefs)
                    .HasForeignKey(d => d.FromLocationId)
                    .HasConstraintName("FK_Rpl_Xref_Meta_Location");

                entity.HasOne(d => d.ToCompany)
                    .WithMany(p => p.RplXrefToCompanies)
                    .HasForeignKey(d => d.ToCompanyId)
                    .HasConstraintName("FK_Rpl_Xref_Erp_Company1");
            });

            modelBuilder.Entity<VwGlaccountBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwGLAccountBalance");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(25)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(50)
                    .UseCollation("SQL_Latin1_General_CP1257_CS_AS");

                entity.Property(e => e.CreditAll).HasColumnType("decimal(38, 8)");

                entity.Property(e => e.DebitAll).HasColumnType("decimal(38, 8)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
